/*----- PROTECTED REGION ID(LiberaBrilliancePlus.h) ENABLED START -----*/
//=============================================================================
//
// file :        LiberaBrilliancePlus.h
//
// description : Include for the LiberaBrilliancePlus class.
//
// project :     Libera BPM Device Server.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LIBERABRILLIANCEPLUS_H
#define LIBERABRILLIANCEPLUS_H


#include <tango.h>

class LiberaClient;
class LiberaSignal;

/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus.h

/**
 *  LiberaBrilliancePlus class description:
 *    IT Libera BPM Device Server.
 *    The interface should be the same as for the Brillance model.
 */

namespace LiberaBrilliancePlus_ns
{
/*----- PROTECTED REGION ID(LiberaBrilliancePlus::Additional Class Declarations) ENABLED START -----*/

		//		Additional Class Declarations

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::Additional Class Declarations

class LiberaBrilliancePlus : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(LiberaBrilliancePlus::Data Members) ENABLED START -----*/

	//		Add your own data members
    LiberaClient *m_libera;

    LiberaSignal *m_signalDdc;
    LiberaSignal *m_signalDdcRaw;
    Tango::DevBoolean *attr_DDEnabled_read_added; //declared here for completeness
    Tango::DevLong   *attr_DDBufferSize_read_added;

    LiberaSignal *m_signalSA;

    LiberaSignal *m_signalPM;
    Tango::DevBoolean *attr_PMEnabled_read_added; //declared here for completeness
    Tango::DevLong   *attr_PMBufferSize_read_added;

    LiberaSignal *m_signalADC;

    std::string m_raf;

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::Data Members

//	Device property data members
public:
	//	LiberaIpAddr:	The Libera IP address [no default value]
	string	liberaIpAddr;
	//	LiberaPort:	The port on which the generic server handles external requests. Defaults to 23721.
	Tango::DevShort	liberaPort;
	//	DefaultDDBufferSize:	Default [or initial] value for attribute DDBufferSize [in samples]. Defaults to 1024.
	Tango::DevLong	defaultDDBufferSize;
	//	Switches:	Switches configuration. The valid range is [0..15]. Defaults to 3.
	Tango::DevShort	switches;
	//	LiberaMulticastIpAddr:	Asynch. notifications (e.g. trigger events) will be send to this addr [no default value]
	string	liberaMulticastIpAddr;
	//	Location:	The BPM location [TL1, BOOSTER, TL2 or STORAGE_RING]. No default value.
	string	location;
	//	EnableExternalTrigger:	Enables (or not) the external trigger source.
	//  Inlfuences the TANGO device behaviour not the Libera itself. Defaults to false.
	Tango::DevBoolean	enableExternalTrigger;
	//	DDTaskActivityPeriod:	Specify the watch-dog (1) or data reading period (2) in ms.
	//  Must be in the rangec [500, 25000] ms. Defaults to 1000.
	//  (1) : external trigger enabled - (2) : external trigger disabled.
	Tango::DevULong	dDTaskActivityPeriod;
	//	SATaskActivityPeriod:	Specify the watch-dog (1) or data reading period (2) in ms.
	//  Must be in the range [100, 25000] ms. Defaults to 100.
	Tango::DevULong	sATaskActivityPeriod;
	//	EnableDD:	Specifies whether or not the DD data source should be enabled at startup. Defaults to false.
	Tango::DevBoolean	enableDD;
	//	EnableSA:	Specifies whether or not the SA data source should be enabled at startup. Defaults to false.
	Tango::DevBoolean	enableSA;
	//	SAHistoryLength:	SA history buffer length [in samples]. Defaults to 8196.
	Tango::DevULong	sAHistoryLength;
	//	EnableAutoSwitchingIfSAEnabled:	When set to TRUE, auto-switching is automattically enabled when the SA data source is itself enabled
	Tango::DevBoolean	enableAutoSwitchingIfSAEnabled;
	//	EnableDSCIfAutoSwitchingEnabled:	When set to TRUE, the Digital Signal Conditioning is automattically enabled when the auto-switching is itself enabled
	Tango::DevBoolean	enableDSCIfAutoSwitchingEnabled;
	//	DefaultSAStatNumSamples:	Default number of SA history samples to use form RMS pos. computation.
	//  Defaults to 10 (last second in the SA history).
	Tango::DevULong	defaultSAStatNumSamples;
	//	DefaultADCBufferSize:	Default [or initial] value for attribute ADCBufferSize [in samples]. Defaults to 1024.
	Tango::DevLong	defaultADCBufferSize;
	//	ADCTaskActivityPeriod:	Specifies the data reading period in ms.
	//  Must be in the range [500, 25000] ms. Defaults to 1000.
	Tango::DevULong	aDCTaskActivityPeriod;
	//	EnableADC:	Specifies whether or not the ADC data source should be enabled at startup. Defaults to false.
	Tango::DevBoolean	enableADC;
	//	DefaultTimePhaseValue:	Default value for the machine time phase. Its valid range is [0, RfSfRatio - 1] where
	//  RfSfRatio is a machine dependent system property.
	Tango::DevLong	defaultTimePhaseValue;
	//	InterlockConfiguration:	The user defined interlock configuration. This is the configuration that should be applied on the Libera in case the device `finds`
	//  the Libera in its default startup configuration when it is itself starting up or executing its Init TANGO command. This configuration
	//  can also be applied using the dedicated `SetInterlockConfiguration` expert command.
	//  Parameters mapping:
	//  [0] Interlock : mode - [0]: disabled, [1]: enabled, [3]: enabled with gain dependency
	//  [1] Interlock : threshold : X low in mm
	//  [2] Interlock : threshold : X high in mm
	//  [3] Interlock : threshold : Z low in mm (i.e. Y low in the Libera terminology)
	//  [4] Interlock : threshold : Z high in mm (i.e. Y high in the Libera terminology)
	//  [5] Interlock : overflow limit (ADC threshold)
	//  [6] Interlock : overflow duration (num of overloaded ADC samples before raising intlck)
	//  [7] Interlock : gain limit in dBm  (intlck not active under this limit) - valid range is [-60, 0]
	vector<Tango::DevDouble>	interlockConfiguration;
	//	EnableDDOptionalData:	Enables/Disables  DD optional data (IxDD and QxDD)
	Tango::DevBoolean	enableDDOptionalData;
	//	EnableSAOptionalData:	Enables/disables SA optional Data (currently not used)
	Tango::DevBoolean	enableSAOptionalData;
	//	EnableSAHistoryOptionalData:	Enables/disables SA History optional data (sum history)
	Tango::DevBoolean	enableSAHistoryOptionalData;
	//	EnableADCOptionalData:	Enables/disables ADC optional data (currently not used)
	Tango::DevBoolean	enableADCOptionalData;
	//	Institute:	0: TANGO_INSTITUTE (GENERIC)
	//  1: ALBA
	//  2: ESRF
	//  3: ELETTRA
	//  4: SOLEIL
	Tango::DevShort	institute;
	//	MaxDDBufferSizeWhenDecimationEnabled:	Max. DD buffer size when decimation enabled on DD data source.
	//  Defaults to 10000
	Tango::DevLong	maxDDBufferSizeWhenDecimationEnabled;
	//	PassBBAOffsetsToFPGA:	Controls wether or not the BBA offsets are taken into account when computing the offsets passed to the FPGA process
	Tango::DevBoolean	passBBAOffsetsToFPGA;
	//	FADataCacheRefreshPeriod:	The <FA Data> cache refresh period in msecs.
	//  Defaults to 500 ms (2Hz).
	Tango::DevULong	fADataCacheRefreshPeriod;
	//	LiberaBoard:	BPM board ID within the chassis [raf3,raf4,raf5 or raf6]
	string	liberaBoard;

//	Attribute data members
public:
	Tango::DevUShort	*attr_LiberaModel_read;
	Tango::DevBoolean	*attr_DDEnabled_read;
	Tango::DevLong	*attr_DDBufferSize_read;
	Tango::DevLong	*attr_DDTriggerOffset_read;
	Tango::DevBoolean	*attr_DDBufferFreezingEnabled_read;
	Tango::DevBoolean	*attr_DDBufferFrozen_read;
	Tango::DevLong	*attr_DDTriggerCounter_read;
	Tango::DevBoolean	*attr_ExternalTriggerEnabled_read;
	Tango::DevLong	*attr_ExternalTriggerDelay_read;
	Tango::DevBoolean	*attr_SAEnabled_read;
	Tango::DevDouble	*attr_VaSA_read;
	Tango::DevDouble	*attr_VbSA_read;
	Tango::DevDouble	*attr_VcSA_read;
	Tango::DevDouble	*attr_VdSA_read;
	Tango::DevDouble	*attr_XPosSA_read;
	Tango::DevDouble	*attr_ZPosSA_read;
	Tango::DevDouble	*attr_SumSA_read;
	Tango::DevDouble	*attr_QuadSA_read;
	Tango::DevLong	*attr_CxSA_read;
	Tango::DevLong	*attr_CzSA_read;
	Tango::DevLong	*attr_SAStatNumSamples_read;
	Tango::DevDouble	*attr_XMeanPosSA_read;
	Tango::DevDouble	*attr_ZMeanPosSA_read;
	Tango::DevDouble	*attr_XRMSPosSA_read;
	Tango::DevDouble	*attr_ZRMSPosSA_read;
	Tango::DevDouble	*attr_XPeakPosSA_read;
	Tango::DevDouble	*attr_ZPeakPosSA_read;
	Tango::DevDouble	*attr_SumMeanSA_read;
	Tango::DevBoolean	*attr_ADCEnabled_read;
	Tango::DevLong	*attr_ADCBufferSize_read;
	Tango::DevLong	*attr_PMOffset_read;
	Tango::DevBoolean	*attr_PMNotified_read;
	Tango::DevShort	*attr_PMNotificationCounter_read;
	Tango::DevBoolean	*attr_InterlockXNotified_read;
	Tango::DevBoolean	*attr_InterlockZNotified_read;
	Tango::DevBoolean	*attr_InterlockAttnNotified_read;
	Tango::DevBoolean	*attr_InterlockADCPreFilterNotified_read;
	Tango::DevBoolean	*attr_InterlockADCPostFilterNotified_read;
	Tango::DevDouble	*attr_XLow_read;
	Tango::DevDouble	*attr_XHigh_read;
	Tango::DevDouble	*attr_ZLow_read;
	Tango::DevDouble	*attr_ZHigh_read;
	Tango::DevBoolean	*attr_AutoSwitchingEnabled_read;
	Tango::DevShort	*attr_Switches_read;
	Tango::DevBoolean	*attr_ExternalSwitching_read;
	Tango::DevLong	*attr_SwitchingDelay_read;
	Tango::DevLong	*attr_OffsetTune_read;
	Tango::DevBoolean	*attr_CompensateTune_read;
	Tango::DevShort	*attr_DSCMode_read;
	Tango::DevBoolean	*attr_AGCEnabled_read;
	Tango::DevDouble	*attr_Gain_read;
	Tango::DevBoolean	*attr_HasMAFSupport_read;
	Tango::DevDouble	*attr_MachineTime_read;
	Tango::DevLong	*attr_TimePhase_read;
	Tango::DevBoolean	*attr_SCPLLStatus_read;
	Tango::DevBoolean	*attr_MCPLLStatus_read;
	Tango::DevShort	*attr_Temp1_read;
	Tango::DevShort	*attr_Temp2_read;
	Tango::DevShort	*attr_Temp3_read;
	Tango::DevShort	*attr_Fan1Speed_read;
	Tango::DevShort	*attr_Fan2Speed_read;
	Tango::DevDouble	*attr_Incoherence_read;
	Tango::DevDouble	*attr_RefIncoherence_read;
	Tango::DevDouble	*attr_MaxIncoherence_read;
	Tango::DevDouble	*attr_MaxIncoherenceDrift_read;
	Tango::DevLong	*attr_UpTime_read;
	Tango::DevLong	*attr_CpuUsage_read;
	Tango::DevLong	*attr_FreeMemory_read;
	Tango::DevLong	*attr_RamFsUsage_read;
	Tango::DevBoolean	*attr_UseLiberaSAData_read;
	Tango::DevBoolean	*attr_InterlockEnabled_read;
	Tango::DevBoolean	*attr_InterlockGainDependentEnabled_read;
	Tango::DevLong	*attr_InterlockOverflowThreshold_read;
	Tango::DevLong	*attr_InterlockOverflowDuration_read;
	Tango::DevLong	*attr_InterlockGainDependentThreshold_read;
	Tango::DevDouble	*attr_Kx_read;
	Tango::DevDouble	*attr_Kz_read;
	Tango::DevDouble	*attr_XOffset_read;
	Tango::DevDouble	*attr_ZOffset_read;
	Tango::DevDouble	*attr_XPosDD_read;
	Tango::DevDouble	*attr_ZPosDD_read;
	Tango::DevDouble	*attr_QuadDD_read;
	Tango::DevDouble	*attr_SumDD_read;
	Tango::DevDouble	*attr_VaDD_read;
	Tango::DevDouble	*attr_VbDD_read;
	Tango::DevDouble	*attr_VcDD_read;
	Tango::DevDouble	*attr_VdDD_read;
	Tango::DevDouble	*attr_XPosSAHistory_read;
	Tango::DevDouble	*attr_ZPosSAHistory_read;
	Tango::DevDouble	*attr_SumSAHistory_read;
	Tango::DevDouble	*attr_XPosPM_read;
	Tango::DevDouble	*attr_ZPosPM_read;
	Tango::DevDouble	*attr_QuadPM_read;
	Tango::DevDouble	*attr_SumPM_read;
	Tango::DevDouble	*attr_VaPM_read;
	Tango::DevDouble	*attr_VbPM_read;
	Tango::DevDouble	*attr_VcPM_read;
	Tango::DevDouble	*attr_VdPM_read;
	Tango::DevShort	*attr_ADCChannelA_read;
	Tango::DevShort	*attr_ADCChannelB_read;
	Tango::DevShort	*attr_ADCChannelC_read;
	Tango::DevShort	*attr_ADCChannelD_read;
	Tango::DevDouble	*attr_IaDD_read;
	Tango::DevDouble	*attr_IbDD_read;
	Tango::DevDouble	*attr_IcDD_read;
	Tango::DevDouble	*attr_IdDD_read;
	Tango::DevDouble	*attr_QaDD_read;
	Tango::DevDouble	*attr_QbDD_read;
	Tango::DevDouble	*attr_QcDD_read;
	Tango::DevDouble	*attr_QdDD_read;
	Tango::DevShort	*attr_UserData_read;
	Tango::DevString	*attr_logs_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LiberaBrilliancePlus(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LiberaBrilliancePlus(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	LiberaBrilliancePlus(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */	
	~LiberaBrilliancePlus() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : LiberaBrilliancePlus::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : LiberaBrilliancePlus::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute LiberaModel related methods
 *	Description: The Libera Model: 0:Electron, 1:Brillance, 2:Photon
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_LiberaModel(Tango::Attribute &attr);
	virtual bool is_LiberaModel_allowed(Tango::AttReqType type);
/**
 *	Attribute DDEnabled related methods
 *	Description: DD data source activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_DDEnabled(Tango::Attribute &attr);
	virtual void write_DDEnabled(Tango::WAttribute &attr);
	virtual bool is_DDEnabled_allowed(Tango::AttReqType type);
/**
 *	Attribute DDBufferSize related methods
 *	Description: The number of samples to be read on DD data source.\nInfluences the size of the associated attributes [such as XPosDD for instance].
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_DDBufferSize(Tango::Attribute &attr);
	virtual void write_DDBufferSize(Tango::WAttribute &attr);
	virtual bool is_DDBufferSize_allowed(Tango::AttReqType type);
/**
 *	Attribute DDTriggerOffset related methods
 *	Description: DD data offset in num. of turns
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_DDTriggerOffset(Tango::Attribute &attr);
	virtual void write_DDTriggerOffset(Tango::WAttribute &attr);
	virtual bool is_DDTriggerOffset_allowed(Tango::AttReqType type);
/**
 *	Attribute DDBufferFreezingEnabled related methods
 *	Description: DD buffer freezing activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_DDBufferFreezingEnabled(Tango::Attribute &attr);
	virtual bool is_DDBufferFreezingEnabled_allowed(Tango::AttReqType type);
/**
 *	Attribute DDBufferFrozen related methods
 *	Description: DD buffer status
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_DDBufferFrozen(Tango::Attribute &attr);
	virtual bool is_DDBufferFrozen_allowed(Tango::AttReqType type);
/**
 *	Attribute DDTriggerCounter related methods
 *	Description: Number of trigger notifications received since last device <init> 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_DDTriggerCounter(Tango::Attribute &attr);
	virtual bool is_DDTriggerCounter_allowed(Tango::AttReqType type);
/**
 *	Attribute ExternalTriggerEnabled related methods
 *	Description: External trigger activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_ExternalTriggerEnabled(Tango::Attribute &attr);
	virtual void write_ExternalTriggerEnabled(Tango::WAttribute &attr);
	virtual bool is_ExternalTriggerEnabled_allowed(Tango::AttReqType type);
/**
 *	Attribute ExternalTriggerDelay related methods
 *	Description: Sets the delay on the external trigger arrival. 
 *               The delay is set in steps of ADC samples (~ 9 ns).
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_ExternalTriggerDelay(Tango::Attribute &attr);
	virtual void write_ExternalTriggerDelay(Tango::WAttribute &attr);
	virtual bool is_ExternalTriggerDelay_allowed(Tango::AttReqType type);
/**
 *	Attribute SAEnabled related methods
 *	Description: SA data source activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_SAEnabled(Tango::Attribute &attr);
	virtual void write_SAEnabled(Tango::WAttribute &attr);
	virtual bool is_SAEnabled_allowed(Tango::AttReqType type);
/**
 *	Attribute VaSA related methods
 *	Description: Slow Acquisition: Va
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_VaSA(Tango::Attribute &attr);
	virtual bool is_VaSA_allowed(Tango::AttReqType type);
/**
 *	Attribute VbSA related methods
 *	Description: Slow Acquisition: Vb
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_VbSA(Tango::Attribute &attr);
	virtual bool is_VbSA_allowed(Tango::AttReqType type);
/**
 *	Attribute VcSA related methods
 *	Description: Slow Acquisition: Vc
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_VcSA(Tango::Attribute &attr);
	virtual bool is_VcSA_allowed(Tango::AttReqType type);
/**
 *	Attribute VdSA related methods
 *	Description: Slow Acquisition: Vd
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_VdSA(Tango::Attribute &attr);
	virtual bool is_VdSA_allowed(Tango::AttReqType type);
/**
 *	Attribute XPosSA related methods
 *	Description: Slow Acquisition: X
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_XPosSA(Tango::Attribute &attr);
	virtual bool is_XPosSA_allowed(Tango::AttReqType type);
/**
 *	Attribute ZPosSA related methods
 *	Description: Slow Acquisition: Z
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ZPosSA(Tango::Attribute &attr);
	virtual bool is_ZPosSA_allowed(Tango::AttReqType type);
/**
 *	Attribute SumSA related methods
 *	Description: Slow Acquisition: Sum
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_SumSA(Tango::Attribute &attr);
	virtual bool is_SumSA_allowed(Tango::AttReqType type);
/**
 *	Attribute QuadSA related methods
 *	Description: Slow Acquisition: Quad
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_QuadSA(Tango::Attribute &attr);
	virtual bool is_QuadSA_allowed(Tango::AttReqType type);
/**
 *	Attribute CxSA related methods
 *	Description: FOFB X correction sent to the power supply
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_CxSA(Tango::Attribute &attr);
	virtual bool is_CxSA_allowed(Tango::AttReqType type);
/**
 *	Attribute CzSA related methods
 *	Description: FOFB Z correction sent to the power supply
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_CzSA(Tango::Attribute &attr);
	virtual bool is_CzSA_allowed(Tango::AttReqType type);
/**
 *	Attribute SAStatNumSamples related methods
 *	Description: The number of sample in SA history used to compute the SA statistics\n(Mean, RMS, Peak pos). The most recent samples will be used.\nThe valid range is [2, SAHistoryLength property value].\n
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_SAStatNumSamples(Tango::Attribute &attr);
	virtual void write_SAStatNumSamples(Tango::WAttribute &attr);
	virtual bool is_SAStatNumSamples_allowed(Tango::AttReqType type);
/**
 *	Attribute XMeanPosSA related methods
 *	Description: Slow Acquisition:  arithmetic average from history values
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_XMeanPosSA(Tango::Attribute &attr);
	virtual bool is_XMeanPosSA_allowed(Tango::AttReqType type);
/**
 *	Attribute ZMeanPosSA related methods
 *	Description: Slow Acquisition:  arithmetic average from history values
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ZMeanPosSA(Tango::Attribute &attr);
	virtual bool is_ZMeanPosSA_allowed(Tango::AttReqType type);
/**
 *	Attribute XRMSPosSA related methods
 *	Description: Slow Acquisition:  X root mean square from histry samples sqrt(Xi^2-mean^2)/N^2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_XRMSPosSA(Tango::Attribute &attr);
	virtual bool is_XRMSPosSA_allowed(Tango::AttReqType type);
/**
 *	Attribute ZRMSPosSA related methods
 *	Description: Slow Acquisition: Z root mean square from histry samples sqrt(Xi^2-mean^2)/N^2.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ZRMSPosSA(Tango::Attribute &attr);
	virtual bool is_ZRMSPosSA_allowed(Tango::AttReqType type);
/**
 *	Attribute XPeakPosSA related methods
 *	Description: Slow Acquisition: X difference between max and min value from history
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_XPeakPosSA(Tango::Attribute &attr);
	virtual bool is_XPeakPosSA_allowed(Tango::AttReqType type);
/**
 *	Attribute ZPeakPosSA related methods
 *	Description: Slow Acquisition: Z difference between max and min value from history
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ZPeakPosSA(Tango::Attribute &attr);
	virtual bool is_ZPeakPosSA_allowed(Tango::AttReqType type);
/**
 *	Attribute SumMeanSA related methods
 *	Description: SA: mean of sum
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_SumMeanSA(Tango::Attribute &attr);
	virtual bool is_SumMeanSA_allowed(Tango::AttReqType type);
/**
 *	Attribute ADCEnabled related methods
 *	Description: ADC data source activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_ADCEnabled(Tango::Attribute &attr);
	virtual void write_ADCEnabled(Tango::WAttribute &attr);
	virtual bool is_ADCEnabled_allowed(Tango::AttReqType type);
/**
 *	Attribute ADCBufferSize related methods
 *	Description: The number of samples to be read on ADC data source.\nInfluences the size of the associated attributes [such as ADCChannelA for instance].
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_ADCBufferSize(Tango::Attribute &attr);
	virtual void write_ADCBufferSize(Tango::WAttribute &attr);
	virtual bool is_ADCBufferSize_allowed(Tango::AttReqType type);
/**
 *	Attribute PMOffset related methods
 *	Description: Offset relative to the post mortem event setting. 
 *               Set value is in turns, e.g. 1024 would mean that post mortem 
 *               acquisition is starting 1024 turns after the post mortem trigger 
 *               was received.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_PMOffset(Tango::Attribute &attr);
	virtual void write_PMOffset(Tango::WAttribute &attr);
	virtual bool is_PMOffset_allowed(Tango::AttReqType type);
/**
 *	Attribute PMNotified related methods
 *	Description: Post Moterm notification flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_PMNotified(Tango::Attribute &attr);
	virtual bool is_PMNotified_allowed(Tango::AttReqType type);
/**
 *	Attribute PMNotificationCounter related methods
 *	Description: Number a PM event recieved since last Init
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_PMNotificationCounter(Tango::Attribute &attr);
	virtual bool is_PMNotificationCounter_allowed(Tango::AttReqType type);
/**
 *	Attribute InterlockXNotified related methods
 *	Description: Sets to 1 if X position trip caused the Interlock event.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_InterlockXNotified(Tango::Attribute &attr);
	virtual bool is_InterlockXNotified_allowed(Tango::AttReqType type);
/**
 *	Attribute InterlockZNotified related methods
 *	Description: Sets to 1 if Yposition trip caused the Interlock event.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_InterlockZNotified(Tango::Attribute &attr);
	virtual bool is_InterlockZNotified_allowed(Tango::AttReqType type);
/**
 *	Attribute InterlockAttnNotified related methods
 *	Description: Sets to 1 if the attenuator's value is higher than gain 
 *               dependence threshold
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_InterlockAttnNotified(Tango::Attribute &attr);
	virtual bool is_InterlockAttnNotified_allowed(Tango::AttReqType type);
/**
 *	Attribute InterlockADCPreFilterNotified related methods
 *	Description: ADC overflow without filtering.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_InterlockADCPreFilterNotified(Tango::Attribute &attr);
	virtual bool is_InterlockADCPreFilterNotified_allowed(Tango::AttReqType type);
/**
 *	Attribute InterlockADCPostFilterNotified related methods
 *	Description: ADC overflow with filtering.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_InterlockADCPostFilterNotified(Tango::Attribute &attr);
	virtual bool is_InterlockADCPostFilterNotified_allowed(Tango::AttReqType type);
/**
 *	Attribute XLow related methods
 *	Description: Lower limit of the X position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_XLow(Tango::Attribute &attr);
	virtual void write_XLow(Tango::WAttribute &attr);
	virtual bool is_XLow_allowed(Tango::AttReqType type);
/**
 *	Attribute XHigh related methods
 *	Description: Upper limit of the X position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_XHigh(Tango::Attribute &attr);
	virtual void write_XHigh(Tango::WAttribute &attr);
	virtual bool is_XHigh_allowed(Tango::AttReqType type);
/**
 *	Attribute ZLow related methods
 *	Description: Lower limit of the Z position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ZLow(Tango::Attribute &attr);
	virtual void write_ZLow(Tango::WAttribute &attr);
	virtual bool is_ZLow_allowed(Tango::AttReqType type);
/**
 *	Attribute ZHigh related methods
 *	Description: Upper limit of the Z position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ZHigh(Tango::Attribute &attr);
	virtual void write_ZHigh(Tango::WAttribute &attr);
	virtual bool is_ZHigh_allowed(Tango::AttReqType type);
/**
 *	Attribute AutoSwitchingEnabled related methods
 *	Description: Enables / disables the switching mechanism.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_AutoSwitchingEnabled(Tango::Attribute &attr);
	virtual void write_AutoSwitchingEnabled(Tango::WAttribute &attr);
	virtual bool is_AutoSwitchingEnabled_allowed(Tango::AttReqType type);
/**
 *	Attribute Switches related methods
 *	Description: Switches selection. Must be in [0, 15] or 255 for auto-switching.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_Switches(Tango::Attribute &attr);
	virtual void write_Switches(Tango::WAttribute &attr);
	virtual bool is_Switches_allowed(Tango::AttReqType type);
/**
 *	Attribute ExternalSwitching related methods
 *	Description: Sets the source of switching clock ? MC (external) or from the 
 *               oscillator (internal). Default value is internal. 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_ExternalSwitching(Tango::Attribute &attr);
	virtual void write_ExternalSwitching(Tango::WAttribute &attr);
	virtual bool is_ExternalSwitching_allowed(Tango::AttReqType type);
/**
 *	Attribute SwitchingDelay related methods
 *	Description: Sets the delay of the switch position change relative to the 
 *               switching source clock.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_SwitchingDelay(Tango::Attribute &attr);
	virtual void write_SwitchingDelay(Tango::WAttribute &attr);
	virtual bool is_SwitchingDelay_allowed(Tango::AttReqType type);
/**
 *	Attribute OffsetTune related methods
 *	Description: Sets the offset tune value, 1 unit is approximately 40 Hz. 
 *               Default value is 0 (precisely tuned).
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_OffsetTune(Tango::Attribute &attr);
	virtual void write_OffsetTune(Tango::WAttribute &attr);
	virtual bool is_OffsetTune_allowed(Tango::AttReqType type);
/**
 *	Attribute CompensateTune related methods
 *	Description: To enable double offset-tune, issue the following command 
 *               (to disable it, just use ?false? instead of ?true?).
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_CompensateTune(Tango::Attribute &attr);
	virtual void write_CompensateTune(Tango::WAttribute &attr);
	virtual bool is_CompensateTune_allowed(Tango::AttReqType type);
/**
 *	Attribute DSCMode related methods
 *	Description: Sets the adjustment (learning) of the amplitude and 
 *               phase coefficients true or false. Set the 
 *               coefficients' type ? adjusted or unity. Combination of 
 *               these two nodes is necessary to achieve backward 
 *               compatiblity.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_DSCMode(Tango::Attribute &attr);
	virtual void write_DSCMode(Tango::WAttribute &attr);
	virtual bool is_DSCMode_allowed(Tango::AttReqType type);
/**
 *	Attribute AGCEnabled related methods
 *	Description: Enables/disables the Automatic Gain Control
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_AGCEnabled(Tango::Attribute &attr);
	virtual void write_AGCEnabled(Tango::WAttribute &attr);
	virtual bool is_AGCEnabled_allowed(Tango::AttReqType type);
/**
 *	Attribute Gain related methods
 *	Description: Sets the power_level. Attenuation at chosen level 
 *               depends on the gain scheme configuration. AGC 
 *               must be disabled to use manual Gain setting.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Gain(Tango::Attribute &attr);
	virtual void write_Gain(Tango::WAttribute &attr);
	virtual bool is_Gain_allowed(Tango::AttReqType type);
/**
 *	Attribute HasMAFSupport related methods
 *	Description: <true> if FGPA design with MAF support installed on Libera, <false> otherwise
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_HasMAFSupport(Tango::Attribute &attr);
	virtual bool is_HasMAFSupport_allowed(Tango::AttReqType type);
/**
 *	Attribute MachineTime related methods
 *	Description: Machine Time value to be applied on the Libera when the SetTimeOnNextTrigger command is executed
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_MachineTime(Tango::Attribute &attr);
	virtual void write_MachineTime(Tango::WAttribute &attr);
	virtual bool is_MachineTime_allowed(Tango::AttReqType type);
/**
 *	Attribute TimePhase related methods
 *	Description: The Machine Time Phase
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_TimePhase(Tango::Attribute &attr);
	virtual void write_TimePhase(Tango::WAttribute &attr);
	virtual bool is_TimePhase_allowed(Tango::AttReqType type);
/**
 *	Attribute SCPLLStatus related methods
 *	Description: The SC PLL lock status
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_SCPLLStatus(Tango::Attribute &attr);
	virtual bool is_SCPLLStatus_allowed(Tango::AttReqType type);
/**
 *	Attribute MCPLLStatus related methods
 *	Description: Indicates the MC PLL status (1=locked, 0=unlocked)
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_MCPLLStatus(Tango::Attribute &attr);
	virtual bool is_MCPLLStatus_allowed(Tango::AttReqType type);
/**
 *	Attribute Temp1 related methods
 *	Description: Temperature of the hottest component on the BPM 
 *               module is returned.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_Temp1(Tango::Attribute &attr);
	virtual bool is_Temp1_allowed(Tango::AttReqType type);
/**
 *	Attribute Temp2 related methods
 *	Description: Temperature of the hottest component on the chassis 
 *               interconnection board is returned.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_Temp2(Tango::Attribute &attr);
	virtual bool is_Temp2_allowed(Tango::AttReqType type);
/**
 *	Attribute Temp3 related methods
 *	Description: Temperature of the hottest component on the timing 
 *               module is returned.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_Temp3(Tango::Attribute &attr);
	virtual bool is_Temp3_allowed(Tango::AttReqType type);
/**
 *	Attribute Fan1Speed related methods
 *	Description: Provides minimal fan speed reading of all three fans on 
 *               the left side of the chassis in order to identify if the fan 
 *               module (consisting of 3 fans) is broken ? returned value 
 *               0 means that at least one fan has stopped.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_Fan1Speed(Tango::Attribute &attr);
	virtual bool is_Fan1Speed_allowed(Tango::AttReqType type);
/**
 *	Attribute Fan2Speed related methods
 *	Description: Provides minimal fan speed reading of all three fans on 
 *               the right side of the chassis in order to identify if the fan 
 *               module (consisting of 3 fans) is broken ? returned value 
 *               0 means that at least one fan has stopped.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_Fan2Speed(Tango::Attribute &attr);
	virtual bool is_Fan2Speed_allowed(Tango::AttReqType type);
/**
 *	Attribute Incoherence related methods
 *	Description: Result of the incoherence calculation. Am alarm will be set \non the attribute when an incoherence was detected.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Incoherence(Tango::Attribute &attr);
	virtual bool is_Incoherence_allowed(Tango::AttReqType type);
/**
 *	Attribute RefIncoherence related methods
 *	Description: The reference incoherence value registered with the command \nSetReferenceIncoherence. The reference is used to calculate the\nalarm with the MaxIncoherenceDrift.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_RefIncoherence(Tango::Attribute &attr);
	virtual bool is_RefIncoherence_allowed(Tango::AttReqType type);
/**
 *	Attribute MaxIncoherence related methods
 *	Description: Maximum incoherence value. Used to create an alarm on\nthe Incoherence attribute.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_MaxIncoherence(Tango::Attribute &attr);
	virtual void write_MaxIncoherence(Tango::WAttribute &attr);
	virtual bool is_MaxIncoherence_allowed(Tango::AttReqType type);
/**
 *	Attribute MaxIncoherenceDrift related methods
 *	Description: Maximum incoherence drift value. Used to create an alarm on\nthe Incoherence attribute.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_MaxIncoherenceDrift(Tango::Attribute &attr);
	virtual void write_MaxIncoherenceDrift(Tango::WAttribute &attr);
	virtual bool is_MaxIncoherenceDrift_allowed(Tango::AttReqType type);
/**
 *	Attribute UpTime related methods
 *	Description: Number of seconds since system boot on the host running this TANGO device
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_UpTime(Tango::Attribute &attr);
	virtual bool is_UpTime_allowed(Tango::AttReqType type);
/**
 *	Attribute CpuUsage related methods
 *	Description: CPU usage on the host running this TANGO device
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_CpuUsage(Tango::Attribute &attr);
	virtual bool is_CpuUsage_allowed(Tango::AttReqType type);
/**
 *	Attribute FreeMemory related methods
 *	Description: Amount of free memory on the host running this TANGO device
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_FreeMemory(Tango::Attribute &attr);
	virtual bool is_FreeMemory_allowed(Tango::AttReqType type);
/**
 *	Attribute RamFsUsage related methods
 *	Description: Amount of ram-fs allocated bytes on the host running this TANGO device 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_RamFsUsage(Tango::Attribute &attr);
	virtual bool is_RamFsUsage_allowed(Tango::AttReqType type);
/**
 *	Attribute UseLiberaSAData related methods
 *	Description: If set to true, the X & Z SA postions are retreived from the Libera FPGA.\nOtherwise, they are computed by the Tango device using the button values.\n 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_UseLiberaSAData(Tango::Attribute &attr);
	virtual void write_UseLiberaSAData(Tango::WAttribute &attr);
	virtual bool is_UseLiberaSAData_allowed(Tango::AttReqType type);
/**
 *	Attribute InterlockEnabled related methods
 *	Description: Enables / disables the Interlock detection.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_InterlockEnabled(Tango::Attribute &attr);
	virtual void write_InterlockEnabled(Tango::WAttribute &attr);
	virtual bool is_InterlockEnabled_allowed(Tango::AttReqType type);
/**
 *	Attribute InterlockGainDependentEnabled related methods
 *	Description: Enables / disables gain dependent mode of Interlock operation.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_InterlockGainDependentEnabled(Tango::Attribute &attr);
	virtual void write_InterlockGainDependentEnabled(Tango::WAttribute &attr);
	virtual bool is_InterlockGainDependentEnabled_allowed(Tango::AttReqType type);
/**
 *	Attribute InterlockOverflowThreshold related methods
 *	Description: ADC saturation threshold.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_InterlockOverflowThreshold(Tango::Attribute &attr);
	virtual void write_InterlockOverflowThreshold(Tango::WAttribute &attr);
	virtual bool is_InterlockOverflowThreshold_allowed(Tango::AttReqType type);
/**
 *	Attribute InterlockOverflowDuration related methods
 *	Description: Duration of allowed ADC saturation (in ADC samples).
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_InterlockOverflowDuration(Tango::Attribute &attr);
	virtual void write_InterlockOverflowDuration(Tango::WAttribute &attr);
	virtual bool is_InterlockOverflowDuration_allowed(Tango::AttReqType type);
/**
 *	Attribute InterlockGainDependentThreshold related methods
 *	Description: Sets the threshold for gain dependent mode of Interlock 
 *               operation.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_InterlockGainDependentThreshold(Tango::Attribute &attr);
	virtual void write_InterlockGainDependentThreshold(Tango::WAttribute &attr);
	virtual bool is_InterlockGainDependentThreshold_allowed(Tango::AttReqType type);
/**
 *	Attribute Kx related methods
 *	Description: Sets the Kx for X position calculation. Default setting is 10 mm 
 *               (=10000000 nm).
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Kx(Tango::Attribute &attr);
	virtual void write_Kx(Tango::WAttribute &attr);
	virtual bool is_Kx_allowed(Tango::AttReqType type);
/**
 *	Attribute Kz related methods
 *	Description: Sets the Kz for Y position calculation. Default setting is 10 mm 
 *               (=10000000 nm). 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Kz(Tango::Attribute &attr);
	virtual void write_Kz(Tango::WAttribute &attr);
	virtual bool is_Kz_allowed(Tango::AttReqType type);
/**
 *	Attribute XOffset related methods
 *	Description: Sets the offset for X position in nm. Default value is 0 nm.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_XOffset(Tango::Attribute &attr);
	virtual void write_XOffset(Tango::WAttribute &attr);
	virtual bool is_XOffset_allowed(Tango::AttReqType type);
/**
 *	Attribute ZOffset related methods
 *	Description: Sets the offset for Z position in nm. Default value is 0 nm.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_ZOffset(Tango::Attribute &attr);
	virtual void write_ZOffset(Tango::WAttribute &attr);
	virtual bool is_ZOffset_allowed(Tango::AttReqType type);
/**
 *	Attribute XPosDD related methods
 *	Description: Turn by turn data: X Pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_XPosDD(Tango::Attribute &attr);
	virtual bool is_XPosDD_allowed(Tango::AttReqType type);
/**
 *	Attribute ZPosDD related methods
 *	Description: Turn by turn data: Z Pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_ZPosDD(Tango::Attribute &attr);
	virtual bool is_ZPosDD_allowed(Tango::AttReqType type);
/**
 *	Attribute QuadDD related methods
 *	Description: Turn by turn data: Quad
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_QuadDD(Tango::Attribute &attr);
	virtual bool is_QuadDD_allowed(Tango::AttReqType type);
/**
 *	Attribute SumDD related methods
 *	Description: Turn by turn data: Sum
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_SumDD(Tango::Attribute &attr);
	virtual bool is_SumDD_allowed(Tango::AttReqType type);
/**
 *	Attribute VaDD related methods
 *	Description: Turn by turn data: Va
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_VaDD(Tango::Attribute &attr);
	virtual bool is_VaDD_allowed(Tango::AttReqType type);
/**
 *	Attribute VbDD related methods
 *	Description: Turn by turn data: Vb
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_VbDD(Tango::Attribute &attr);
	virtual bool is_VbDD_allowed(Tango::AttReqType type);
/**
 *	Attribute VcDD related methods
 *	Description: Turn by turn data: Vc
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_VcDD(Tango::Attribute &attr);
	virtual bool is_VcDD_allowed(Tango::AttReqType type);
/**
 *	Attribute VdDD related methods
 *	Description: Turn by turn data: Vd
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_VdDD(Tango::Attribute &attr);
	virtual bool is_VdDD_allowed(Tango::AttReqType type);
/**
 *	Attribute XPosSAHistory related methods
 *	Description: Slow Acquisition: X scrolling window of last NumSamples 
 *               (512) sa samples
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
	virtual void read_XPosSAHistory(Tango::Attribute &attr);
	virtual bool is_XPosSAHistory_allowed(Tango::AttReqType type);
/**
 *	Attribute ZPosSAHistory related methods
 *	Description: Slow Acquisition: Z scrolling window of last NumSamples 
 *               (512) sa samples
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
	virtual void read_ZPosSAHistory(Tango::Attribute &attr);
	virtual bool is_ZPosSAHistory_allowed(Tango::AttReqType type);
/**
 *	Attribute SumSAHistory related methods
 *	Description: Slow Acquisition: Sum scrolling window of last 
 *               NumSamples (512) sa samples
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
	virtual void read_SumSAHistory(Tango::Attribute &attr);
	virtual bool is_SumSAHistory_allowed(Tango::AttReqType type);
/**
 *	Attribute XPosPM related methods
 *	Description: Post Mortem : X pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
	virtual void read_XPosPM(Tango::Attribute &attr);
	virtual bool is_XPosPM_allowed(Tango::AttReqType type);
/**
 *	Attribute ZPosPM related methods
 *	Description: Post Mortem : Z pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
	virtual void read_ZPosPM(Tango::Attribute &attr);
	virtual bool is_ZPosPM_allowed(Tango::AttReqType type);
/**
 *	Attribute QuadPM related methods
 *	Description: Post Mortem : Quad
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
	virtual void read_QuadPM(Tango::Attribute &attr);
	virtual bool is_QuadPM_allowed(Tango::AttReqType type);
/**
 *	Attribute SumPM related methods
 *	Description: Post Mortem : Sum
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
	virtual void read_SumPM(Tango::Attribute &attr);
	virtual bool is_SumPM_allowed(Tango::AttReqType type);
/**
 *	Attribute VaPM related methods
 *	Description: Post Mortem : Va
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
	virtual void read_VaPM(Tango::Attribute &attr);
	virtual bool is_VaPM_allowed(Tango::AttReqType type);
/**
 *	Attribute VbPM related methods
 *	Description: Post Mortem : Vb
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
	virtual void read_VbPM(Tango::Attribute &attr);
	virtual bool is_VbPM_allowed(Tango::AttReqType type);
/**
 *	Attribute VcPM related methods
 *	Description: Post Mortem : Vc
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
	virtual void read_VcPM(Tango::Attribute &attr);
	virtual bool is_VcPM_allowed(Tango::AttReqType type);
/**
 *	Attribute VdPM related methods
 *	Description: Post Mortem : Vd
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
	virtual void read_VdPM(Tango::Attribute &attr);
	virtual bool is_VdPM_allowed(Tango::AttReqType type);
/**
 *	Attribute ADCChannelA related methods
 *	Description: ADC values for pickup A
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_ADCChannelA(Tango::Attribute &attr);
	virtual bool is_ADCChannelA_allowed(Tango::AttReqType type);
/**
 *	Attribute ADCChannelB related methods
 *	Description: ADC values for pickup B
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_ADCChannelB(Tango::Attribute &attr);
	virtual bool is_ADCChannelB_allowed(Tango::AttReqType type);
/**
 *	Attribute ADCChannelC related methods
 *	Description: ADC values for pickup C
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_ADCChannelC(Tango::Attribute &attr);
	virtual bool is_ADCChannelC_allowed(Tango::AttReqType type);
/**
 *	Attribute ADCChannelD related methods
 *	Description: ADC values for pickup D
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_ADCChannelD(Tango::Attribute &attr);
	virtual bool is_ADCChannelD_allowed(Tango::AttReqType type);
/**
 *	Attribute IaDD related methods
 *	Description: Turn by turn data: Ia
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_IaDD(Tango::Attribute &attr);
	virtual bool is_IaDD_allowed(Tango::AttReqType type);
/**
 *	Attribute IbDD related methods
 *	Description: Turn by turn data: Ib
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_IbDD(Tango::Attribute &attr);
	virtual bool is_IbDD_allowed(Tango::AttReqType type);
/**
 *	Attribute IcDD related methods
 *	Description: Turn by turn data: Ic
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_IcDD(Tango::Attribute &attr);
	virtual bool is_IcDD_allowed(Tango::AttReqType type);
/**
 *	Attribute IdDD related methods
 *	Description: Turn by turn data: Id
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_IdDD(Tango::Attribute &attr);
	virtual bool is_IdDD_allowed(Tango::AttReqType type);
/**
 *	Attribute QaDD related methods
 *	Description: Turn by turn data: Qa
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_QaDD(Tango::Attribute &attr);
	virtual bool is_QaDD_allowed(Tango::AttReqType type);
/**
 *	Attribute QbDD related methods
 *	Description: Turn by turn data: Qb
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_QbDD(Tango::Attribute &attr);
	virtual bool is_QbDD_allowed(Tango::AttReqType type);
/**
 *	Attribute QcDD related methods
 *	Description: Turn by turn data: Qc
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_QcDD(Tango::Attribute &attr);
	virtual bool is_QcDD_allowed(Tango::AttReqType type);
/**
 *	Attribute QdDD related methods
 *	Description: Turn by turn data: Qd
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
	virtual void read_QdDD(Tango::Attribute &attr);
	virtual bool is_QdDD_allowed(Tango::AttReqType type);
/**
 *	Attribute UserData related methods
 *	Description: User defined data
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 256
 */
	virtual void read_UserData(Tango::Attribute &attr);
	virtual bool is_UserData_allowed(Tango::AttReqType type);
/**
 *	Attribute logs related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 2048
 */
	virtual void read_logs(Tango::Attribute &attr);
	virtual bool is_logs_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : LiberaBrilliancePlus::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();



//	Command related methods
public:
	/**
	 *	Command State related method
	 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
	 *
	 *	@returns State Code
	 */
	virtual Tango::DevState dev_state();
	/**
	 *	Command Status related method
	 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
	 *
	 *	@returns Status description
	 */
	virtual Tango::ConstDevString dev_status();
	/**
	 *	Command GetParameters related method
	 *	Description: Retruns the current gains and offsets (i.e. the parameters used for position computation)
	 *
	 *	@returns The BPM gain and offsets
	 */
	virtual Tango::DevVarDoubleStringArray *get_parameters();
	virtual bool is_GetParameters_allowed(const CORBA::Any &any);
	/**
	 *	Command UnfreezeDDBuffer related method
	 *	Description: Unfreezes the DD buffer
	 *
	 */
	virtual void unfreeze_ddbuffer();
	virtual bool is_UnfreezeDDBuffer_allowed(const CORBA::Any &any);
	/**
	 *	Command EnableDDBufferFreezing related method
	 *	Description: Enables the DD buffer freezing mechanism
	 *
	 */
	virtual void enable_ddbuffer_freezing();
	virtual bool is_EnableDDBufferFreezing_allowed(const CORBA::Any &any);
	/**
	 *	Command DisableDDBufferFreezing related method
	 *	Description: Disables the DD buffer freezing mechanism
	 *
	 */
	virtual void disable_ddbuffer_freezing();
	virtual bool is_DisableDDBufferFreezing_allowed(const CORBA::Any &any);
	/**
	 *	Command EnableDD related method
	 *	Description: Enables the so called "data on demand" (i.e. first turns) data source
	 *
	 */
	virtual void enable_dd();
	virtual bool is_EnableDD_allowed(const CORBA::Any &any);
	/**
	 *	Command DisableDD related method
	 *	Description: Disables the so called "data on demand" (i.e. first turns) data source
	 *
	 */
	virtual void disable_dd();
	virtual bool is_DisableDD_allowed(const CORBA::Any &any);
	/**
	 *	Command EnableSA related method
	 *	Description: Enables the so called "slow acquisition" data source
	 *
	 */
	virtual void enable_sa();
	virtual bool is_EnableSA_allowed(const CORBA::Any &any);
	/**
	 *	Command DisableSA related method
	 *	Description: Disables the so called "slow acquisition" data source
	 *
	 */
	virtual void disable_sa();
	virtual bool is_DisableSA_allowed(const CORBA::Any &any);
	/**
	 *	Command ResetPMNotification related method
	 *	Description: 
	 *
	 */
	virtual void reset_pmnotification();
	virtual bool is_ResetPMNotification_allowed(const CORBA::Any &any);
	/**
	 *	Command ResetInterlockNotification related method
	 *	Description: Resets the interlock notification flags to false
	 *
	 */
	virtual void reset_interlock_notification();
	virtual bool is_ResetInterlockNotification_allowed(const CORBA::Any &any);
	/**
	 *	Command SetInterlockConfiguration related method
	 *	Description: Change interlock configuration using the InterlockConfiguration class (or device) property.
	 *               Only  modify  the interlock configuration, the remaining env. parameters remain unchanged.
	 *
	 */
	virtual void set_interlock_configuration();
	virtual bool is_SetInterlockConfiguration_allowed(const CORBA::Any &any);
	/**
	 *	Command EnableADC related method
	 *	Description: Enables the so called ADC data source
	 *
	 */
	virtual void enable_adc();
	virtual bool is_EnableADC_allowed(const CORBA::Any &any);
	/**
	 *	Command DisableADC related method
	 *	Description: Disables the so called ADC data source
	 *
	 */
	virtual void disable_adc();
	virtual bool is_DisableADC_allowed(const CORBA::Any &any);
	/**
	 *	Command SetTimeOnNextTrigger related method
	 *	Description: Applies both machine et system time values on next trigger
	 *
	 */
	virtual void set_time_on_next_trigger();
	virtual bool is_SetTimeOnNextTrigger_allowed(const CORBA::Any &any);
	/**
	 *	Command ReadFAData related method
	 *	Description: Statring from[offest] in FA data block, reads [size of elems] * [num of elems] bytes.
	 *
	 *	@param argin The reading parameters: [0]:offset in FA data block, [1]:size of elems, [2]:num of elems
	 *	@returns The data [as an array of bytes]
	 */
	virtual Tango::DevVarLongArray *read_fadata(const Tango::DevVarLongArray *argin);
	virtual bool is_ReadFAData_allowed(const CORBA::Any &any);
	/**
	 *	Command WriteFAData related method
	 *	Description: Starting from [offset] in Fa data block, writes [size of elems * num of elems].
	 *               The actual data to be written starts at index [4] in the input array.
	 *
	 *	@param argin The writting parameters: [0]:offset in FA data block, bytes[1]:size of elems, [2]:num of elems, [3, ...]: actual to data to be written
	 */
	virtual void write_fadata(const Tango::DevVarLongArray *argin);
	virtual bool is_WriteFAData_allowed(const CORBA::Any &any);
	/**
	 *	Command SaveDSCParameters related method
	 *	Description: Saves the current DSC parameters
	 *
	 */
	virtual void save_dscparameters();
	virtual bool is_SaveDSCParameters_allowed(const CORBA::Any &any);
	/**
	 *	Command ReloadSystemProperties related method
	 *	Description: 
	 *
	 */
	virtual void reload_system_properties();
	virtual bool is_ReloadSystemProperties_allowed(const CORBA::Any &any);
	/**
	 *	Command SetRefIncoherence related method
	 *	Description: Set the actual incoherence value as refeference value for the drift alarm calculation.
	 *
	 */
	virtual void set_ref_incoherence();
	virtual bool is_SetRefIncoherence_allowed(const CORBA::Any &any);
	/**
	 *	Command MagicCommand related method
	 *	Description: Directly dump the Libera ireg node structure. If the input argument is a sub tree all subnodes will be dumped out.
	 *
	 *	@param argin absolute path of the node name
	 *	@returns value of specified node(s)
	 */
	virtual Tango::DevVarStringArray *magic_command(Tango::DevString argin);
	virtual bool is_MagicCommand_allowed(const CORBA::Any &any);


/*----- PROTECTED REGION ID(LiberaBrilliancePlus::Additional Method prototypes) ENABLED START -----*/

	//	Additional Method prototypes
	void UpdatePM();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::Additional Method prototypes
};

/*----- PROTECTED REGION ID(LiberaBrilliancePlus::Additional Classes Definitions) ENABLED START -----*/

	//	Additional Classes definitions

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::Additional Classes Definitions

}	//	End of namespace

#endif   //	LiberaBrilliancePlus_H
