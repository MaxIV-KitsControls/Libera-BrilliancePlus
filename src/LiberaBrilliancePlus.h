/*----- PROTECTED REGION ID(LiberaBrilliancePlus.h) ENABLED START -----*/
//=============================================================================
//
// file :        LiberaBrilliancePlus.h
//
// description : Include file for the LiberaBrilliancePlus class
//
// project :     Libera BPM Device Server
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LiberaBrilliancePlus_H
#define LiberaBrilliancePlus_H

#include <tango.h>

class LiberaClient;
class LiberaSignal;

/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus.h

/**
 *  LiberaBrilliancePlus class description:
 *    IT Libera BPM Device Server.
 *    The interface should be the same as for the Brillance model.
 */

namespace LiberaBrilliancePlus_ns
{
/*----- PROTECTED REGION ID(LiberaBrilliancePlus::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::Additional Class Declarations

class LiberaBrilliancePlus : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(LiberaBrilliancePlus::Data Members) ENABLED START -----*/

	//		Add your own data members
    LiberaClient *m_libera;
    bool initFlag;
    void init_settings();
    Tango::DevState m_state;
    std::string m_status;

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::Data Members

//	Device property data members
public:
	//	LiberaIpAddr:	The Libera IP address [no default value]
	string	liberaIpAddr;
	//	Location:	The BPM location [TL1, BOOSTER, TL2 or STORAGE_RING]. No default value.
	string	location;
	//	Institute:	0: TANGO_INSTITUTE (GENERIC)
	//  1: ALBA
	//  2: ESRF
	//  3: ELETTRA
	//  4: SOLEIL
	Tango::DevShort	institute;
	//	MCDecoderSwitch:	MC-Config property - MC decoder switch: Enumeration (off,on,debug)
	Tango::DevShort	mCDecoderSwitch;
	//	MCSource:	Trigger line source selection - (Off,External,Internal,Pulse,LXI,RTC)
	Tango::DevShort	mCSource;
	//	T0Direction:	t0 port direction -  (Input,Output)
	Tango::DevShort	t0Direction;
	//	T0OutType:	t0 port type -  (Off,Trigger,T3,SFP)
	Tango::DevShort	t0OutType;
	//	T0State:	state of active signal: high (logical 1) or low (logical 0)
	Tango::DevShort	t0State;
	//	T1Source:	Enumeration Value (Off,External,Internal,Pulse,LXI,RTC)
	Tango::DevShort	t1Source;
	//	T2Source:	Enumeration Value (Off,External,Internal,Pulse,LXI,RTC)
	Tango::DevShort	t2Source;
	//	MgtOut:	Enumeration Value (off,sfp_in,debug,connectors)
	Tango::DevShort	mgtOut;
	//	MCinMask:	MC Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
	Tango::DevLong	mCinMask;
	//	MCinFunction:	MC Function array (in_function) contains 16-bit entries that define the value of masked bits.
	Tango::DevLong	mCinFunction;
	//	T0inMask:	T0 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
	Tango::DevLong	t0inMask;
	//	T1inMask:	T1 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
	Tango::DevLong	t1inMask;
	//	T2inMask:	T2 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
	Tango::DevLong	t2inMask;
	//	T0idOut:	T0 Function array (in_function) contains 16-bit entries that define the value of masked bits.
	Tango::DevLong	t0idOut;
	//	T1inFunction:	T1 Function array (in_function) contains 16-bit entries that define the value of masked bits.
	Tango::DevLong	t1inFunction;
	//	T2inFunction:	T2 Function array (in_function) contains 16-bit entries that define the value of masked bits.
	Tango::DevLong	t2inFunction;
	//	T0Duration:	Duration of signal active pulse
	Tango::DevLong	t0Duration;
	//	T0Delay:	Delay before transmission starts, set in cycles at fSFP
	Tango::DevLong	t0Delay;
	//	InterlockID:	oversaturation or X-Y orbit threshold
	Tango::DevLong	interlockID;
	//	T1EdgeFalling:	T1 Edge Falling
	Tango::DevBoolean	t1EdgeFalling;
	//	T2EdgeFalling:	T2 Edge Falling
	Tango::DevBoolean	t2EdgeFalling;
	//	T1EdgeRising:	T2 Edge Falling
	Tango::DevBoolean	t1EdgeRising;
	//	T2EdgeRising:	T2 Edge Falling
	Tango::DevBoolean	t2EdgeRising;
	//	T1Direction:	t1 port direction -  (Input,Output)
	Tango::DevShort	t1Direction;
	//	T2Direction:	t2 port direction -  (Input,Output)
	Tango::DevShort	t2Direction;
	//	T1ID:	T1 Optical event ID
	Tango::DevLong	t1ID;
	//	T2ID:	T2 Optical event ID
	Tango::DevLong	t2ID;
	//	ErrorTrace:	Trace Error functionality for the Libera, by default is Disabled:
	//   * Value: OutPut ,  TraceLevel
	//  	* Output[0] :  OutPut on Screen = 0
	//  	                         OutPut on File = 0 (﻿/var/tmp/ds.log/LiberaMciTrace.log)
	//  	* TraceLevel[1] : ﻿   Off     = 0,
	//          		      Low     = 1,
	//  		      Med     = 2,
	//  		      High    = 3,
	//  		      Detail  = 4
	vector<Tango::DevShort>	errorTrace;

//	Attribute data members
public:
	Tango::DevUShort	*attr_LiberaModel_read;
	Tango::DevLong	*attr_DDTriggerCounter_read;
	Tango::DevLong	*attr_OffsetTune_read;
	Tango::DevBoolean	*attr_CompensateTune_read;
	Tango::DevBoolean	*attr_MCPLLStatus_read;
	Tango::DevShort	*attr_Temperature_read;
	Tango::DevLong	*attr_T0Delay_read;
	Tango::DevShort	*attr_RtcDecoderSwitch_read;
	Tango::DevShort	*attr_McSource_read;
	Tango::DevShort	*attr_T0Direction_read;
	Tango::DevShort	*attr_T0OutputType_read;
	Tango::DevShort	*attr_T0State_read;
	Tango::DevShort	*attr_T1Source_read;
	Tango::DevShort	*attr_T2Source_read;
	Tango::DevShort	*attr_MgtOut_read;
	Tango::DevLong	*attr_T0inMask_read;
	Tango::DevLong	*attr_T1inMask_read;
	Tango::DevLong	*attr_T2inMask_read;
	Tango::DevLong	*attr_T0idOut_read;
	Tango::DevLong	*attr_T1inFunction_read;
	Tango::DevLong	*attr_T2inFunction_read;
	Tango::DevLong	*attr_MCinMask_read;
	Tango::DevLong	*attr_MCinFunction_read;
	Tango::DevLong	*attr_T0Duration_read;
	Tango::DevLong	*attr_InterlockID_read;
	Tango::DevBoolean	*attr_T2EdgeFalling_read;
	Tango::DevBoolean	*attr_T2EdgeRising_read;
	Tango::DevBoolean	*attr_T1EdgeFalling_read;
	Tango::DevBoolean	*attr_T1EdgeRising_read;
	Tango::DevLong	*attr_T2ID_read;
	Tango::DevLong	*attr_T1ID_read;
	Tango::DevShort	*attr_T1Direction_read;
	Tango::DevShort	*attr_T2Direction_read;
	Tango::DevLong	*attr_SynchronizeLMT_read;
	Tango::DevLong	*attr_RTCTimestamp_read;
	Tango::DevLong	*attr_RTCTimestampState_read;
	Tango::DevString	*attr_logs_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LiberaBrilliancePlus(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LiberaBrilliancePlus(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	LiberaBrilliancePlus(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */	
	~LiberaBrilliancePlus() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : LiberaBrilliancePlus::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : LiberaBrilliancePlus::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute LiberaModel related methods
 *	Description: The Libera Model: 0:Electron, 1:Brillance, 2:Photon
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_LiberaModel(Tango::Attribute &attr);
	virtual bool is_LiberaModel_allowed(Tango::AttReqType type);
/**
 *	Attribute DDTriggerCounter related methods
 *	Description: Number of trigger notifications received since last device <init> 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_DDTriggerCounter(Tango::Attribute &attr);
	virtual bool is_DDTriggerCounter_allowed(Tango::AttReqType type);
/**
 *	Attribute OffsetTune related methods
 *	Description: Sets the offset tune value, 1 unit is approximately 40 Hz. 
 *               Default value is 0 (precisely tuned).
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_OffsetTune(Tango::Attribute &attr);
	virtual void write_OffsetTune(Tango::WAttribute &attr);
	virtual bool is_OffsetTune_allowed(Tango::AttReqType type);
/**
 *	Attribute CompensateTune related methods
 *	Description: To enable double offset-tune, issue the following command 
 *               (to disable it, just use false instead of true).
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_CompensateTune(Tango::Attribute &attr);
	virtual void write_CompensateTune(Tango::WAttribute &attr);
	virtual bool is_CompensateTune_allowed(Tango::AttReqType type);
/**
 *	Attribute MCPLLStatus related methods
 *	Description: Indicates the MC PLL status (1=locked, 0=unlocked)
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_MCPLLStatus(Tango::Attribute &attr);
	virtual bool is_MCPLLStatus_allowed(Tango::AttReqType type);
/**
 *	Attribute Temperature related methods
 *	Description: Temperature of the hottest component on the timing 
 *               module is returned.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_Temperature(Tango::Attribute &attr);
	virtual bool is_Temperature_allowed(Tango::AttReqType type);
/**
 *	Attribute T0Delay related methods
 *	Description: Delay before transmission starts, set in cycles at fSFP
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_T0Delay(Tango::Attribute &attr);
	virtual void write_T0Delay(Tango::WAttribute &attr);
	virtual bool is_T0Delay_allowed(Tango::AttReqType type);
/**
 *	Attribute RtcDecoderSwitch related methods
 *	Description: RTC decoding switch of optical stream
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_RtcDecoderSwitch(Tango::Attribute &attr);
	virtual void write_RtcDecoderSwitch(Tango::WAttribute &attr);
	virtual bool is_RtcDecoderSwitch_allowed(Tango::AttReqType type);
/**
 *	Attribute McSource related methods
 *	Description: Trigger line source selection
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_McSource(Tango::Attribute &attr);
	virtual void write_McSource(Tango::WAttribute &attr);
	virtual bool is_McSource_allowed(Tango::AttReqType type);
/**
 *	Attribute T0Direction related methods
 *	Description: t0 port direction
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_T0Direction(Tango::Attribute &attr);
	virtual void write_T0Direction(Tango::WAttribute &attr);
	virtual bool is_T0Direction_allowed(Tango::AttReqType type);
/**
 *	Attribute T0OutputType related methods
 *	Description: t0 output type
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_T0OutputType(Tango::Attribute &attr);
	virtual void write_T0OutputType(Tango::WAttribute &attr);
	virtual bool is_T0OutputType_allowed(Tango::AttReqType type);
/**
 *	Attribute T0State related methods
 *	Description: state of active signal: high (logical 1) or low (logical 0)
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_T0State(Tango::Attribute &attr);
	virtual void write_T0State(Tango::WAttribute &attr);
	virtual bool is_T0State_allowed(Tango::AttReqType type);
/**
 *	Attribute T1Source related methods
 *	Description: Trigger line source selection
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_T1Source(Tango::Attribute &attr);
	virtual void write_T1Source(Tango::WAttribute &attr);
	virtual bool is_T1Source_allowed(Tango::AttReqType type);
/**
 *	Attribute T2Source related methods
 *	Description: Trigger line source selection
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_T2Source(Tango::Attribute &attr);
	virtual void write_T2Source(Tango::WAttribute &attr);
	virtual bool is_T2Source_allowed(Tango::AttReqType type);
/**
 *	Attribute MgtOut related methods
 *	Description: MGT OUT selection off,sfp_in,debug,connectors
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_MgtOut(Tango::Attribute &attr);
	virtual void write_MgtOut(Tango::WAttribute &attr);
	virtual bool is_MgtOut_allowed(Tango::AttReqType type);
/**
 *	Attribute T0inMask related methods
 *	Description: T0 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_T0inMask(Tango::Attribute &attr);
	virtual void write_T0inMask(Tango::WAttribute &attr);
	virtual bool is_T0inMask_allowed(Tango::AttReqType type);
/**
 *	Attribute T1inMask related methods
 *	Description: T1 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_T1inMask(Tango::Attribute &attr);
	virtual void write_T1inMask(Tango::WAttribute &attr);
	virtual bool is_T1inMask_allowed(Tango::AttReqType type);
/**
 *	Attribute T2inMask related methods
 *	Description: T2 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_T2inMask(Tango::Attribute &attr);
	virtual void write_T2inMask(Tango::WAttribute &attr);
	virtual bool is_T2inMask_allowed(Tango::AttReqType type);
/**
 *	Attribute T0idOut related methods
 *	Description: T0 Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_T0idOut(Tango::Attribute &attr);
	virtual void write_T0idOut(Tango::WAttribute &attr);
	virtual bool is_T0idOut_allowed(Tango::AttReqType type);
/**
 *	Attribute T1inFunction related methods
 *	Description: T1 Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_T1inFunction(Tango::Attribute &attr);
	virtual void write_T1inFunction(Tango::WAttribute &attr);
	virtual bool is_T1inFunction_allowed(Tango::AttReqType type);
/**
 *	Attribute T2inFunction related methods
 *	Description: T2 Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_T2inFunction(Tango::Attribute &attr);
	virtual void write_T2inFunction(Tango::WAttribute &attr);
	virtual bool is_T2inFunction_allowed(Tango::AttReqType type);
/**
 *	Attribute MCinMask related methods
 *	Description: MC Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_MCinMask(Tango::Attribute &attr);
	virtual void write_MCinMask(Tango::WAttribute &attr);
	virtual bool is_MCinMask_allowed(Tango::AttReqType type);
/**
 *	Attribute MCinFunction related methods
 *	Description: MC Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_MCinFunction(Tango::Attribute &attr);
	virtual void write_MCinFunction(Tango::WAttribute &attr);
	virtual bool is_MCinFunction_allowed(Tango::AttReqType type);
/**
 *	Attribute T0Duration related methods
 *	Description: Duration of signal active pulse
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_T0Duration(Tango::Attribute &attr);
	virtual void write_T0Duration(Tango::WAttribute &attr);
	virtual bool is_T0Duration_allowed(Tango::AttReqType type);
/**
 *	Attribute InterlockID related methods
 *	Description: Oversaturation or X-Y orbit threshold
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_InterlockID(Tango::Attribute &attr);
	virtual void write_InterlockID(Tango::WAttribute &attr);
	virtual bool is_InterlockID_allowed(Tango::AttReqType type);
/**
 *	Attribute T2EdgeFalling related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_T2EdgeFalling(Tango::Attribute &attr);
	virtual void write_T2EdgeFalling(Tango::WAttribute &attr);
	virtual bool is_T2EdgeFalling_allowed(Tango::AttReqType type);
/**
 *	Attribute T2EdgeRising related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_T2EdgeRising(Tango::Attribute &attr);
	virtual void write_T2EdgeRising(Tango::WAttribute &attr);
	virtual bool is_T2EdgeRising_allowed(Tango::AttReqType type);
/**
 *	Attribute T1EdgeFalling related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_T1EdgeFalling(Tango::Attribute &attr);
	virtual void write_T1EdgeFalling(Tango::WAttribute &attr);
	virtual bool is_T1EdgeFalling_allowed(Tango::AttReqType type);
/**
 *	Attribute T1EdgeRising related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_T1EdgeRising(Tango::Attribute &attr);
	virtual void write_T1EdgeRising(Tango::WAttribute &attr);
	virtual bool is_T1EdgeRising_allowed(Tango::AttReqType type);
/**
 *	Attribute T2ID related methods
 *	Description: T2 Optical event ID
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_T2ID(Tango::Attribute &attr);
	virtual void write_T2ID(Tango::WAttribute &attr);
	virtual bool is_T2ID_allowed(Tango::AttReqType type);
/**
 *	Attribute T1ID related methods
 *	Description: T1 Optical event ID
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_T1ID(Tango::Attribute &attr);
	virtual void write_T1ID(Tango::WAttribute &attr);
	virtual bool is_T1ID_allowed(Tango::AttReqType type);
/**
 *	Attribute T1Direction related methods
 *	Description: t2 port direction
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_T1Direction(Tango::Attribute &attr);
	virtual void write_T1Direction(Tango::WAttribute &attr);
	virtual bool is_T1Direction_allowed(Tango::AttReqType type);
/**
 *	Attribute T2Direction related methods
 *	Description: t2 port direction
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_T2Direction(Tango::Attribute &attr);
	virtual void write_T2Direction(Tango::WAttribute &attr);
	virtual bool is_T2Direction_allowed(Tango::AttReqType type);
/**
 *	Attribute SynchronizeLMT related methods
 *	Description: The absolute time synchronization is done for all processor modules simultaneously.  [0, 18446744073709551614]
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_SynchronizeLMT(Tango::Attribute &attr);
	virtual void write_SynchronizeLMT(Tango::WAttribute &attr);
	virtual bool is_SynchronizeLMT_allowed(Tango::AttReqType type);
/**
 *	Attribute RTCTimestamp related methods
 *	Description: Timestamp which is be taken by receiving optical events over SFP when reception is enabled
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_RTCTimestamp(Tango::Attribute &attr);
	virtual bool is_RTCTimestamp_allowed(Tango::AttReqType type);
/**
 *	Attribute RTCTimestampState related methods
 *	Description: State of the timestamp which is be taken by receiving optical events over SFP when reception is enabled
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_RTCTimestampState(Tango::Attribute &attr);
	virtual bool is_RTCTimestampState_allowed(Tango::AttReqType type);
/**
 *	Attribute logs related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 2048
 */
	virtual void read_logs(Tango::Attribute &attr);
	virtual bool is_logs_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : LiberaBrilliancePlus::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();



//	Command related methods
public:
	/**
	 *	Command State related method
	 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
	 *
	 *	@returns State Code
	 */
	virtual Tango::DevState dev_state();
	/**
	 *	Command Status related method
	 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
	 *
	 *	@returns Status description
	 */
	virtual Tango::ConstDevString dev_status();
	/**
	 *	Command MagicCommand related method
	 *	Description: Directly dump the Libera ireg node structure. If the input argument is a sub tree all subnodes will be dumped out.
	 *
	 *	@param argin absolute path of the node name
	 *	@returns value of specified node(s)
	 */
	virtual Tango::DevVarStringArray *magic_command(Tango::DevString argin);
	virtual bool is_MagicCommand_allowed(const CORBA::Any &any);
	/**
	 *	Command ForceInitSettings related method
	 *	Description: Initializing Libera Default Settings (Based to the properties) without performing init_device
	 *
	 */
	virtual void force_init_settings();
	virtual bool is_ForceInitSettings_allowed(const CORBA::Any &any);
	/**
	 *	Command SetTraceLevel related method
	 *	Description: Sets the Trace Error Level:  	Off     = 0,
	 *                       		Low     = 1,
	 *               		Med     = 2,
	 *               		High    = 3,
	 *               		Detail  = 4
	 *
	 *	@param argin 
	 */
	virtual void set_trace_level(Tango::DevUShort argin);
	virtual bool is_SetTraceLevel_allowed(const CORBA::Any &any);
	/**
	 *	Command FinalizeSynchronization related method
	 *	Description: Finalize synchronization procedure:
	 *               * Recover T2 Trigger in the initial setting (T2inFunction property)
	 *
	 */
	virtual void finalize_synchronization();
	virtual bool is_FinalizeSynchronization_allowed(const CORBA::Any &any);
	/**
	 *	Command AnnounceSynchronization related method
	 *	Description: Announce synchronization procedure:
	 *               * Stop the Trigger (t2source=off)
	 *               *  MC PLL (MUST be locked)
	 *               * Synchronization State Machine (MUST be Tracking)
	 *
	 */
	virtual void announce_synchronization();
	virtual bool is_AnnounceSynchronization_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : LiberaBrilliancePlus::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(LiberaBrilliancePlus::Additional Method prototypes) ENABLED START -----*/

	//	Additional Method prototypes
 
  void set_lib_error(std::string nodeinfo);

/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::Additional Method prototypes
};

/*----- PROTECTED REGION ID(LiberaBrilliancePlus::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::Additional Classes Definitions

}	//	End of namespace

#endif   //	LiberaBrilliancePlus_H
