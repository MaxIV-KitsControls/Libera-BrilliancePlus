/*----- PROTECTED REGION ID(LiberaBrilliancePlus.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LiberaBrilliancePlus.cpp
//
// description : C++ source for the LiberaBrilliancePlus class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LiberaBrilliancePlus are implemented in this file.
//
// project :     Libera BPM Device Server
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <LiberaBrilliancePlus.h>
#include <LiberaBrilliancePlusClass.h>

#include "LiberaClient.h"
/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus.cpp

/**
 *  LiberaBrilliancePlus class description:
 *    IT Libera BPM Device Server.
 *    The interface should be the same as for the Brillance model.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name                |  Method name
//================================================================
//  State                       |  dev_state
//  Status                      |  dev_status
//  GetParameters               |  get_parameters
//  UnfreezeDDBuffer            |  unfreeze_ddbuffer
//  EnableDDBufferFreezing      |  enable_ddbuffer_freezing
//  DisableDDBufferFreezing     |  disable_ddbuffer_freezing
//  EnableDD                    |  enable_dd
//  DisableDD                   |  disable_dd
//  EnableSA                    |  enable_sa
//  DisableSA                   |  disable_sa
//  ResetPMNotification         |  reset_pmnotification
//  ResetInterlockNotification  |  reset_interlock_notification
//  SetInterlockConfiguration   |  set_interlock_configuration
//  EnableADC                   |  enable_adc
//  DisableADC                  |  disable_adc
//  SetTimeOnNextTrigger        |  set_time_on_next_trigger
//  ReadFAData                  |  read_fadata
//  WriteFAData                 |  write_fadata
//  SaveDSCParameters           |  save_dscparameters
//  ReloadSystemProperties      |  reload_system_properties
//  SetRefIncoherence           |  set_ref_incoherence
//  MagicCommand                |  magic_command
//  EnableSP                    |  enable_sp
//  DisableSP                   |  disable_sp
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  LiberaModel                      |  Tango::DevUShort	Scalar
//  DDEnabled                        |  Tango::DevBoolean	Scalar
//  DDBufferSize                     |  Tango::DevLong	Scalar
//  DDDecimationFactor               |  Tango::DevUShort	Scalar
//  DDTriggerOffset                  |  Tango::DevLong	Scalar
//  DDBufferFreezingEnabled          |  Tango::DevBoolean	Scalar
//  DDBufferFrozen                   |  Tango::DevBoolean	Scalar
//  DDTriggerCounter                 |  Tango::DevLong	Scalar
//  ExternalTriggerEnabled           |  Tango::DevBoolean	Scalar
//  ExternalTriggerDelay             |  Tango::DevLong	Scalar
//  SAEnabled                        |  Tango::DevBoolean	Scalar
//  VaSA                             |  Tango::DevDouble	Scalar
//  VbSA                             |  Tango::DevDouble	Scalar
//  VcSA                             |  Tango::DevDouble	Scalar
//  VdSA                             |  Tango::DevDouble	Scalar
//  XPosSA                           |  Tango::DevDouble	Scalar
//  YPosSA                           |  Tango::DevDouble	Scalar
//  SumSA                            |  Tango::DevDouble	Scalar
//  QuadSA                           |  Tango::DevDouble	Scalar
//  CxSA                             |  Tango::DevLong	Scalar
//  CySA                             |  Tango::DevLong	Scalar
//  SAStatNumSamples                 |  Tango::DevLong	Scalar
//  XMeanPosSA                       |  Tango::DevDouble	Scalar
//  YMeanPosSA                       |  Tango::DevDouble	Scalar
//  XRMSPosSA                        |  Tango::DevDouble	Scalar
//  YRMSPosSA                        |  Tango::DevDouble	Scalar
//  XPeakPosSA                       |  Tango::DevDouble	Scalar
//  YPeakPosSA                       |  Tango::DevDouble	Scalar
//  SumMeanSA                        |  Tango::DevDouble	Scalar
//  ADCEnabled                       |  Tango::DevBoolean	Scalar
//  ADCBufferSize                    |  Tango::DevLong	Scalar
//  PMOffset                         |  Tango::DevLong	Scalar
//  PMNotified                       |  Tango::DevBoolean	Scalar
//  PMNotificationCounter            |  Tango::DevShort	Scalar
//  InterlockXNotified               |  Tango::DevBoolean	Scalar
//  InterlockYNotified               |  Tango::DevBoolean	Scalar
//  InterlockAttnNotified            |  Tango::DevBoolean	Scalar
//  InterlockADCPreFilterNotified    |  Tango::DevBoolean	Scalar
//  InterlockADCPostFilterNotified   |  Tango::DevBoolean	Scalar
//  XLow                             |  Tango::DevDouble	Scalar
//  XHigh                            |  Tango::DevDouble	Scalar
//  YLow                             |  Tango::DevDouble	Scalar
//  YHigh                            |  Tango::DevDouble	Scalar
//  AutoSwitchingEnabled             |  Tango::DevBoolean	Scalar
//  Switches                         |  Tango::DevShort	Scalar
//  ExternalSwitching                |  Tango::DevBoolean	Scalar
//  SwitchingDelay                   |  Tango::DevLong	Scalar
//  OffsetTune                       |  Tango::DevLong	Scalar
//  CompensateTune                   |  Tango::DevBoolean	Scalar
//  DSCMode                          |  Tango::DevShort	Scalar
//  AGCEnabled                       |  Tango::DevBoolean	Scalar
//  Gain                             |  Tango::DevDouble	Scalar
//  HasMAFSupport                    |  Tango::DevBoolean	Scalar
//  MAFLength                        |  Tango::DevLong	Scalar
//  MAFDelay                         |  Tango::DevLong	Scalar
//  MachineTime                      |  Tango::DevDouble	Scalar
//  TimePhase                        |  Tango::DevLong	Scalar
//  SystemTime                       |  Tango::DevDouble	Scalar
//  SCPLLStatus                      |  Tango::DevBoolean	Scalar
//  MCPLLStatus                      |  Tango::DevBoolean	Scalar
//  Temp1                            |  Tango::DevShort	Scalar
//  Temp2                            |  Tango::DevShort	Scalar
//  Temp3                            |  Tango::DevShort	Scalar
//  Fan1Speed                        |  Tango::DevShort	Scalar
//  Fan2Speed                        |  Tango::DevShort	Scalar
//  Incoherence                      |  Tango::DevDouble	Scalar
//  RefIncoherence                   |  Tango::DevDouble	Scalar
//  MaxIncoherence                   |  Tango::DevDouble	Scalar
//  MaxIncoherenceDrift              |  Tango::DevDouble	Scalar
//  UpTime                           |  Tango::DevLong	Scalar
//  CpuUsage                         |  Tango::DevLong	Scalar
//  FreeMemory                       |  Tango::DevLong	Scalar
//  RamFsUsage                       |  Tango::DevLong	Scalar
//  UseLiberaSAData                  |  Tango::DevBoolean	Scalar
//  InterlockEnabled                 |  Tango::DevBoolean	Scalar
//  InterlockGainDependentEnabled    |  Tango::DevBoolean	Scalar
//  InterlockOverflowThreshold       |  Tango::DevLong	Scalar
//  InterlockOverflowDuration        |  Tango::DevLong	Scalar
//  InterlockGainDependentThreshold  |  Tango::DevLong	Scalar
//  Kx                               |  Tango::DevDouble	Scalar
//  Ky                               |  Tango::DevDouble	Scalar
//  XOffset                          |  Tango::DevDouble	Scalar
//  YOffset                          |  Tango::DevDouble	Scalar
//  XPosSP                           |  Tango::DevDouble	Scalar
//  YPosSP                           |  Tango::DevDouble	Scalar
//  SumSP                            |  Tango::DevDouble	Scalar
//  SPEnabled                        |  Tango::DevBoolean	Scalar
//  SPThreshold                      |  Tango::DevLong	Scalar
//  VaSP                             |  Tango::DevDouble	Scalar
//  VbSP                             |  Tango::DevDouble	Scalar
//  VcSP                             |  Tango::DevDouble	Scalar
//  VdSP                             |  Tango::DevDouble	Scalar
//  XPosDD                           |  Tango::DevDouble	Spectrum  ( max = 250000)
//  YPosDD                           |  Tango::DevDouble	Spectrum  ( max = 250000)
//  QuadDD                           |  Tango::DevDouble	Spectrum  ( max = 250000)
//  SumDD                            |  Tango::DevDouble	Spectrum  ( max = 250000)
//  VaDD                             |  Tango::DevDouble	Spectrum  ( max = 250000)
//  VbDD                             |  Tango::DevDouble	Spectrum  ( max = 250000)
//  VcDD                             |  Tango::DevDouble	Spectrum  ( max = 250000)
//  VdDD                             |  Tango::DevDouble	Spectrum  ( max = 250000)
//  XPosSAHistory                    |  Tango::DevDouble	Spectrum  ( max = 16384)
//  YPosSAHistory                    |  Tango::DevDouble	Spectrum  ( max = 16384)
//  SumSAHistory                     |  Tango::DevDouble	Spectrum  ( max = 16384)
//  XPosPM                           |  Tango::DevDouble	Spectrum  ( max = 16384)
//  YPosPM                           |  Tango::DevDouble	Spectrum  ( max = 16384)
//  QuadPM                           |  Tango::DevDouble	Spectrum  ( max = 16384)
//  SumPM                            |  Tango::DevDouble	Spectrum  ( max = 16384)
//  VaPM                             |  Tango::DevDouble	Spectrum  ( max = 16384)
//  VbPM                             |  Tango::DevDouble	Spectrum  ( max = 16384)
//  VcPM                             |  Tango::DevDouble	Spectrum  ( max = 16384)
//  VdPM                             |  Tango::DevDouble	Spectrum  ( max = 16384)
//  ADCChannelA                      |  Tango::DevShort	Spectrum  ( max = 250000)
//  ADCChannelB                      |  Tango::DevShort	Spectrum  ( max = 250000)
//  ADCChannelC                      |  Tango::DevShort	Spectrum  ( max = 250000)
//  ADCChannelD                      |  Tango::DevShort	Spectrum  ( max = 250000)
//  IaDD                             |  Tango::DevDouble	Spectrum  ( max = 250000)
//  IbDD                             |  Tango::DevDouble	Spectrum  ( max = 250000)
//  IcDD                             |  Tango::DevDouble	Spectrum  ( max = 250000)
//  IdDD                             |  Tango::DevDouble	Spectrum  ( max = 250000)
//  QaDD                             |  Tango::DevDouble	Spectrum  ( max = 250000)
//  QbDD                             |  Tango::DevDouble	Spectrum  ( max = 250000)
//  QcDD                             |  Tango::DevDouble	Spectrum  ( max = 250000)
//  QdDD                             |  Tango::DevDouble	Spectrum  ( max = 250000)
//  UserData                         |  Tango::DevShort	Spectrum  ( max = 256)
//  logs                             |  Tango::DevString	Spectrum  ( max = 2048)
//================================================================

namespace LiberaBrilliancePlus_ns
{
/*----- PROTECTED REGION ID(LiberaBrilliancePlus::namespace_starting) ENABLED START -----*/

    //  static initializations
Tango::DevUShort c_liberaModel(1); // BPM type
const std::string c_timingBoard("evrx2");

/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::LiberaBrilliancePlus()
 *	Description : Constructors for a Tango device
 *                implementing the classLiberaBrilliancePlus
 */
//--------------------------------------------------------
LiberaBrilliancePlus::LiberaBrilliancePlus(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::constructor_1) ENABLED START -----*/
    init_device();
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::constructor_1
}
//--------------------------------------------------------
LiberaBrilliancePlus::LiberaBrilliancePlus(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::constructor_2) ENABLED START -----*/
    init_device();
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::constructor_2
}
//--------------------------------------------------------
LiberaBrilliancePlus::LiberaBrilliancePlus(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::constructor_3) ENABLED START -----*/
    init_device();
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::delete_device()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::delete_device) ENABLED START -----*/
    
    //  Delete device allocated objects
    if (m_libera) {
        m_libera->Disconnect();
        delete m_libera;
        m_libera = NULL;
    }

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::init_device()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::init_device_before) ENABLED START -----*/
    
    //  Initialization before get_device_property() call
    attr_LiberaModel_read = &c_liberaModel;
  m_libera = NULL;
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	

	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::init_device) ENABLED START -----*/

    if (liberaBoard.empty())
    {
        m_state = Tango::FAULT;
        m_status = "The liberaBoard property must be filled";
        ERROR_STREAM << m_status << std::endl;
        return;
    }
    if (liberaIpAddr.empty())
    {
      INFO_STREAM << "Using 127.0.0.1 as ip address" << std::endl;
    }

    m_raf = "boards." + liberaBoard + ".";
    std::string tim("boards." + c_timingBoard + ".");

    //  Initialize device
    m_libera = new LiberaClient(this, liberaIpAddr);

    // Add scalar values
    m_libera->AddScalar("", attr_DDDecimationFactor_read); //n.a.

    m_libera->AddScalar("", attr_DDTriggerOffset_read); // no ireg node
    *attr_DDTriggerOffset_read = 0;

    m_libera->AddScalar("", attr_DDBufferFreezingEnabled_read); // no ireg node
    *attr_DDBufferFreezingEnabled_read = false;
    m_libera->AddScalar("", attr_DDBufferFrozen_read); // no ireg node
    *attr_DDBufferFrozen_read = false;

    m_libera->AddScalar(tim + "events.t2.count",
        attr_DDTriggerCounter_read, LiberaAttr::ULL2LONG);

    m_libera->AddScalar("", attr_ExternalTriggerEnabled_read); // no ireg node

    m_libera->AddScalar(m_raf + "local_timing.trigger_delay",
        attr_ExternalTriggerDelay_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);

    //n.a.
    m_libera->AddScalar("", attr_CxSA_read);
    m_libera->AddScalar("", attr_CySA_read);

    m_libera->AddScalar(m_raf + "postmortem.offset", attr_PMOffset_read);
    m_libera->AddScalar(m_raf + "postmortem.capture",
        attr_PMNotified_read, LiberaAttr::NEGATE, LiberaAttr::NEGATE);
    m_libera->AddScalar(tim + "events.t1.count",
        attr_PMNotificationCounter_read, LiberaAttr::ULL2SHORT);

    m_libera->AddScalar(m_raf + "interlock.status.il_status.x",
        attr_InterlockXNotified_read);
    m_libera->AddScalar(m_raf + "interlock.status.il_status.y",
        attr_InterlockYNotified_read);
    m_libera->AddScalar(m_raf + "interlock.status.il_status.attenuator",
        attr_InterlockAttnNotified_read);
    m_libera->AddScalar(m_raf + "interlock.status.il_status.adc_overflow",
        attr_InterlockADCPreFilterNotified_read);
    m_libera->AddScalar(m_raf + "interlock.status.il_status.adc_overflow_filtered",
        attr_InterlockADCPostFilterNotified_read);

    m_libera->AddScalar(m_raf + "interlock.enabled", attr_InterlockEnabled_read);
    // Can't use Tango::DevULong directly because of a bug in Tango
    m_libera->AddScalar(m_raf + "interlock.limits.overflow.threshold",
        attr_InterlockOverflowThreshold_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);
    // Can't use Tango::DevULong directly because of a bug in Tango
    m_libera->AddScalar(m_raf + "interlock.limits.overflow.duration",
        attr_InterlockOverflowDuration_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);
    m_libera->AddScalar(m_raf + "interlock.gain_dependent.enabled",
        attr_InterlockGainDependentEnabled_read);
    m_libera->AddScalar(m_raf + "interlock.gain_dependent.threshold",
        attr_InterlockGainDependentThreshold_read);

    m_libera->AddScalar(m_raf + "interlock.limits.position.min.x",
        attr_XLow_read, LiberaAttr::NM2MM, LiberaAttr::MM2NM);
    m_libera->AddScalar(m_raf + "interlock.limits.position.max.x",
        attr_XHigh_read, LiberaAttr::NM2MM, LiberaAttr::MM2NM);
    m_libera->AddScalar(m_raf + "interlock.limits.position.min.y",
        attr_YLow_read, LiberaAttr::NM2MM, LiberaAttr::MM2NM);
    m_libera->AddScalar(m_raf + "interlock.limits.position.max.y",
        attr_YHigh_read, LiberaAttr::NM2MM, LiberaAttr::MM2NM);

    m_libera->AddScalar(m_raf + "signal_processing.position.Kx",
        attr_Kx_read, LiberaAttr::K2MM, LiberaAttr::MM2K);
    m_libera->AddScalar(m_raf + "signal_processing.position.Ky",
        attr_Ky_read, LiberaAttr::K2MM, LiberaAttr::MM2K);
    m_libera->AddScalar(m_raf + "signal_processing.position.off_x",
        attr_XOffset_read, LiberaAttr::NM2MM, LiberaAttr::MM2NM);
    m_libera->AddScalar(m_raf + "signal_processing.position.off_y",
        attr_YOffset_read, LiberaAttr::NM2MM, LiberaAttr::MM2NM);


    m_libera->AddScalar(m_raf + "conditioning.switching", attr_AutoSwitchingEnabled_read);
    m_libera->AddScalar("", attr_Switches_read); // n.a.
    m_libera->AddScalar(m_raf + "conf.switching_source",
        attr_ExternalSwitching_read, LiberaAttr::ENUM2BOOL, LiberaAttr::BOOL2ENUM);
    // Can't use Tango::DevULong directly because of a bug in Tango
    m_libera->AddScalar(m_raf + "conf.switching_delay",
        attr_SwitchingDelay_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);

    m_libera->AddScalar(tim + "pll.vcxo_offset", attr_OffsetTune_read);
    m_libera->AddScalar(tim + "pll.compensate_offset", attr_CompensateTune_read);

    m_libera->AddScalar(m_raf + "conditioning.tuning.dsc.coefficients",
        attr_DSCMode_read, LiberaAttr::DSC2SHORT, LiberaAttr::SHORT2DSC);
    m_libera->AddScalar(m_raf + "conditioning.tuning.agc.enabled", attr_AGCEnabled_read);
    m_libera->AddScalar(m_raf + "conditioning.tuning.agc.power_level",
        attr_Gain_read, LiberaAttr::INT2DBL, LiberaAttr::DBL2INT);

    //n.a.
    m_libera->AddScalar("", attr_HasMAFSupport_read);
    m_libera->AddScalar("", attr_MAFLength_read);
    m_libera->AddScalar("", attr_MAFDelay_read);

    m_libera->AddScalar("application.synchronize_lmt", attr_MachineTime_read,
        LiberaAttr::ULL2DBL, LiberaAttr::DBL2ULL);

    // Can't use Tango::DevULong directly because of a bug in Tango
    m_libera->AddScalar(m_raf + "tbt.phase_offset",
        attr_TimePhase_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);
    m_libera->AddScalar("", attr_SystemTime_read); // n.a.
    m_libera->AddScalar("", attr_SCPLLStatus_read); // n.a.
    m_libera->AddScalar(tim + "pll.locked", attr_MCPLLStatus_read);

    m_libera->AddScalarPM("boards." + liberaBoard + ".sensors.ID_2.value",
        attr_Temp1_read, LiberaAttr::DBL2SHORT);
    m_libera->AddScalarPM("boards.icb0.sensors.ID_1.value",
        attr_Temp2_read, LiberaAttr::DBL2SHORT);
    m_libera->AddScalarPM("boards." + c_timingBoard + ".sensors.ID_6.value",
        attr_Temp3_read, LiberaAttr::DBL2SHORT);
    m_libera->AddScalarPM("fans.left_", attr_Fan1Speed_read, LiberaAttr::FAN2SHORT);
    m_libera->AddScalarPM("fans.right_", attr_Fan2Speed_read, LiberaAttr::FAN2SHORT);

    //n.a.
    m_libera->AddScalar("", attr_Incoherence_read);
    m_libera->AddScalar("", attr_RefIncoherence_read);
    m_libera->AddScalar("", attr_MaxIncoherence_read);
    m_libera->AddScalar("", attr_MaxIncoherenceDrift_read);

    //n.a.
    m_libera->AddScalarPM("", attr_UpTime_read);
    m_libera->AddScalarPM("", attr_RamFsUsage_read);

    m_libera->AddScalarPM("boards.os.sensors",
        attr_CpuUsage_read, LiberaAttr::CPU2LONG);
    m_libera->AddScalarPM("boards.os.sensors",
        attr_FreeMemory_read, LiberaAttr::MEM2LONG);

    //n.a.
    m_libera->AddScalar("", attr_UseLiberaSAData_read);

    //n.a.
    m_libera->AddScalar("", attr_UserData_read);

    m_libera->AddLogsRead(attr_logs_read, 2048);

    // Add signals
    m_signalDdc  = m_libera->AddSignal<Tango::DevDouble>(
        m_raf + "signals.ddc_synthetic",
        1000,
        attr_DDEnabled_read,
        attr_DDBufferSize_read,
        attr_VaDD_read,
        attr_VbDD_read,
        attr_VcDD_read,
        attr_VdDD_read,
        attr_SumDD_read,
        attr_QuadDD_read,
        attr_XPosDD_read,
        attr_YPosDD_read);
    m_signalDdc->SetPeriod(0);
    m_signalDdc->Enable();
    m_signalDdc->SetNotifier(&LiberaBrilliancePlus::_DDCallback,
            reinterpret_cast<void*>(this));
    if (enableExternalTrigger) {
        m_signalDdc->SetMode(isig::eModeDodOnEvent);
    }

    m_signalSA  = m_libera->AddSignal<LiberaSAHistory>(
        m_raf + "signals.sa",
        512,
        attr_SAEnabled_read,
        attr_SAStatNumSamples_read,
        attr_VaSA_read,
        attr_VbSA_read,
        attr_VcSA_read,
        attr_VdSA_read,
        attr_SumSA_read,
        attr_QuadSA_read,
        attr_XPosSA_read,
        attr_YPosSA_read,
        attr_XPosSAHistory_read,
        attr_YPosSAHistory_read,
        attr_SumSAHistory_read,
        attr_XMeanPosSA_read,
        attr_YMeanPosSA_read,
        attr_XRMSPosSA_read,
        attr_YRMSPosSA_read,
        attr_XPeakPosSA_read,
        attr_YPeakPosSA_read,
        attr_SumMeanSA_read);
    m_signalSA->SetPeriod(0); // stream waits in read
    m_signalSA->Enable();
    m_signalSA->SetNotifier(&LiberaBrilliancePlus::_SACallback,
            reinterpret_cast<void*>(this));

    m_signalPM  = m_libera->AddSignal<Tango::DevDouble>(
        m_raf + "postmortem.signals.ddc_synthetic",
        16384,
        attr_PMEnabled_read_added,
        attr_PMBufferSize_read_added,
        attr_VaPM_read,
        attr_VbPM_read,
        attr_VcPM_read,
        attr_VdPM_read,
        attr_SumPM_read,
        attr_QuadPM_read,
        attr_XPosPM_read,
        attr_YPosPM_read);

    m_signalPM->SetPeriod(0); // stream waits in read
    m_signalPM->Enable();
    m_signalPM->SetNotifier(&LiberaBrilliancePlus::_PMCallback,
            reinterpret_cast<void*>(this));

    m_libera->SetNotifier(attr_PMNotified_read, &LiberaBrilliancePlus::UpdatePM);

    m_signalADC  = m_libera->AddSignal<Tango::DevShort>(
        m_raf + "signals.adc",
        1000,
        attr_ADCEnabled_read,
        attr_ADCBufferSize_read,
        attr_ADCChannelA_read,
        attr_ADCChannelB_read,
        attr_ADCChannelC_read,
        attr_ADCChannelD_read);
    m_signalADC->SetPeriod(500);
    if (enableExternalTrigger) {
        m_signalADC->SetMode(isig::eModeDodOnEvent);
    }

    m_signalDdcRaw  = m_libera->AddSignal<Tango::DevDouble>(
        m_raf + "signals.ddc_raw",
        1000,
        attr_DDEnabled_read_added,
        attr_DDBufferSize_read_added,
        attr_IaDD_read,
        attr_QaDD_read,
        attr_IbDD_read,
        attr_QbDD_read,
        attr_IcDD_read,
        attr_QcDD_read,
        attr_IdDD_read,
        attr_QdDD_read);
    m_signalDdcRaw->SetPeriod(500);
    if (enableExternalTrigger) {
        m_signalDdcRaw->SetMode(isig::eModeDodOnEvent);
    }

    m_signalSPE = m_libera->AddSignal<Tango::DevDouble>(
        m_raf + "single_pass.signal",
        1,
        attr_SPEnabled_read,
        m_spe_buffer_size,
        attr_VaSP_read,
        attr_VbSP_read,
        attr_VcSP_read,
        attr_VdSP_read,
        attr_SumSP_read,
        m_spe_q,
        attr_XPosSP_read,
        attr_YPosSP_read,
        m_spe_trigger_cnt,
        m_spe_bunch_cnt,
        m_spe_status,
        m_spe_mode,
        m_spe_r2,
        m_spe_r3,
        m_spe_timestamp_h,
        m_spe_timestamp_l);

    m_signalSPE->SetPeriod(0); // stream waits in read
    m_signalSPE->Enable();
    m_signalSPE->SetNotifier(&LiberaBrilliancePlus::_SPCallback,
        reinterpret_cast<void*>(this));
    if (enableExternalTrigger) {
        m_signalSPE->SetMode(isig::eModeDodOnEvent);
    }
    m_libera->AddScalar(m_raf + ".single_pass.threshold",
        attr_SPThreshold_read);

    set_change_event("XPosPM",  true, false);
    set_change_event("YPosPM",  true, false);
    set_change_event("QuadPM",  true, false);
    set_change_event("SumPM",  true, false);

    set_change_event("XPosDD",  true, false);
    set_change_event("YPosDD",  true, false);
    set_change_event("QuadDD",  true, false);
    set_change_event("SumDD",  true, false);

    set_change_event("XPosSA",  true, false);
    set_change_event("YPosSA",  true, false);
    set_change_event("QuadSA",  true, false);
    set_change_event("SumSA",  true, false);

    set_change_event("XPosSP",  true, false);
    set_change_event("YPosSP",  true, false);
    set_change_event("SumSP",  true, false);

    try
    {
      m_libera->Connect();
      m_state = Tango::ON;
      m_status = "Connected to Libera";
    }
    catch (...)
    {
      m_state = Tango::UNKNOWN;
      m_status = "Connection to Libera failed. Try to reinit the device.";
    }

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::init_device
}

//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::get_device_property()
{
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::get_device_property_before) ENABLED START -----*/
    
    //  Initialize property data members
    DEBUG_STREAM << "LiberaBrilliancePlus::get_device_property() get device properties " << device_name << endl;

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("LiberaIpAddr"));
	dev_prop.push_back(Tango::DbDatum("LiberaPort"));
	dev_prop.push_back(Tango::DbDatum("DefaultDDBufferSize"));
	dev_prop.push_back(Tango::DbDatum("Switches"));
	dev_prop.push_back(Tango::DbDatum("LiberaMulticastIpAddr"));
	dev_prop.push_back(Tango::DbDatum("Location"));
	dev_prop.push_back(Tango::DbDatum("EnableExternalTrigger"));
	dev_prop.push_back(Tango::DbDatum("DDTaskActivityPeriod"));
	dev_prop.push_back(Tango::DbDatum("SATaskActivityPeriod"));
	dev_prop.push_back(Tango::DbDatum("EnableDD"));
	dev_prop.push_back(Tango::DbDatum("EnableSA"));
	dev_prop.push_back(Tango::DbDatum("SAHistoryLength"));
	dev_prop.push_back(Tango::DbDatum("DDDecimationFactor"));
	dev_prop.push_back(Tango::DbDatum("EnableAutoSwitchingIfSAEnabled"));
	dev_prop.push_back(Tango::DbDatum("EnableDSCIfAutoSwitchingEnabled"));
	dev_prop.push_back(Tango::DbDatum("DefaultSAStatNumSamples"));
	dev_prop.push_back(Tango::DbDatum("DefaultADCBufferSize"));
	dev_prop.push_back(Tango::DbDatum("ADCTaskActivityPeriod"));
	dev_prop.push_back(Tango::DbDatum("EnableADC"));
	dev_prop.push_back(Tango::DbDatum("DefaultTimePhaseValue"));
	dev_prop.push_back(Tango::DbDatum("InterlockConfiguration"));
	dev_prop.push_back(Tango::DbDatum("EnableDDOptionalData"));
	dev_prop.push_back(Tango::DbDatum("EnableSAOptionalData"));
	dev_prop.push_back(Tango::DbDatum("EnableSAHistoryOptionalData"));
	dev_prop.push_back(Tango::DbDatum("EnableADCOptionalData"));
	dev_prop.push_back(Tango::DbDatum("Institute"));
	dev_prop.push_back(Tango::DbDatum("MaxDDBufferSizeWhenDecimationEnabled"));
	dev_prop.push_back(Tango::DbDatum("PassBBAOffsetsToFPGA"));
	dev_prop.push_back(Tango::DbDatum("FADataCacheRefreshPeriod"));
	dev_prop.push_back(Tango::DbDatum("LiberaBoard"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on LiberaBrilliancePlusClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		LiberaBrilliancePlusClass	*ds_class =
			(static_cast<LiberaBrilliancePlusClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize LiberaIpAddr from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaIpAddr;
		else {
			//	Try to initialize LiberaIpAddr from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaIpAddr;
		}
		//	And try to extract LiberaIpAddr value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaIpAddr;

		//	Try to initialize LiberaPort from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaPort;
		else {
			//	Try to initialize LiberaPort from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaPort;
		}
		//	And try to extract LiberaPort value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaPort;

		//	Try to initialize DefaultDDBufferSize from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  defaultDDBufferSize;
		else {
			//	Try to initialize DefaultDDBufferSize from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  defaultDDBufferSize;
		}
		//	And try to extract DefaultDDBufferSize value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  defaultDDBufferSize;

		//	Try to initialize Switches from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  switches;
		else {
			//	Try to initialize Switches from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  switches;
		}
		//	And try to extract Switches value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  switches;

		//	Try to initialize LiberaMulticastIpAddr from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaMulticastIpAddr;
		else {
			//	Try to initialize LiberaMulticastIpAddr from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaMulticastIpAddr;
		}
		//	And try to extract LiberaMulticastIpAddr value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaMulticastIpAddr;

		//	Try to initialize Location from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  location;
		else {
			//	Try to initialize Location from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  location;
		}
		//	And try to extract Location value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  location;

		//	Try to initialize EnableExternalTrigger from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableExternalTrigger;
		else {
			//	Try to initialize EnableExternalTrigger from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableExternalTrigger;
		}
		//	And try to extract EnableExternalTrigger value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableExternalTrigger;

		//	Try to initialize DDTaskActivityPeriod from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  dDTaskActivityPeriod;
		else {
			//	Try to initialize DDTaskActivityPeriod from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  dDTaskActivityPeriod;
		}
		//	And try to extract DDTaskActivityPeriod value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dDTaskActivityPeriod;

		//	Try to initialize SATaskActivityPeriod from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  sATaskActivityPeriod;
		else {
			//	Try to initialize SATaskActivityPeriod from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  sATaskActivityPeriod;
		}
		//	And try to extract SATaskActivityPeriod value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  sATaskActivityPeriod;

		//	Try to initialize EnableDD from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableDD;
		else {
			//	Try to initialize EnableDD from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableDD;
		}
		//	And try to extract EnableDD value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableDD;

		//	Try to initialize EnableSA from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableSA;
		else {
			//	Try to initialize EnableSA from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableSA;
		}
		//	And try to extract EnableSA value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableSA;

		//	Try to initialize SAHistoryLength from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  sAHistoryLength;
		else {
			//	Try to initialize SAHistoryLength from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  sAHistoryLength;
		}
		//	And try to extract SAHistoryLength value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  sAHistoryLength;

		//	Try to initialize DDDecimationFactor from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  dDDecimationFactor;
		else {
			//	Try to initialize DDDecimationFactor from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  dDDecimationFactor;
		}
		//	And try to extract DDDecimationFactor value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dDDecimationFactor;

		//	Try to initialize EnableAutoSwitchingIfSAEnabled from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableAutoSwitchingIfSAEnabled;
		else {
			//	Try to initialize EnableAutoSwitchingIfSAEnabled from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableAutoSwitchingIfSAEnabled;
		}
		//	And try to extract EnableAutoSwitchingIfSAEnabled value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableAutoSwitchingIfSAEnabled;

		//	Try to initialize EnableDSCIfAutoSwitchingEnabled from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableDSCIfAutoSwitchingEnabled;
		else {
			//	Try to initialize EnableDSCIfAutoSwitchingEnabled from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableDSCIfAutoSwitchingEnabled;
		}
		//	And try to extract EnableDSCIfAutoSwitchingEnabled value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableDSCIfAutoSwitchingEnabled;

		//	Try to initialize DefaultSAStatNumSamples from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  defaultSAStatNumSamples;
		else {
			//	Try to initialize DefaultSAStatNumSamples from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  defaultSAStatNumSamples;
		}
		//	And try to extract DefaultSAStatNumSamples value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  defaultSAStatNumSamples;

		//	Try to initialize DefaultADCBufferSize from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  defaultADCBufferSize;
		else {
			//	Try to initialize DefaultADCBufferSize from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  defaultADCBufferSize;
		}
		//	And try to extract DefaultADCBufferSize value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  defaultADCBufferSize;

		//	Try to initialize ADCTaskActivityPeriod from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  aDCTaskActivityPeriod;
		else {
			//	Try to initialize ADCTaskActivityPeriod from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  aDCTaskActivityPeriod;
		}
		//	And try to extract ADCTaskActivityPeriod value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  aDCTaskActivityPeriod;

		//	Try to initialize EnableADC from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableADC;
		else {
			//	Try to initialize EnableADC from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableADC;
		}
		//	And try to extract EnableADC value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableADC;

		//	Try to initialize DefaultTimePhaseValue from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  defaultTimePhaseValue;
		else {
			//	Try to initialize DefaultTimePhaseValue from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  defaultTimePhaseValue;
		}
		//	And try to extract DefaultTimePhaseValue value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  defaultTimePhaseValue;

		//	Try to initialize InterlockConfiguration from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  interlockConfiguration;
		else {
			//	Try to initialize InterlockConfiguration from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  interlockConfiguration;
		}
		//	And try to extract InterlockConfiguration value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  interlockConfiguration;

		//	Try to initialize EnableDDOptionalData from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableDDOptionalData;
		else {
			//	Try to initialize EnableDDOptionalData from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableDDOptionalData;
		}
		//	And try to extract EnableDDOptionalData value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableDDOptionalData;

		//	Try to initialize EnableSAOptionalData from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableSAOptionalData;
		else {
			//	Try to initialize EnableSAOptionalData from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableSAOptionalData;
		}
		//	And try to extract EnableSAOptionalData value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableSAOptionalData;

		//	Try to initialize EnableSAHistoryOptionalData from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableSAHistoryOptionalData;
		else {
			//	Try to initialize EnableSAHistoryOptionalData from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableSAHistoryOptionalData;
		}
		//	And try to extract EnableSAHistoryOptionalData value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableSAHistoryOptionalData;

		//	Try to initialize EnableADCOptionalData from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableADCOptionalData;
		else {
			//	Try to initialize EnableADCOptionalData from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableADCOptionalData;
		}
		//	And try to extract EnableADCOptionalData value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableADCOptionalData;

		//	Try to initialize Institute from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  institute;
		else {
			//	Try to initialize Institute from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  institute;
		}
		//	And try to extract Institute value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  institute;

		//	Try to initialize MaxDDBufferSizeWhenDecimationEnabled from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  maxDDBufferSizeWhenDecimationEnabled;
		else {
			//	Try to initialize MaxDDBufferSizeWhenDecimationEnabled from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  maxDDBufferSizeWhenDecimationEnabled;
		}
		//	And try to extract MaxDDBufferSizeWhenDecimationEnabled value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  maxDDBufferSizeWhenDecimationEnabled;

		//	Try to initialize PassBBAOffsetsToFPGA from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  passBBAOffsetsToFPGA;
		else {
			//	Try to initialize PassBBAOffsetsToFPGA from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  passBBAOffsetsToFPGA;
		}
		//	And try to extract PassBBAOffsetsToFPGA value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  passBBAOffsetsToFPGA;

		//	Try to initialize FADataCacheRefreshPeriod from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  fADataCacheRefreshPeriod;
		else {
			//	Try to initialize FADataCacheRefreshPeriod from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  fADataCacheRefreshPeriod;
		}
		//	And try to extract FADataCacheRefreshPeriod value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  fADataCacheRefreshPeriod;

		//	Try to initialize LiberaBoard from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaBoard;
		else {
			//	Try to initialize LiberaBoard from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaBoard;
		}
		//	And try to extract LiberaBoard value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaBoard;

	}

	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::get_device_property_after) ENABLED START -----*/
    
    //  Check device property data members init
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::always_executed_hook()
{
	//INFO_STREAM << "LiberaBrilliancePlus::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::always_executed_hook) ENABLED START -----*/
    
    //  code always executed before all requests
    /*if (m_libera != NULL)
 {
    if (m_libera->IsConnected()) {
          // call GetData also all attributes from here?
  
        m_signalSA->GetData();
        m_signalADC->GetData();
          if (*attr_DDBufferFreezingEnabled_read) {
              if (!(*attr_DDBufferFrozen_read) && m_signalDdc->IsUpdated()) {
                  *attr_DDBufferFrozen_read = true;
                  m_signalDdc->GetData();
                  m_signalDdcRaw->GetData();
              }
          }
          else {
              m_signalDdc->GetData();
              m_signalDdcRaw->GetData();
          }
    }
 }*/

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_attr_hardware) ENABLED START -----*/
    
    //  Add your own code
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_attr_hardware) ENABLED START -----*/
    
    //  Add your own code
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute LiberaModel related method
 *	Description: The Libera Model: 0:Electron, 1:Brillance, 2:Photon
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_LiberaModel(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_LiberaModel(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_LiberaModel) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_LiberaModel_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_LiberaModel
}
//--------------------------------------------------------
/**
 *	Read attribute DDEnabled related method
 *	Description: DD data source activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DDEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DDEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DDEnabled) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_DDEnabled_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DDEnabled
}
//--------------------------------------------------------
/**
 *	Write attribute DDEnabled related method
 *	Description: DD data source activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_DDEnabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_DDEnabled(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_DDEnabled) ENABLED START -----*/

    w_val ? enable_dd() : disable_dd();

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_DDEnabled
}
//--------------------------------------------------------
/**
 *	Read attribute DDBufferSize related method
 *	Description: The number of samples to be read on DD data source.\nInfluences the size of the associated attributes [such as XPosDD for instance].
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DDBufferSize(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DDBufferSize(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DDBufferSize) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DDBufferSize
}
//--------------------------------------------------------
/**
 *	Write attribute DDBufferSize related method
 *	Description: The number of samples to be read on DD data source.\nInfluences the size of the associated attributes [such as XPosDD for instance].
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_DDBufferSize(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_DDBufferSize(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_DDBufferSize) ENABLED START -----*/

    m_signalDdc->Realloc(w_val);
    m_signalDdcRaw->Realloc(w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_DDBufferSize
}
//--------------------------------------------------------
/**
 *	Read attribute DDDecimationFactor related method
 *	Description: The DD decimation factor
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DDDecimationFactor(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DDDecimationFactor(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DDDecimationFactor) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_DDDecimationFactor_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DDDecimationFactor
}
//--------------------------------------------------------
/**
 *	Write attribute DDDecimationFactor related method
 *	Description: The DD decimation factor
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_DDDecimationFactor(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_DDDecimationFactor(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevUShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_DDDecimationFactor) ENABLED START -----*/
    
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_DDDecimationFactor
}
//--------------------------------------------------------
/**
 *	Read attribute DDTriggerOffset related method
 *	Description: DD data offset in num. of turns
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DDTriggerOffset(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DDTriggerOffset(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DDTriggerOffset) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_DDTriggerOffset_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DDTriggerOffset
}
//--------------------------------------------------------
/**
 *	Write attribute DDTriggerOffset related method
 *	Description: DD data offset in num. of turns
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_DDTriggerOffset(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_DDTriggerOffset(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_DDTriggerOffset) ENABLED START -----*/

    m_libera->UpdateScalar(attr_DDTriggerOffset_read, w_val);
    m_signalDdc->SetOffset(w_val);
    m_signalDdcRaw->SetOffset(w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_DDTriggerOffset
}
//--------------------------------------------------------
/**
 *	Read attribute DDBufferFreezingEnabled related method
 *	Description: DD buffer freezing activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DDBufferFreezingEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DDBufferFreezingEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DDBufferFreezingEnabled) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_DDBufferFreezingEnabled_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DDBufferFreezingEnabled
}
//--------------------------------------------------------
/**
 *	Read attribute DDBufferFrozen related method
 *	Description: DD buffer status
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DDBufferFrozen(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DDBufferFrozen(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DDBufferFrozen) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_DDBufferFrozen_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DDBufferFrozen
}
//--------------------------------------------------------
/**
 *	Read attribute DDTriggerCounter related method
 *	Description: Number of trigger notifications received since last device <init> 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DDTriggerCounter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DDTriggerCounter(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DDTriggerCounter) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_DDTriggerCounter_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DDTriggerCounter
}
//--------------------------------------------------------
/**
 *	Read attribute ExternalTriggerEnabled related method
 *	Description: External trigger activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ExternalTriggerEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ExternalTriggerEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ExternalTriggerEnabled) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(&enableExternalTrigger);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ExternalTriggerEnabled
}
//--------------------------------------------------------
/**
 *	Write attribute ExternalTriggerEnabled related method
 *	Description: External trigger activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_ExternalTriggerEnabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_ExternalTriggerEnabled(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_ExternalTriggerEnabled) ENABLED START -----*/
    enableExternalTrigger = w_val;
    if (enableExternalTrigger) {
        m_signalDdc->SetMode(isig::eModeDodOnEvent);
        m_signalDdcRaw->SetMode(isig::eModeDodOnEvent);
        m_signalADC->SetMode(isig::eModeDodOnEvent);
    }
    else {
        m_signalDdc->SetMode(isig::eModeDodNow);
        m_signalDdcRaw->SetMode(isig::eModeDodNow);
        m_signalADC->SetMode(isig::eModeDodNow);
    }


    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_ExternalTriggerEnabled
}
//--------------------------------------------------------
/**
 *	Read attribute ExternalTriggerDelay related method
 *	Description: Sets the delay on the external trigger arrival. 
 *               The delay is set in steps of ADC samples (~ 9 ns).
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ExternalTriggerDelay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ExternalTriggerDelay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ExternalTriggerDelay) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_ExternalTriggerDelay_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ExternalTriggerDelay
}
//--------------------------------------------------------
/**
 *	Write attribute ExternalTriggerDelay related method
 *	Description: Sets the delay on the external trigger arrival. 
 *               The delay is set in steps of ADC samples (~ 9 ns).
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_ExternalTriggerDelay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_ExternalTriggerDelay(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_ExternalTriggerDelay) ENABLED START -----*/

    m_libera->UpdateScalar(attr_ExternalTriggerDelay_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_ExternalTriggerDelay
}
//--------------------------------------------------------
/**
 *	Read attribute SAEnabled related method
 *	Description: SA data source activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SAEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SAEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SAEnabled) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_SAEnabled_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SAEnabled
}
//--------------------------------------------------------
/**
 *	Write attribute SAEnabled related method
 *	Description: SA data source activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_SAEnabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_SAEnabled(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_SAEnabled) ENABLED START -----*/

    w_val ? enable_sa() : disable_sa();

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_SAEnabled
}
//--------------------------------------------------------
/**
 *	Read attribute VaSA related method
 *	Description: Slow Acquisition: Va
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VaSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VaSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VaSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_VaSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VaSA
}
//--------------------------------------------------------
/**
 *	Read attribute VbSA related method
 *	Description: Slow Acquisition: Vb
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VbSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VbSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VbSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_VbSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VbSA
}
//--------------------------------------------------------
/**
 *	Read attribute VcSA related method
 *	Description: Slow Acquisition: Vc
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VcSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VcSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VcSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_VcSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VcSA
}
//--------------------------------------------------------
/**
 *	Read attribute VdSA related method
 *	Description: Slow Acquisition: Vd
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VdSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VdSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VdSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_VdSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VdSA
}
//--------------------------------------------------------
/**
 *	Read attribute XPosSA related method
 *	Description: Slow Acquisition: X
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XPosSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_XPosSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XPosSA
}
//--------------------------------------------------------
/**
 *	Read attribute YPosSA related method
 *	Description: Slow Acquisition: Y
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_YPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_YPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_YPosSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_YPosSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_YPosSA
}
//--------------------------------------------------------
/**
 *	Read attribute SumSA related method
 *	Description: Slow Acquisition: Sum
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SumSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SumSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SumSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_SumSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SumSA
}
//--------------------------------------------------------
/**
 *	Read attribute QuadSA related method
 *	Description: Slow Acquisition: Quad
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_QuadSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_QuadSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_QuadSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_QuadSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_QuadSA
}
//--------------------------------------------------------
/**
 *	Read attribute CxSA related method
 *	Description: FOFB X correction sent to the power supply
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_CxSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_CxSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_CxSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_CxSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_CxSA
}
//--------------------------------------------------------
/**
 *	Read attribute CySA related method
 *	Description: FOFB Y correction sent to the power supply
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_CySA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_CySA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_CySA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_CySA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_CySA
}
//--------------------------------------------------------
/**
 *	Read attribute SAStatNumSamples related method
 *	Description: The number of sample in SA history used to compute the SA statistics\n(Mean, RMS, Peak pos). The most recent samples will be used.\nThe valid range is [2, SAHistoryLength property value].\n
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SAStatNumSamples(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SAStatNumSamples(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SAStatNumSamples) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_SAStatNumSamples_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SAStatNumSamples
}
//--------------------------------------------------------
/**
 *	Write attribute SAStatNumSamples related method
 *	Description: The number of sample in SA history used to compute the SA statistics\n(Mean, RMS, Peak pos). The most recent samples will be used.\nThe valid range is [2, SAHistoryLength property value].\n
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_SAStatNumSamples(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_SAStatNumSamples(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_SAStatNumSamples) ENABLED START -----*/

    m_signalSA->Realloc(w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_SAStatNumSamples
}
//--------------------------------------------------------
/**
 *	Read attribute XMeanPosSA related method
 *	Description: Slow Acquisition:  arithmetic average from history values
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XMeanPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XMeanPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XMeanPosSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_XMeanPosSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XMeanPosSA
}
//--------------------------------------------------------
/**
 *	Read attribute YMeanPosSA related method
 *	Description: Slow Acquisition:  arithmetic average from history values
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_YMeanPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_YMeanPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_YMeanPosSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_YMeanPosSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_YMeanPosSA
}
//--------------------------------------------------------
/**
 *	Read attribute XRMSPosSA related method
 *	Description: Slow Acquisition:  X root mean square from histry samples sqrt(Xi^2-mean^2)/N^2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XRMSPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XRMSPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XRMSPosSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_XRMSPosSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XRMSPosSA
}
//--------------------------------------------------------
/**
 *	Read attribute YRMSPosSA related method
 *	Description: Slow Acquisition: Y root mean square from histry samples sqrt(Xi^2-mean^2)/N^2.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_YRMSPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_YRMSPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_YRMSPosSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_YRMSPosSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_YRMSPosSA
}
//--------------------------------------------------------
/**
 *	Read attribute XPeakPosSA related method
 *	Description: Slow Acquisition: X difference between max and min value from history
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XPeakPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XPeakPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XPeakPosSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_XPeakPosSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XPeakPosSA
}
//--------------------------------------------------------
/**
 *	Read attribute YPeakPosSA related method
 *	Description: Slow Acquisition: Y difference between max and min value from history
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_YPeakPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_YPeakPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_YPeakPosSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_YPeakPosSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_YPeakPosSA
}
//--------------------------------------------------------
/**
 *	Read attribute SumMeanSA related method
 *	Description: SA: mean of sum
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SumMeanSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SumMeanSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SumMeanSA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_SumMeanSA_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SumMeanSA
}
//--------------------------------------------------------
/**
 *	Read attribute ADCEnabled related method
 *	Description: ADC data source activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ADCEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ADCEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ADCEnabled) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_ADCEnabled_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ADCEnabled
}
//--------------------------------------------------------
/**
 *	Write attribute ADCEnabled related method
 *	Description: ADC data source activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_ADCEnabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_ADCEnabled(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_ADCEnabled) ENABLED START -----*/

    w_val ? enable_adc() : disable_adc();

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_ADCEnabled
}
//--------------------------------------------------------
/**
 *	Read attribute ADCBufferSize related method
 *	Description: The number of samples to be read on ADC data source.\nInfluences the size of the associated attributes [such as ADCChannelA for instance].
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ADCBufferSize(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ADCBufferSize(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ADCBufferSize) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_ADCBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ADCBufferSize
}
//--------------------------------------------------------
/**
 *	Write attribute ADCBufferSize related method
 *	Description: The number of samples to be read on ADC data source.\nInfluences the size of the associated attributes [such as ADCChannelA for instance].
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_ADCBufferSize(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_ADCBufferSize(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_ADCBufferSize) ENABLED START -----*/

    m_signalADC->Realloc(w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_ADCBufferSize
}
//--------------------------------------------------------
/**
 *	Read attribute PMOffset related method
 *	Description: Offset relative to the post mortem event setting. 
 *               Set value is in turns, e.g. 1024 would mean that post mortem 
 *               acquisition is starting 1024 turns after the post mortem trigger 
 *               was received.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_PMOffset(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_PMOffset(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_PMOffset) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_PMOffset_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_PMOffset
}
//--------------------------------------------------------
/**
 *	Write attribute PMOffset related method
 *	Description: Offset relative to the post mortem event setting. 
 *               Set value is in turns, e.g. 1024 would mean that post mortem 
 *               acquisition is starting 1024 turns after the post mortem trigger 
 *               was received.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_PMOffset(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_PMOffset(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_PMOffset) ENABLED START -----*/

    m_libera->UpdateScalar(attr_PMOffset_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_PMOffset
}
//--------------------------------------------------------
/**
 *	Read attribute PMNotified related method
 *	Description: Post Moterm notification flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_PMNotified(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_PMNotified(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_PMNotified) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_PMNotified_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_PMNotified
}
//--------------------------------------------------------
/**
 *	Read attribute PMNotificationCounter related method
 *	Description: Number a PM event recieved since last Init
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_PMNotificationCounter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_PMNotificationCounter(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_PMNotificationCounter) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_PMNotificationCounter_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_PMNotificationCounter
}
//--------------------------------------------------------
/**
 *	Read attribute InterlockXNotified related method
 *	Description: Sets to 1 if X position trip caused the Interlock event.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockXNotified(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockXNotified(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockXNotified) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_InterlockXNotified_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockXNotified
}
//--------------------------------------------------------
/**
 *	Read attribute InterlockYNotified related method
 *	Description: Sets to 1 if Yposition trip caused the Interlock event.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockYNotified(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockYNotified(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockYNotified) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_InterlockYNotified_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockYNotified
}
//--------------------------------------------------------
/**
 *	Read attribute InterlockAttnNotified related method
 *	Description: Sets to 1 if the attenuator's value is higher than gain 
 *               dependence threshold
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockAttnNotified(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockAttnNotified(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockAttnNotified) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_InterlockAttnNotified_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockAttnNotified
}
//--------------------------------------------------------
/**
 *	Read attribute InterlockADCPreFilterNotified related method
 *	Description: ADC overflow without filtering.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockADCPreFilterNotified(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockADCPreFilterNotified(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockADCPreFilterNotified) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_InterlockADCPreFilterNotified_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockADCPreFilterNotified
}
//--------------------------------------------------------
/**
 *	Read attribute InterlockADCPostFilterNotified related method
 *	Description: ADC overflow with filtering.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockADCPostFilterNotified(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockADCPostFilterNotified(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockADCPostFilterNotified) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_InterlockADCPostFilterNotified_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockADCPostFilterNotified
}
//--------------------------------------------------------
/**
 *	Read attribute XLow related method
 *	Description: Lower limit of the X position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XLow(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XLow(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XLow) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_XLow_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XLow
}
//--------------------------------------------------------
/**
 *	Write attribute XLow related method
 *	Description: Lower limit of the X position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_XLow(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_XLow(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_XLow) ENABLED START -----*/

    m_libera->UpdateScalar(attr_XLow_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_XLow
}
//--------------------------------------------------------
/**
 *	Read attribute XHigh related method
 *	Description: Upper limit of the X position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XHigh(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XHigh(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XHigh) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_XHigh_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XHigh
}
//--------------------------------------------------------
/**
 *	Write attribute XHigh related method
 *	Description: Upper limit of the X position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_XHigh(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_XHigh(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_XHigh) ENABLED START -----*/

    m_libera->UpdateScalar(attr_XHigh_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_XHigh
}
//--------------------------------------------------------
/**
 *	Read attribute YLow related method
 *	Description: Lower limit of the Y position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_YLow(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_YLow(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_YLow) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_YLow_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_YLow
}
//--------------------------------------------------------
/**
 *	Write attribute YLow related method
 *	Description: Lower limit of the Y position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_YLow(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_YLow(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_YLow) ENABLED START -----*/

    m_libera->UpdateScalar(attr_YLow_read, w_val);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_YLow
}
//--------------------------------------------------------
/**
 *	Read attribute YHigh related method
 *	Description: Upper limit of the Y position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_YHigh(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_YHigh(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_YHigh) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_YHigh_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_YHigh
}
//--------------------------------------------------------
/**
 *	Write attribute YHigh related method
 *	Description: Upper limit of the Y position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_YHigh(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_YHigh(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_YHigh) ENABLED START -----*/

    m_libera->UpdateScalar(attr_YHigh_read, w_val);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_YHigh
}
//--------------------------------------------------------
/**
 *	Read attribute AutoSwitchingEnabled related method
 *	Description: Enables / disables the switching mechanism.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_AutoSwitchingEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_AutoSwitchingEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_AutoSwitchingEnabled) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_AutoSwitchingEnabled_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_AutoSwitchingEnabled
}
//--------------------------------------------------------
/**
 *	Write attribute AutoSwitchingEnabled related method
 *	Description: Enables / disables the switching mechanism.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_AutoSwitchingEnabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_AutoSwitchingEnabled(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_AutoSwitchingEnabled) ENABLED START -----*/
    m_libera->UpdateScalar(attr_AutoSwitchingEnabled_read, w_val);


    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_AutoSwitchingEnabled
}
//--------------------------------------------------------
/**
 *	Read attribute Switches related method
 *	Description: Switches selection. Must be in [0, 15] or 255 for auto-switching.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Switches(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Switches(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Switches) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_Switches_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Switches
}
//--------------------------------------------------------
/**
 *	Write attribute Switches related method
 *	Description: Switches selection. Must be in [0, 15] or 255 for auto-switching.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_Switches(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_Switches(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_Switches) ENABLED START -----*/

    m_libera->UpdateScalar(attr_Switches_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_Switches
}
//--------------------------------------------------------
/**
 *	Read attribute ExternalSwitching related method
 *	Description: Sets the source of switching clock ? MC (external) or from the 
 *               oscillator (internal). Default value is internal. 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ExternalSwitching(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ExternalSwitching(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ExternalSwitching) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_ExternalSwitching_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ExternalSwitching
}
//--------------------------------------------------------
/**
 *	Write attribute ExternalSwitching related method
 *	Description: Sets the source of switching clock ? MC (external) or from the 
 *               oscillator (internal). Default value is internal. 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_ExternalSwitching(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_ExternalSwitching(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_ExternalSwitching) ENABLED START -----*/

    m_libera->UpdateScalar(attr_ExternalSwitching_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_ExternalSwitching
}
//--------------------------------------------------------
/**
 *	Read attribute SwitchingDelay related method
 *	Description: Sets the delay of the switch position change relative to the 
 *               switching source clock.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SwitchingDelay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SwitchingDelay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SwitchingDelay) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_SwitchingDelay_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SwitchingDelay
}
//--------------------------------------------------------
/**
 *	Write attribute SwitchingDelay related method
 *	Description: Sets the delay of the switch position change relative to the 
 *               switching source clock.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_SwitchingDelay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_SwitchingDelay(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_SwitchingDelay) ENABLED START -----*/

    m_libera->UpdateScalar(attr_SwitchingDelay_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_SwitchingDelay
}
//--------------------------------------------------------
/**
 *	Read attribute OffsetTune related method
 *	Description: Sets the offset tune value, 1 unit is approximately 40 Hz. 
 *               Default value is 0 (precisely tuned).
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_OffsetTune(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_OffsetTune(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_OffsetTune) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_OffsetTune_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_OffsetTune
}
//--------------------------------------------------------
/**
 *	Write attribute OffsetTune related method
 *	Description: Sets the offset tune value, 1 unit is approximately 40 Hz. 
 *               Default value is 0 (precisely tuned).
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_OffsetTune(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_OffsetTune(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_OffsetTune) ENABLED START -----*/

    m_libera->UpdateScalar(attr_OffsetTune_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_OffsetTune
}
//--------------------------------------------------------
/**
 *	Read attribute CompensateTune related method
 *	Description: To enable double offset-tune, issue the following command 
 *               (to disable it, just use ?false? instead of ?true?).
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_CompensateTune(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_CompensateTune(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_CompensateTune) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_CompensateTune_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_CompensateTune
}
//--------------------------------------------------------
/**
 *	Write attribute CompensateTune related method
 *	Description: To enable double offset-tune, issue the following command 
 *               (to disable it, just use ?false? instead of ?true?).
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_CompensateTune(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_CompensateTune(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_CompensateTune) ENABLED START -----*/

    m_libera->UpdateScalar(attr_CompensateTune_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_CompensateTune
}
//--------------------------------------------------------
/**
 *	Read attribute DSCMode related method
 *	Description: Sets the adjustment (learning) of the amplitude and 
 *               phase coefficients true or false. Set the 
 *               coefficients' type ? adjusted or unity. Combination of 
 *               these two nodes is necessary to achieve backward 
 *               compatiblity.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DSCMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DSCMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DSCMode) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_DSCMode_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DSCMode
}
//--------------------------------------------------------
/**
 *	Write attribute DSCMode related method
 *	Description: Sets the adjustment (learning) of the amplitude and 
 *               phase coefficients true or false. Set the 
 *               coefficients' type ? adjusted or unity. Combination of 
 *               these two nodes is necessary to achieve backward 
 *               compatiblity.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_DSCMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_DSCMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_DSCMode) ENABLED START -----*/

     m_libera->UpdateScalar(attr_DSCMode_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_DSCMode
}
//--------------------------------------------------------
/**
 *	Read attribute AGCEnabled related method
 *	Description: Enables/disables the Automatic Gain Control
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_AGCEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_AGCEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_AGCEnabled) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_AGCEnabled_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_AGCEnabled
}
//--------------------------------------------------------
/**
 *	Write attribute AGCEnabled related method
 *	Description: Enables/disables the Automatic Gain Control
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_AGCEnabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_AGCEnabled(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_AGCEnabled) ENABLED START -----*/

    m_libera->UpdateScalar(attr_AGCEnabled_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_AGCEnabled
}
//--------------------------------------------------------
/**
 *	Read attribute Gain related method
 *	Description: Sets the power_level. Attenuation at chosen level 
 *               depends on the gain scheme configuration. AGC 
 *               must be disabled to use manual Gain setting.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Gain(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Gain(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Gain) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_Gain_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Gain
}
//--------------------------------------------------------
/**
 *	Write attribute Gain related method
 *	Description: Sets the power_level. Attenuation at chosen level 
 *               depends on the gain scheme configuration. AGC 
 *               must be disabled to use manual Gain setting.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_Gain(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_Gain(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_Gain) ENABLED START -----*/

    m_libera->UpdateScalar(attr_Gain_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_Gain
}
//--------------------------------------------------------
/**
 *	Read attribute HasMAFSupport related method
 *	Description: <true> if FGPA design with MAF support installed on Libera, <false> otherwise
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_HasMAFSupport(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_HasMAFSupport(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_HasMAFSupport) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_HasMAFSupport_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_HasMAFSupport
}
//--------------------------------------------------------
/**
 *	Read attribute MAFLength related method
 *	Description: MAF Delay and MAF Length are two\nparameters, added to adjustable\nDDC design. They are used to\ndetermine the position and the length\nof the acquisition window according\nto the partial fill of the accelerator.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_MAFLength(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_MAFLength(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_MAFLength) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_MAFLength_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_MAFLength
}
//--------------------------------------------------------
/**
 *	Write attribute MAFLength related method
 *	Description: MAF Delay and MAF Length are two\nparameters, added to adjustable\nDDC design. They are used to\ndetermine the position and the length\nof the acquisition window according\nto the partial fill of the accelerator.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_MAFLength(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_MAFLength(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_MAFLength) ENABLED START -----*/
    
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_MAFLength
}
//--------------------------------------------------------
/**
 *	Read attribute MAFDelay related method
 *	Description: MAF Delay and MAF Length are two\nparameters, added to adjustable\nDDC design. They are used to\ndetermine the position and the length\nof the acquisition window according\nto the partial fill of the accelerator.\n
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_MAFDelay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_MAFDelay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_MAFDelay) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_MAFDelay_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_MAFDelay
}
//--------------------------------------------------------
/**
 *	Write attribute MAFDelay related method
 *	Description: MAF Delay and MAF Length are two\nparameters, added to adjustable\nDDC design. They are used to\ndetermine the position and the length\nof the acquisition window according\nto the partial fill of the accelerator.\n
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_MAFDelay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_MAFDelay(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_MAFDelay) ENABLED START -----*/
    
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_MAFDelay
}
//--------------------------------------------------------
/**
 *	Read attribute MachineTime related method
 *	Description: Machine Time value to be applied on the Libera when the SetTimeOnNextTrigger command is executed
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_MachineTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_MachineTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_MachineTime) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_MachineTime_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_MachineTime
}
//--------------------------------------------------------
/**
 *	Write attribute MachineTime related method
 *	Description: Machine Time value to be applied on the Libera when the SetTimeOnNextTrigger command is executed
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_MachineTime(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_MachineTime(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_MachineTime) ENABLED START -----*/

    m_libera->UpdateScalar(attr_MachineTime_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_MachineTime
}
//--------------------------------------------------------
/**
 *	Read attribute TimePhase related method
 *	Description: The Machine Time Phase
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_TimePhase(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_TimePhase(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_TimePhase) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_TimePhase_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_TimePhase
}
//--------------------------------------------------------
/**
 *	Write attribute TimePhase related method
 *	Description: The Machine Time Phase
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_TimePhase(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_TimePhase(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_TimePhase) ENABLED START -----*/

    m_libera->UpdateScalar(attr_TimePhase_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_TimePhase
}
//--------------------------------------------------------
/**
 *	Read attribute SystemTime related method
 *	Description: System Time value to be applied on the Libera when the SetTimeOnNextTrigger command is executed\nUnit is num of secs since 1/1/1970 (Unix system time reference)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SystemTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SystemTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SystemTime) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_SystemTime_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SystemTime
}
//--------------------------------------------------------
/**
 *	Write attribute SystemTime related method
 *	Description: System Time value to be applied on the Libera when the SetTimeOnNextTrigger command is executed\nUnit is num of secs since 1/1/1970 (Unix system time reference)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_SystemTime(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_SystemTime(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_SystemTime) ENABLED START -----*/
    
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_SystemTime
}
//--------------------------------------------------------
/**
 *	Read attribute SCPLLStatus related method
 *	Description: The SC PLL lock status
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SCPLLStatus(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SCPLLStatus(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SCPLLStatus) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_SCPLLStatus_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SCPLLStatus
}
//--------------------------------------------------------
/**
 *	Read attribute MCPLLStatus related method
 *	Description: Indicates the MC PLL status (1=locked, 0=unlocked)
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_MCPLLStatus(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_MCPLLStatus(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_MCPLLStatus) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_MCPLLStatus_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_MCPLLStatus
}
//--------------------------------------------------------
/**
 *	Read attribute Temp1 related method
 *	Description: Temperature of the hottest component on the BPM 
 *               module is returned.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Temp1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Temp1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Temp1) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_Temp1_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Temp1
}
//--------------------------------------------------------
/**
 *	Read attribute Temp2 related method
 *	Description: Temperature of the hottest component on the chassis 
 *               interconnection board is returned.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Temp2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Temp2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Temp2) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_Temp2_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Temp2
}
//--------------------------------------------------------
/**
 *	Read attribute Temp3 related method
 *	Description: Temperature of the hottest component on the timing 
 *               module is returned.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Temp3(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Temp3(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Temp3) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_Temp3_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Temp3
}
//--------------------------------------------------------
/**
 *	Read attribute Fan1Speed related method
 *	Description: Provides minimal fan speed reading of all three fans on 
 *               the left side of the chassis in order to identify if the fan 
 *               module (consisting of 3 fans) is broken ? returned value 
 *               0 means that at least one fan has stopped.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Fan1Speed(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Fan1Speed(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Fan1Speed) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_Fan1Speed_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Fan1Speed
}
//--------------------------------------------------------
/**
 *	Read attribute Fan2Speed related method
 *	Description: Provides minimal fan speed reading of all three fans on 
 *               the right side of the chassis in order to identify if the fan 
 *               module (consisting of 3 fans) is broken ? returned value 
 *               0 means that at least one fan has stopped.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Fan2Speed(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Fan2Speed(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Fan2Speed) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_Fan2Speed_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Fan2Speed
}
//--------------------------------------------------------
/**
 *	Read attribute Incoherence related method
 *	Description: Result of the incoherence calculation. Am alarm will be set \non the attribute when an incoherence was detected.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Incoherence(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Incoherence(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Incoherence) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_Incoherence_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Incoherence
}
//--------------------------------------------------------
/**
 *	Read attribute RefIncoherence related method
 *	Description: The reference incoherence value registered with the command \nSetReferenceIncoherence. The reference is used to calculate the\nalarm with the MaxIncoherenceDrift.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_RefIncoherence(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_RefIncoherence(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_RefIncoherence) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_RefIncoherence_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_RefIncoherence
}
//--------------------------------------------------------
/**
 *	Read attribute MaxIncoherence related method
 *	Description: Maximum incoherence value. Used to create an alarm on\nthe Incoherence attribute.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_MaxIncoherence(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_MaxIncoherence(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_MaxIncoherence) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_MaxIncoherence_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_MaxIncoherence
}
//--------------------------------------------------------
/**
 *	Write attribute MaxIncoherence related method
 *	Description: Maximum incoherence value. Used to create an alarm on\nthe Incoherence attribute.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_MaxIncoherence(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_MaxIncoherence(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_MaxIncoherence) ENABLED START -----*/
    
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_MaxIncoherence
}
//--------------------------------------------------------
/**
 *	Read attribute MaxIncoherenceDrift related method
 *	Description: Maximum incoherence drift value. Used to create an alarm on\nthe Incoherence attribute.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_MaxIncoherenceDrift(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_MaxIncoherenceDrift(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_MaxIncoherenceDrift) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_MaxIncoherenceDrift_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_MaxIncoherenceDrift
}
//--------------------------------------------------------
/**
 *	Write attribute MaxIncoherenceDrift related method
 *	Description: Maximum incoherence drift value. Used to create an alarm on\nthe Incoherence attribute.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_MaxIncoherenceDrift(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_MaxIncoherenceDrift(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_MaxIncoherenceDrift) ENABLED START -----*/
    
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_MaxIncoherenceDrift
}
//--------------------------------------------------------
/**
 *	Read attribute UpTime related method
 *	Description: Number of seconds since system boot on the host running this TANGO device
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_UpTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_UpTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_UpTime) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_UpTime_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_UpTime
}
//--------------------------------------------------------
/**
 *	Read attribute CpuUsage related method
 *	Description: CPU usage on the host running this TANGO device
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_CpuUsage(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_CpuUsage(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_CpuUsage) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_CpuUsage_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_CpuUsage
}
//--------------------------------------------------------
/**
 *	Read attribute FreeMemory related method
 *	Description: Amount of free memory on the host running this TANGO device
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_FreeMemory(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_FreeMemory(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_FreeMemory) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_FreeMemory_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_FreeMemory
}
//--------------------------------------------------------
/**
 *	Read attribute RamFsUsage related method
 *	Description: Amount of ram-fs allocated bytes on the host running this TANGO device 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_RamFsUsage(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_RamFsUsage(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_RamFsUsage) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_RamFsUsage_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_RamFsUsage
}
//--------------------------------------------------------
/**
 *	Read attribute UseLiberaSAData related method
 *	Description: If set to true, the X & Z SA postions are retreived from the Libera FPGA.\nOtherwise, they are computed by the Tango device using the button values.\n 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_UseLiberaSAData(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_UseLiberaSAData(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_UseLiberaSAData) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_UseLiberaSAData_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_UseLiberaSAData
}
//--------------------------------------------------------
/**
 *	Write attribute UseLiberaSAData related method
 *	Description: If set to true, the X & Z SA postions are retreived from the Libera FPGA.\nOtherwise, they are computed by the Tango device using the button values.\n 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_UseLiberaSAData(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_UseLiberaSAData(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_UseLiberaSAData) ENABLED START -----*/
    
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_UseLiberaSAData
}
//--------------------------------------------------------
/**
 *	Read attribute InterlockEnabled related method
 *	Description: Enables / disables the Interlock detection.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockEnabled) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_InterlockEnabled_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockEnabled
}
//--------------------------------------------------------
/**
 *	Write attribute InterlockEnabled related method
 *	Description: Enables / disables the Interlock detection.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_InterlockEnabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_InterlockEnabled(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_InterlockEnabled) ENABLED START -----*/

    m_libera->UpdateScalar(attr_InterlockEnabled_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_InterlockEnabled
}
//--------------------------------------------------------
/**
 *	Read attribute InterlockGainDependentEnabled related method
 *	Description: Enables / disables gain dependent mode of Interlock operation.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockGainDependentEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockGainDependentEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockGainDependentEnabled) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_InterlockGainDependentEnabled_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockGainDependentEnabled
}
//--------------------------------------------------------
/**
 *	Write attribute InterlockGainDependentEnabled related method
 *	Description: Enables / disables gain dependent mode of Interlock operation.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_InterlockGainDependentEnabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_InterlockGainDependentEnabled(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_InterlockGainDependentEnabled) ENABLED START -----*/

    m_libera->UpdateScalar(attr_InterlockGainDependentEnabled_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_InterlockGainDependentEnabled
}
//--------------------------------------------------------
/**
 *	Read attribute InterlockOverflowThreshold related method
 *	Description: ADC saturation threshold.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockOverflowThreshold(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockOverflowThreshold(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockOverflowThreshold) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_InterlockOverflowThreshold_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockOverflowThreshold
}
//--------------------------------------------------------
/**
 *	Write attribute InterlockOverflowThreshold related method
 *	Description: ADC saturation threshold.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_InterlockOverflowThreshold(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_InterlockOverflowThreshold(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_InterlockOverflowThreshold) ENABLED START -----*/

    m_libera->UpdateScalar(attr_InterlockOverflowThreshold_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_InterlockOverflowThreshold
}
//--------------------------------------------------------
/**
 *	Read attribute InterlockOverflowDuration related method
 *	Description: Duration of allowed ADC saturation (in ADC samples).
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockOverflowDuration(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockOverflowDuration(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockOverflowDuration) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_InterlockOverflowDuration_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockOverflowDuration
}
//--------------------------------------------------------
/**
 *	Write attribute InterlockOverflowDuration related method
 *	Description: Duration of allowed ADC saturation (in ADC samples).
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_InterlockOverflowDuration(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_InterlockOverflowDuration(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_InterlockOverflowDuration) ENABLED START -----*/

    m_libera->UpdateScalar(attr_InterlockOverflowDuration_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_InterlockOverflowDuration
}
//--------------------------------------------------------
/**
 *	Read attribute InterlockGainDependentThreshold related method
 *	Description: Sets the threshold for gain dependent mode of Interlock 
 *               operation.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockGainDependentThreshold(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockGainDependentThreshold(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockGainDependentThreshold) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_InterlockGainDependentThreshold_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockGainDependentThreshold
}
//--------------------------------------------------------
/**
 *	Write attribute InterlockGainDependentThreshold related method
 *	Description: Sets the threshold for gain dependent mode of Interlock 
 *               operation.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_InterlockGainDependentThreshold(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_InterlockGainDependentThreshold(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_InterlockGainDependentThreshold) ENABLED START -----*/

    m_libera->UpdateScalar(attr_InterlockGainDependentThreshold_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_InterlockGainDependentThreshold
}
//--------------------------------------------------------
/**
 *	Read attribute Kx related method
 *	Description: Sets the Kx for X position calculation. Default setting is 10 mm 
 *               (=10000000 nm).
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Kx(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Kx(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Kx) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_Kx_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Kx
}
//--------------------------------------------------------
/**
 *	Write attribute Kx related method
 *	Description: Sets the Kx for X position calculation. Default setting is 10 mm 
 *               (=10000000 nm).
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_Kx(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_Kx(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_Kx) ENABLED START -----*/

    m_libera->UpdateScalar(attr_Kx_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_Kx
}
//--------------------------------------------------------
/**
 *	Read attribute Ky related method
 *	Description: Sets the Ky for Y position calculation. Default setting is 10 mm 
 *               (=10000000 nm).
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Ky(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Ky(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Ky) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_Ky_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Ky
}
//--------------------------------------------------------
/**
 *	Write attribute Ky related method
 *	Description: Sets the Ky for Y position calculation. Default setting is 10 mm 
 *               (=10000000 nm).
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_Ky(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_Ky(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_Ky) ENABLED START -----*/
    
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_Ky
}
//--------------------------------------------------------
/**
 *	Read attribute XOffset related method
 *	Description: Sets the offset for X position in nm. Default value is 0 nm.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XOffset(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XOffset(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XOffset) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_XOffset_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XOffset
}
//--------------------------------------------------------
/**
 *	Write attribute XOffset related method
 *	Description: Sets the offset for X position in nm. Default value is 0 nm.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_XOffset(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_XOffset(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_XOffset) ENABLED START -----*/

    m_libera->UpdateScalar(attr_XOffset_read, w_val);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_XOffset
}
//--------------------------------------------------------
/**
 *	Read attribute YOffset related method
 *	Description: Sets the offset for Y position in nm. Default value is 0 nm.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_YOffset(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_YOffset(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_YOffset) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_YOffset_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_YOffset
}
//--------------------------------------------------------
/**
 *	Write attribute YOffset related method
 *	Description: Sets the offset for Y position in nm. Default value is 0 nm.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_YOffset(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_YOffset(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_YOffset) ENABLED START -----*/

    m_libera->UpdateScalar(attr_YOffset_read, w_val);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_YOffset
}
//--------------------------------------------------------
/**
 *	Read attribute XPosSP related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XPosSP(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XPosSP(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XPosSP) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_XPosSP_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XPosSP
}
//--------------------------------------------------------
/**
 *	Read attribute YPosSP related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_YPosSP(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_YPosSP(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_YPosSP) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_YPosSP_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_YPosSP
}
//--------------------------------------------------------
/**
 *	Read attribute SumSP related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SumSP(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SumSP(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SumSP) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_SumSP_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SumSP
}
//--------------------------------------------------------
/**
 *	Read attribute SPEnabled related method
 *	Description: SP data source activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SPEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SPEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SPEnabled) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_SPEnabled_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SPEnabled
}
//--------------------------------------------------------
/**
 *	Write attribute SPEnabled related method
 *	Description: SP data source activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_SPEnabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_SPEnabled(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_SPEnabled) ENABLED START -----*/
     w_val ? enable_sp() : disable_sp();
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_SPEnabled
}
//--------------------------------------------------------
/**
 *	Read attribute SPThreshold related method
 *	Description: Single Pass threshold.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SPThreshold(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SPThreshold(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SPThreshold) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_SPThreshold_read);
    
	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SPThreshold
}
//--------------------------------------------------------
/**
 *	Write attribute SPThreshold related method
 *	Description: Single Pass threshold.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_SPThreshold(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_SPThreshold(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_SPThreshold) ENABLED START -----*/
    m_libera->UpdateScalar(attr_SPThreshold_read, w_val);
	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_SPThreshold
}
//--------------------------------------------------------
/**
 *	Read attribute VaSP related method
 *	Description: Single Pass : Va
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VaSP(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VaSP(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VaSP) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_VaSP_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VaSP
}
//--------------------------------------------------------
/**
 *	Read attribute VbSP related method
 *	Description: Single Pass : Vb
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VbSP(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VbSP(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VbSP) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_VbSP_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VbSP
}
//--------------------------------------------------------
/**
 *	Read attribute VcSP related method
 *	Description: Single Pass : Vc
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VcSP(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VcSP(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VcSP) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_VcSP_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VcSP
}
//--------------------------------------------------------
/**
 *	Read attribute VdSP related method
 *	Description: Single Pass : Vd
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VdSP(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VdSP(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VdSP) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_VdSP_read);
    
	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VdSP
}
//--------------------------------------------------------
/**
 *	Read attribute XPosDD related method
 *	Description: Turn by turn data: X Pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XPosDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XPosDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XPosDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_XPosDD_read, *attr_DDBufferSize_read);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XPosDD
}
//--------------------------------------------------------
/**
 *	Read attribute YPosDD related method
 *	Description: Turn by turn data: Y Pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_YPosDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_YPosDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_YPosDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_YPosDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_YPosDD
}
//--------------------------------------------------------
/**
 *	Read attribute QuadDD related method
 *	Description: Turn by turn data: Quad
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_QuadDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_QuadDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_QuadDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_QuadDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_QuadDD
}
//--------------------------------------------------------
/**
 *	Read attribute SumDD related method
 *	Description: Turn by turn data: Sum
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SumDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SumDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SumDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_SumDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SumDD
}
//--------------------------------------------------------
/**
 *	Read attribute VaDD related method
 *	Description: Turn by turn data: Va
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VaDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VaDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VaDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_VaDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VaDD
}
//--------------------------------------------------------
/**
 *	Read attribute VbDD related method
 *	Description: Turn by turn data: Vb
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VbDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VbDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VbDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_VbDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VbDD
}
//--------------------------------------------------------
/**
 *	Read attribute VcDD related method
 *	Description: Turn by turn data: Vc
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VcDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VcDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VcDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_VcDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VcDD
}
//--------------------------------------------------------
/**
 *	Read attribute VdDD related method
 *	Description: Turn by turn data: Vd
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VdDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VdDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VdDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_VdDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VdDD
}
//--------------------------------------------------------
/**
 *	Read attribute XPosSAHistory related method
 *	Description: Slow Acquisition: X scrolling window of last NumSamples 
 *               (512) sa samples
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XPosSAHistory(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XPosSAHistory(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XPosSAHistory) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_XPosSAHistory_read, *attr_SAStatNumSamples_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XPosSAHistory
}
//--------------------------------------------------------
/**
 *	Read attribute YPosSAHistory related method
 *	Description: Slow Acquisition: Y scrolling window of last NumSamples 
 *               (512) sa samples
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_YPosSAHistory(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_YPosSAHistory(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_YPosSAHistory) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_YPosSAHistory_read, *attr_SAStatNumSamples_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_YPosSAHistory
}
//--------------------------------------------------------
/**
 *	Read attribute SumSAHistory related method
 *	Description: Slow Acquisition: Sum scrolling window of last 
 *               NumSamples (512) sa samples
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SumSAHistory(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SumSAHistory(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SumSAHistory) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_SumSAHistory_read, *attr_SAStatNumSamples_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SumSAHistory
}
//--------------------------------------------------------
/**
 *	Read attribute XPosPM related method
 *	Description: Post Mortem : X pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XPosPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XPosPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XPosPM) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_XPosPM_read, *attr_ADCBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XPosPM
}
//--------------------------------------------------------
/**
 *	Read attribute YPosPM related method
 *	Description: Post Mortem : Y pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_YPosPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_YPosPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_YPosPM) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_YPosPM_read, *attr_ADCBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_YPosPM
}
//--------------------------------------------------------
/**
 *	Read attribute QuadPM related method
 *	Description: Post Mortem : Quad
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_QuadPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_QuadPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_QuadPM) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_QuadPM_read, *attr_ADCBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_QuadPM
}
//--------------------------------------------------------
/**
 *	Read attribute SumPM related method
 *	Description: Post Mortem : Sum
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SumPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SumPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SumPM) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_SumPM_read, *attr_ADCBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SumPM
}
//--------------------------------------------------------
/**
 *	Read attribute VaPM related method
 *	Description: Post Mortem : Va
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VaPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VaPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VaPM) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_VaPM_read, *attr_ADCBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VaPM
}
//--------------------------------------------------------
/**
 *	Read attribute VbPM related method
 *	Description: Post Mortem : Vb
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VbPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VbPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VbPM) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_VbPM_read, *attr_ADCBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VbPM
}
//--------------------------------------------------------
/**
 *	Read attribute VcPM related method
 *	Description: Post Mortem : Vc
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VcPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VcPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VcPM) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_VcPM_read, *attr_ADCBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VcPM
}
//--------------------------------------------------------
/**
 *	Read attribute VdPM related method
 *	Description: Post Mortem : Vd
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VdPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VdPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VdPM) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_VdPM_read, *attr_ADCBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VdPM
}
//--------------------------------------------------------
/**
 *	Read attribute ADCChannelA related method
 *	Description: ADC values for pickup A
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ADCChannelA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ADCChannelA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ADCChannelA) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_ADCChannelA_read, *attr_ADCBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ADCChannelA
}
//--------------------------------------------------------
/**
 *	Read attribute ADCChannelB related method
 *	Description: ADC values for pickup B
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ADCChannelB(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ADCChannelB(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ADCChannelB) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_ADCChannelB_read, *attr_ADCBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ADCChannelB
}
//--------------------------------------------------------
/**
 *	Read attribute ADCChannelC related method
 *	Description: ADC values for pickup C
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ADCChannelC(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ADCChannelC(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ADCChannelC) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_ADCChannelC_read, *attr_ADCBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ADCChannelC
}
//--------------------------------------------------------
/**
 *	Read attribute ADCChannelD related method
 *	Description: ADC values for pickup D
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ADCChannelD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ADCChannelD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ADCChannelD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_ADCChannelD_read, *attr_ADCBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ADCChannelD
}
//--------------------------------------------------------
/**
 *	Read attribute IaDD related method
 *	Description: Turn by turn data: Ia
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_IaDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_IaDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_IaDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_IaDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_IaDD
}
//--------------------------------------------------------
/**
 *	Read attribute IbDD related method
 *	Description: Turn by turn data: Ib
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_IbDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_IbDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_IbDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_IbDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_IbDD
}
//--------------------------------------------------------
/**
 *	Read attribute IcDD related method
 *	Description: Turn by turn data: Ic
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_IcDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_IcDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_IcDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_IcDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_IcDD
}
//--------------------------------------------------------
/**
 *	Read attribute IdDD related method
 *	Description: Turn by turn data: Id
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_IdDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_IdDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_IdDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_IdDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_IdDD
}
//--------------------------------------------------------
/**
 *	Read attribute QaDD related method
 *	Description: Turn by turn data: Qa
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_QaDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_QaDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_QaDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_QaDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_QaDD
}
//--------------------------------------------------------
/**
 *	Read attribute QbDD related method
 *	Description: Turn by turn data: Qb
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_QbDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_QbDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_QbDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_QbDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_QbDD
}
//--------------------------------------------------------
/**
 *	Read attribute QcDD related method
 *	Description: Turn by turn data: Qc
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_QcDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_QcDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_QcDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_QcDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_QcDD
}
//--------------------------------------------------------
/**
 *	Read attribute QdDD related method
 *	Description: Turn by turn data: Qd
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_QdDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_QdDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_QdDD) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_QdDD_read, *attr_DDBufferSize_read);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_QdDD
}
//--------------------------------------------------------
/**
 *	Read attribute UserData related method
 *	Description: User defined data
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 256
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_UserData(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_UserData(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_UserData) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_UserData_read, 256);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_UserData
}
//--------------------------------------------------------
/**
 *	Read attribute logs related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 2048
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_logs(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_logs(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_logs) ENABLED START -----*/
    //  Set the attribute value
    attr.set_value(attr_logs_read, 2048);
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_logs
}

//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::add_dynamic_attributes) ENABLED START -----*/
    
    //  Add your own code to create and add dynamic attributes if any
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 *	@returns State Code
 */
//--------------------------------------------------------
Tango::DevState LiberaBrilliancePlus::dev_state()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::dev_state) ENABLED START -----*/
    set_state(m_state);    // Give the state to Tango.; // replace by your own algorithm
    if (*attr_InterlockXNotified_read == true || *attr_InterlockYNotified_read == true ||
     *attr_InterlockAttnNotified_read == true || *attr_InterlockADCPreFilterNotified_read == true ||
        *attr_InterlockADCPostFilterNotified_read == true)
    {
        set_state(Tango::ALARM);
    }
    //  Add your own code
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::dev_state
	if (m_state!=Tango::ALARM)
		DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command Status related method
 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *
 *	@returns Status description
 */
//--------------------------------------------------------
Tango::ConstDevString LiberaBrilliancePlus::dev_status()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::Status()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::dev_status) ENABLED START -----*/
    //  Add your own code
    set_status(m_status);  
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::dev_status
	return DeviceImpl::dev_status();  // Return it.
}
//--------------------------------------------------------
/**
 *	Command GetParameters related method
 *	Description: Retruns the current gains and offsets (i.e. the parameters used for position computation)
 *
 *	@returns The BPM gain and offsets
 */
//--------------------------------------------------------
Tango::DevVarDoubleStringArray *LiberaBrilliancePlus::get_parameters()
{
	Tango::DevVarDoubleStringArray *argout;
	DEBUG_STREAM << "LiberaBrilliancePlus::GetParameters()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::get_parameters) ENABLED START -----*/
    
    //  Add your own code
    argout = new Tango::DevVarDoubleStringArray();
    argout->dvalue.length(0);
    argout->svalue.length(0);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::get_parameters
	return argout;
}
//--------------------------------------------------------
/**
 *	Command UnfreezeDDBuffer related method
 *	Description: Unfreezes the DD buffer
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::unfreeze_ddbuffer()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::UnfreezeDDBuffer()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::unfreeze_ddbuffer) ENABLED START -----*/
    
    //  Add your own code
    *attr_DDBufferFrozen_read = false;
    m_signalDdc->ClearUpdated();
    m_signalDdcRaw->ClearUpdated();

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::unfreeze_ddbuffer
}
//--------------------------------------------------------
/**
 *	Command EnableDDBufferFreezing related method
 *	Description: Enables the DD buffer freezing mechanism
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::enable_ddbuffer_freezing()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::EnableDDBufferFreezing()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::enable_ddbuffer_freezing) ENABLED START -----*/
    
    //  Add your own code
    *attr_DDBufferFreezingEnabled_read = true;

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::enable_ddbuffer_freezing
}
//--------------------------------------------------------
/**
 *	Command DisableDDBufferFreezing related method
 *	Description: Disables the DD buffer freezing mechanism
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::disable_ddbuffer_freezing()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::DisableDDBufferFreezing()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::disable_ddbuffer_freezing) ENABLED START -----*/
    
    //  Add your own code
    *attr_DDBufferFreezingEnabled_read = false;
    *attr_DDBufferFrozen_read = false;

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::disable_ddbuffer_freezing
}
//--------------------------------------------------------
/**
 *	Command EnableDD related method
 *	Description: Enables the so called "data on demand" (i.e. first turns) data source
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::enable_dd()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::EnableDD()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::enable_dd) ENABLED START -----*/
        if(m_libera != NULL)
 {
    //  Add your own code
    m_signalDdc->Enable();
    m_signalDdcRaw->Enable();
 }

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::enable_dd
}
//--------------------------------------------------------
/**
 *	Command DisableDD related method
 *	Description: Disables the so called "data on demand" (i.e. first turns) data source
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::disable_dd()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::DisableDD()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::disable_dd) ENABLED START -----*/
        if(m_libera != NULL)
 {
    //  Add your own code
    m_signalDdc->Disable();
    m_signalDdcRaw->Disable();
 }

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::disable_dd
}
//--------------------------------------------------------
/**
 *	Command EnableSA related method
 *	Description: Enables the so called "slow acquisition" data source
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::enable_sa()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::EnableSA()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::enable_sa) ENABLED START -----*/
    if(m_libera != NULL)
 {
    //  Add your own code
    m_signalSA->Enable();
 }

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::enable_sa
}
//--------------------------------------------------------
/**
 *	Command DisableSA related method
 *	Description: Disables the so called "slow acquisition" data source
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::disable_sa()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::DisableSA()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::disable_sa) ENABLED START -----*/
        if(m_libera != NULL)
 {
    //  Add your own code
    m_signalSA->Disable();
}
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::disable_sa
}
//--------------------------------------------------------
/**
 *	Command ResetPMNotification related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::reset_pmnotification()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::ResetPMNotification()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::reset_pmnotification) ENABLED START -----*/
    
    //  Add your own code
    m_libera->UpdateScalar(attr_PMNotified_read, false);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::reset_pmnotification
}
//--------------------------------------------------------
/**
 *	Command ResetInterlockNotification related method
 *	Description: Resets the interlock notification flags to false
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::reset_interlock_notification()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::ResetInterlockNotification()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::reset_interlock_notification) ENABLED START -----*/
    
    //  Add your own code
    m_libera->Execute(m_raf + "interlock.status.il_status.reset");

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::reset_interlock_notification
}
//--------------------------------------------------------
/**
 *	Command SetInterlockConfiguration related method
 *	Description: Change interlock configuration using the InterlockConfiguration class (or device) property.
 *               Only  modify  the interlock configuration, the remaining env. parameters remain unchanged.
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::set_interlock_configuration()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::SetInterlockConfiguration()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::set_interlock_configuration) ENABLED START -----*/
    
    //  Add your own code
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::set_interlock_configuration
}
//--------------------------------------------------------
/**
 *	Command EnableADC related method
 *	Description: Enables the so called ADC data source
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::enable_adc()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::EnableADC()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::enable_adc) ENABLED START -----*/
        if(m_libera != NULL)
 {
    //  Add your own code
    m_signalADC->Enable();
 }

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::enable_adc
}
//--------------------------------------------------------
/**
 *	Command DisableADC related method
 *	Description: Disables the so called ADC data source
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::disable_adc()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::DisableADC()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::disable_adc) ENABLED START -----*/
        if(m_libera != NULL)
 {
    //  Add your own code
    m_signalADC->Disable();
 }

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::disable_adc
}
//--------------------------------------------------------
/**
 *	Command SetTimeOnNextTrigger related method
 *	Description: Applies both machine et system time values on next trigger
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::set_time_on_next_trigger()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::SetTimeOnNextTrigger()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::set_time_on_next_trigger) ENABLED START -----*/
    
    //  Add your own code
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::set_time_on_next_trigger
}
//--------------------------------------------------------
/**
 *	Command ReadFAData related method
 *	Description: Statring from[offest] in FA data block, reads [size of elems] * [num of elems] bytes.
 *
 *	@param argin The reading parameters: [0]:offset in FA data block, [1]:size of elems, [2]:num of elems
 *	@returns The data [as an array of bytes]
 */
//--------------------------------------------------------
Tango::DevVarLongArray *LiberaBrilliancePlus::read_fadata(const Tango::DevVarLongArray *argin)
{
	Tango::DevVarLongArray *argout;
	DEBUG_STREAM << "LiberaBrilliancePlus::ReadFAData()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_fadata) ENABLED START -----*/
    
    //  Add your own code
    argout = new Tango::DevVarLongArray();
    argout->length(0);

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_fadata
	return argout;
}
//--------------------------------------------------------
/**
 *	Command WriteFAData related method
 *	Description: Starting from [offset] in Fa data block, writes [size of elems * num of elems].
 *               The actual data to be written starts at index [4] in the input array.
 *
 *	@param argin The writting parameters: [0]:offset in FA data block, bytes[1]:size of elems, [2]:num of elems, [3, ...]: actual to data to be written
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_fadata(const Tango::DevVarLongArray *argin)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::WriteFAData()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_fadata) ENABLED START -----*/
    
    //  Add your own code
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_fadata
}
//--------------------------------------------------------
/**
 *	Command SaveDSCParameters related method
 *	Description: Saves the current DSC parameters
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::save_dscparameters()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::SaveDSCParameters()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::save_dscparameters) ENABLED START -----*/
        if(m_libera != NULL)
 {
    //  Add your own code
    m_libera->Execute(m_raf + "conditioning.tuning.dsc.coefficients.store");
 }

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::save_dscparameters
}
//--------------------------------------------------------
/**
 *	Command ReloadSystemProperties related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::reload_system_properties()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::ReloadSystemProperties()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::reload_system_properties) ENABLED START -----*/
    
    //  Add your own code
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::reload_system_properties
}
//--------------------------------------------------------
/**
 *	Command SetRefIncoherence related method
 *	Description: Set the actual incoherence value as refeference value for the drift alarm calculation.
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::set_ref_incoherence()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::SetRefIncoherence()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::set_ref_incoherence) ENABLED START -----*/
    
    //  Add your own code
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::set_ref_incoherence
}
//--------------------------------------------------------
/**
 *	Command MagicCommand related method
 *	Description: Directly dump the Libera ireg node structure. If the input argument is a sub tree all subnodes will be dumped out.
 *
 *	@param argin absolute path of the node name
 *	@returns value of specified node(s)
 */
//--------------------------------------------------------
Tango::DevVarStringArray *LiberaBrilliancePlus::magic_command(Tango::DevString argin)
{
	Tango::DevVarStringArray *argout;
	DEBUG_STREAM << "LiberaBrilliancePlus::MagicCommand()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::magic_command) ENABLED START -----*/
    
    //  Add your own code

    argout = new Tango::DevVarStringArray(1);
    argout->length(1);

    if (!m_libera->MagicCommand(argin, argout)) {
        INFO_STREAM << "magic_command() faled!" << endl;
    }

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::magic_command
	return argout;
}
//--------------------------------------------------------
/**
 *	Command EnableSP related method
 *	Description: Enables the so called ``Single Pass`` data source
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::enable_sp()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::EnableSP()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::enable_sp) ENABLED START -----*/
    
     if(m_libera != NULL)
 {
    //  Add your own code
    m_signalSPE->Enable();
}
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::enable_sp
}
//--------------------------------------------------------
/**
 *	Command DisableSP related method
 *	Description: Disables the so called ``Singel Pass`` data source
 *
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::disable_sp()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::DisableSP()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::disable_sp) ENABLED START -----*/
    
     if(m_libera != NULL)
 {
    //  Add your own code
    m_signalSPE->Disable();
}
    
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::disable_sp
}

/*----- PROTECTED REGION ID(LiberaBrilliancePlus::namespace_ending) ENABLED START -----*/

    //  Additional Methods
void LiberaBrilliancePlus::UpdatePM()
{
    INFO_STREAM << "NotifyPM: " << *(attr_PMNotified_read) << endl;
    if (*(attr_PMNotified_read)) {
        if (m_libera->IsConnected()) {
            INFO_STREAM << "update PM signal: " << *(attr_PMNotified_read) << endl;
            m_signalPM->Update();
            m_signalPM->GetData();
        }
        else {
            INFO_STREAM << "Not connected. Skip PM signal update." << endl;
        }
    }
}// //--------------------------------------------------------
// /**
//  *   Read Temp2 attribute
//  *   Description: The current Libera hardware temperature
//  *
//  *   Data type:  Tango::DevShort
//  *   Attr type:  Scalar
//  */
// //--------------------------------------------------------
// void LiberaBrilliancePlus::read_Temp2(Tango::Attribute &attr)
// {
//  DEBUG_STREAM << "LiberaBrilliancePlus::read_Temp2(Tango::Attribute &attr) entering... " << endl;
//  //  Set the attribute value
//  attr.set_value(attr_Temp2_read);
// }

// //--------------------------------------------------------
// /**
//  *   Read Temp3 attribute
//  *   Description: The current Libera hardware temperature
//  *
//  *   Data type:  Tango::DevShort
//  *   Attr type:  Scalar
//  */
// //--------------------------------------------------------
// void LiberaBrilliancePlus::read_Temp3(Tango::Attribute &attr)
// {
//  DEBUG_STREAM << "LiberaBrilliancePlus::read_Temp3(Tango::Attribute &attr) entering... " << endl;
//  //  Set the attribute value
//  attr.set_value(attr_Temp3_read);
// }

// //--------------------------------------------------------
// /**
//  *   Read InterlockConfiguration attribute
//  *   Description: The current interlock configuration. The vector mapping is the follwoing:\n[0] Mode : [0]: disabled, [1]: enabled, [3]: enabled with gain dependency\n[1] X low threshold in mm\n[2] X high threshold in mm\n[3] Z threshold low in mm \n[4] Z high threshold in mm\n[5] Overflow limit (ADC threshold)\n[6] Overflow duration (num of overloaded ADC samples before raising interlock)\n[7] Gain limit in dBm  (no interlock under this threshold)
//  *
//  *   Data type:  Tango::DevDouble
//  *   Attr type:  Spectrum  max = 8
//  */
// //--------------------------------------------------------
// void LiberaBrilliancePlus::read_InterlockConfiguration(Tango::Attribute &attr)
// {
//  DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockConfiguration(Tango::Attribute &attr) entering... " << endl;
//  //  Set the attribute value
//  attr.set_value(attr_InterlockConfiguration_read, 8);
// }

// //--------------------------------------------------------
// /**
//  *   Read InterlockGainDepandentEnabled attribute
//  *   Description: en/disable interlock gain depandance
//  *
//  *   Data type:  Tango::DevBoolean
//  *   Attr type:  Scalar
//  */
// //--------------------------------------------------------
// void LiberaBrilliancePlus::read_InterlockGainDependentEnabled(Tango::Attribute &attr)
// {
//  DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockGainDepandentEnabled(Tango::Attribute &attr) entering... " << endl;
//  //  Set the attribute value
//  attr.set_value(attr_InterlockGainDepandentEnabled_read);
//  //  Set the attribute value
//  attr.set_value(attr_InterlockGainDepandantEnabled_read);
// }

// //--------------------------------------------------------
// /**
//  *   Read InterlockInterlockGainDependentThresholdThreshold attribute
//  *   Description: maximum safe power level
//  *
//  *   Data type:  Tango::DevLong
//  *   Attr type:  Scalar
//  */
// //--------------------------------------------------------
// void LiberaBrilliancePlus::read_InterlockInterlockGainDependentThresholdThreshold(Tango::Attribute &attr)
// {
//  DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockInterlockGainDependentThresholdThreshold(Tango::Attribute &attr) entering... " << endl;
//  //  Set the attribute value
//  attr.set_value(attr_InterlockInterlockGainDependentThresholdThreshold_read);
// }

/*
 *      DD stream callback
 */
void LiberaBrilliancePlus::DDCallback()
{
    DEBUG_STREAM << "DD CALLBACK " << endl;
        m_signalDdc->GetData();
        m_signalDdcRaw->GetData();

        push_change_event("XPosDD", attr_XPosDD_read);
        push_change_event("YPosDD", attr_YPosDD_read);
        push_change_event("QuadDD", attr_QuadDD_read);
        push_change_event("SumDD", attr_SumDD_read);
}

/*
 * DDCallback static wrapper
 */
void LiberaBrilliancePlus::_DDCallback(void *data)
{
        LiberaBrilliancePlus *device = reinterpret_cast<LiberaBrilliancePlus *>(data);
        device->DDCallback();
}
/*
 *      SA stream callback
 */
void LiberaBrilliancePlus::SACallback()
{
    DEBUG_STREAM << "SA CALLBACK " << endl;
        m_signalSA->GetData();

        push_change_event("XPosSA", attr_XPosSA_read);
        push_change_event("YPosSA", attr_YPosSA_read);
        push_change_event("QuadSA", attr_QuadSA_read);
        push_change_event("SumSA", attr_SumSA_read);
}

/*
 * SACallback static wrapper
 */
void LiberaBrilliancePlus::_SACallback(void *data)
{
        LiberaBrilliancePlus *device = reinterpret_cast<LiberaBrilliancePlus *>(data);
        device->SACallback();
}
/*
 *      PM stream callback
 */
void LiberaBrilliancePlus::PMCallback()
{
    DEBUG_STREAM << "PM CALLBACK " << endl;
        m_signalPM->GetData();
        
        push_change_event("XPosPM", attr_XPosPM_read);
        push_change_event("YPosPM", attr_YPosPM_read);
        push_change_event("QuadPM", attr_QuadPM_read);
        push_change_event("SumPM", attr_SumPM_read);
}

/*
 * PMCallback static wrapper
 */
void LiberaBrilliancePlus::_PMCallback(void *data)
{
        LiberaBrilliancePlus *device = reinterpret_cast<LiberaBrilliancePlus *>(data);
        device->PMCallback();
}

/*
 *      SP stream callback
 */
void LiberaBrilliancePlus::SPCallback()
{
    DEBUG_STREAM << "SP CALLBACK " << endl;
        m_signalSPE->GetData();

        push_change_event("XPosSP", attr_XPosSP_read);
        push_change_event("YPosSP", attr_YPosSP_read);
        push_change_event("SumSP", attr_SumSP_read);
}

/*
 * SPCallback static wrapper
 */
void LiberaBrilliancePlus::_SPCallback(void *data)
{
        LiberaBrilliancePlus *device = reinterpret_cast<LiberaBrilliancePlus *>(data);
        device->SPCallback();
}
/*
 *      PM stream callback
 */
void LiberaBrilliancePlus::set_lib_error()
{
    m_state = Tango::OFF;
    m_status = "Error while reading from a node. Please reinit the device";
}
    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::namespace_ending
} //	namespace
