/*----- PROTECTED REGION ID(LiberaBrilliancePlus.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LiberaBrilliancePlus.cpp
//
// description : C++ source for the LiberaBrilliancePlus and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LiberaBrilliancePlus are implemented in this file.
//
// project :     Libera BPM Device Server.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <LiberaBrilliancePlus.h>
#include <LiberaBrilliancePlusClass.h>

#include "LiberaClient.h"

/*----- PROTECTED REGION END -----*/


/**
 *	LiberaBrilliancePlus class description:
 *	IT Libera BPM Device Server.
 *	The interface should be the same as for the Brillance model.
 */

//================================================================
//
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name                |  Method name
//----------------------------------------------------------------
//  State                       |  dev_state
//  Status                      |  dev_status
//  GetParameters               |  get_parameters
//  UnfreezeDDBuffer            |  unfreeze_ddbuffer
//  EnableDDBufferFreezing      |  enable_ddbuffer_freezing
//  DisableDDBufferFreezing     |  disable_ddbuffer_freezing
//  EnableDD                    |  enable_dd
//  DisableDD                   |  disable_dd
//  EnableSA                    |  enable_sa
//  DisableSA                   |  disable_sa
//  ResetPMNotification         |  reset_pmnotification
//  ResetInterlockNotification  |  reset_interlock_notification
//  SetInterlockConfiguration   |  set_interlock_configuration
//  EnableADC                   |  enable_adc
//  DisableADC                  |  disable_adc
//  SetTimeOnNextTrigger        |  set_time_on_next_trigger
//  ReadFAData                  |  read_fadata
//  WriteFAData                 |  write_fadata
//  SaveDSCParameters           |  save_dscparameters
//  ReloadSystemProperties      |  reload_system_properties
//  SetRefIncoherence           |  set_ref_incoherence
//  MagicCommand                |  magic_command
//================================================================

namespace LiberaBrilliancePlus_ns
{
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::namespace_starting) ENABLED START -----*/

	//	static initializations
Tango::DevUShort c_liberaModel(1); // BPM type
const std::string c_timingBoard("tim2"); // TODO: evrx2

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::namespace_starting



//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::LiberaBrilliancePlus()
 *	Description : Constructors for a Tango device
 *	              implementing the class LiberaBrilliancePlus
 */
//--------------------------------------------------------
LiberaBrilliancePlus::LiberaBrilliancePlus(Tango::DeviceClass *cl, string &s)
 	: Tango::Device_4Impl(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::constructor_1) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::constructor_1
}
//--------------------------------------------------------
LiberaBrilliancePlus::LiberaBrilliancePlus(Tango::DeviceClass *cl, const char *s)
 	: Tango::Device_4Impl(cl, s)
{
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::constructor_2) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::constructor_2
}
//--------------------------------------------------------
LiberaBrilliancePlus::LiberaBrilliancePlus(Tango::DeviceClass *cl, const char *s, const char *d)
 	: Tango::Device_4Impl(cl, s, d)
{
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::constructor_3) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::constructor_3
}


//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::delete_device()()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::delete_device()
{
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::delete_device) ENABLED START -----*/

	//	Delete device allocated objects
    if (m_libera) {
        m_libera->Disconnect();
        delete m_libera;
        m_libera = NULL;
    }

    /*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::delete_device
	
}


//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::init_device()
 *	Description : //	will be called at device initialization.
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::init_device()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::init_device() create device " << device_name << endl;

	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call
	attr_LiberaModel_read = &c_liberaModel;

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::init_device_before
	
	//	Get the device properties (if any) from database
	get_device_property();
	
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::init_device) ENABLED START -----*/


    m_raf = "boards." + liberaBoard + ".";
	std::string tim("boards." + c_timingBoard + ".");

	//	Initialize device
    m_libera = new LiberaClient(this);

    // Add scalar values
    m_libera->AddScalar("", attr_DDDecimationFactor_read); //n.a.
    m_libera->AddScalar("", attr_DDTriggerOffset_read); // no ireg node
    m_libera->AddScalar("", attr_DDBufferFreezingEnabled_read); //n.a.
    m_libera->AddScalar("", attr_DDBufferFrozen_read); //n.a.
    m_libera->AddScalar(tim + "events.t2.count",
        attr_DDTriggerCounter_read, LiberaAttr::ULL2LONG);
    m_libera->AddScalar("", attr_ExternalTriggerEnabled_read); // no ireg node
    m_libera->AddScalar(m_raf + "local_timing.trigger_delay",
        attr_ExternalTriggerDelay_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);

    //n.a.
    m_libera->AddScalar("", attr_CxSA_read);
    m_libera->AddScalar("", attr_CzSA_read);
    m_libera->AddScalar("", attr_SAStatNumSamples_read);
    m_libera->AddScalar("", attr_XMeanPosSA_read);
    m_libera->AddScalar("", attr_ZMeanPosSA_read);
    m_libera->AddScalar("", attr_XRMSPosSA_read);
    m_libera->AddScalar("", attr_ZRMSPosSA_read);
    m_libera->AddScalar("", attr_XPeakPosSA_read);
    m_libera->AddScalar("", attr_ZPeakPosSA_read);
    m_libera->AddScalar("", attr_SumMeanSA_read);

    m_libera->AddScalar(m_raf + "postmortem.offset", attr_PMOffset_read);
    m_libera->AddScalar(m_raf + "postmortem.capture",
        attr_PMNotified_read, LiberaAttr::NEGATE, LiberaAttr::NEGATE);
    m_libera->AddScalar(tim + "events.t1.count",
        attr_PMNotificationCounter_read, LiberaAttr::ULL2SHORT);

    m_libera->AddScalar(m_raf + "interlock.status.il_status.x",
        attr_InterlockXNotified_read);
    m_libera->AddScalar(m_raf + "interlock.status.il_status.y",
        attr_InterlockZNotified_read);
    m_libera->AddScalar(m_raf + "interlock.status.il_status.attenuator",
        attr_InterlockAttnNotified_read);
    m_libera->AddScalar(m_raf + "interlock.status.il_status.adc_overflow",
        attr_InterlockADCPreFilterNotified_read);
    m_libera->AddScalar(m_raf + "interlock.status.il_status.adc_overflow_filtered",
        attr_InterlockADCPostFilterNotified_read);

    m_libera->AddScalar(m_raf + "interlock.limits.position.min.x",
        attr_XLow_read, LiberaAttr::NM2MM);
    m_libera->AddScalar(m_raf + "interlock.limits.position.max.x",
        attr_XHigh_read, LiberaAttr::NM2MM);
    m_libera->AddScalar(m_raf + "interlock.limits.position.min.y",
        attr_ZLow_read, LiberaAttr::NM2MM);
    m_libera->AddScalar(m_raf + "interlock.limits.position.max.y",
        attr_ZHigh_read, LiberaAttr::NM2MM);

    m_libera->AddScalar(m_raf + "conditioning.switching", attr_AutoSwitchingEnabled_read);
    m_libera->AddScalar("", attr_Switches_read); // n.a.
    m_libera->AddScalar(m_raf + "conf.switching_source",
        attr_ExternalSwitching_read, LiberaAttr::ENUM2BOOL, LiberaAttr::BOOL2ENUM);
    m_libera->AddScalar(m_raf + "conf.switching_delay",
        attr_SwitchingDelay_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);

    m_libera->AddScalar(tim + "pll.vcxo_offset", attr_OffsetTune_read);
    m_libera->AddScalar(tim + "pll.compensate_offset", attr_CompensateTune_read);

    m_libera->AddScalar(m_raf + "conditioning.tuning.dsc.coefficients",
        attr_DSCMode_read, LiberaAttr::DSC2SHORT, LiberaAttr::SHORT2DSC);
    m_libera->AddScalar(m_raf + "conditioning.tuning.agc.enabled", attr_AGCEnabled_read);
    m_libera->AddScalar(m_raf + "conditioning.tuning.agc.power_level",
        attr_Gain_read, LiberaAttr::INT2DBL, LiberaAttr::DBL2INT);

    //n.a.
    m_libera->AddScalar("", attr_HasMAFSupport_read);
    m_libera->AddScalar("", attr_MAFLength_read);
    m_libera->AddScalar("", attr_MAFDelay_read);

    m_libera->AddScalar("", attr_MachineTime_read); //TODO: application.synchronize_lmt
    m_libera->AddScalar(m_raf + "tbt.phase_offset",
        attr_TimePhase_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);
    m_libera->AddScalar("", attr_SystemTime_read); // n.a.
    m_libera->AddScalar("", attr_SCPLLStatus_read); // n.a.
    m_libera->AddScalar(tim + "pll.locked", attr_MCPLLStatus_read);

    m_libera->AddScalarPM("boards." + liberaBoard + ".sensors.ID_2.value",
        attr_Temp1_read, LiberaAttr::DBL2SHORT);
    m_libera->AddScalarPM("boards.icb0.sensors.ID_1.value",
        attr_Temp2_read, LiberaAttr::DBL2SHORT);
    m_libera->AddScalarPM("boards." + c_timingBoard + ".sensors.ID_6.value",
        attr_Temp3_read, LiberaAttr::DBL2SHORT);
    m_libera->AddScalarPM("fans.left_", attr_Fan1Speed_read, LiberaAttr::FAN2SHORT);
    m_libera->AddScalarPM("fans.right_", attr_Fan2Speed_read, LiberaAttr::FAN2SHORT);

    //n.a.
    m_libera->AddScalar("", attr_Incoherence_read);
    m_libera->AddScalar("", attr_RefIncoherence_read);
    m_libera->AddScalar("", attr_MaxIncoherence_read);
    m_libera->AddScalar("", attr_MaxIncoherenceDrift_read);

    //n.a.
    m_libera->AddScalarPM("", attr_UpTime_read);
    m_libera->AddScalarPM("", attr_RamFsUsage_read);

    m_libera->AddScalarPM("boards.os.sensors",
        attr_CpuUsage_read, LiberaAttr::CPU2LONG);
    m_libera->AddScalarPM("boards.os.sensors",
        attr_FreeMemory_read, LiberaAttr::MEM2LONG);

    //n.a.
    m_libera->AddScalar("", attr_UseLiberaSAData_read);
    m_libera->AddScalar("", attr_XPosSAHistory_read);
    m_libera->AddScalar("", attr_ZPosSAHistory_read);
    m_libera->AddScalar("", attr_SumSAHistory_read);

    //n.a.
    m_libera->AddScalar("", attr_UserData_read);
    m_libera->AddScalar("", attr_InterlockConfiguration_read);

    m_libera->AddLogsRead(attr_logs_read, 2048);

    // Add signals
    m_signalDdc  = m_libera->AddSignal<Tango::DevDouble>(
        m_raf + "signals.ddc_synthetic",
        1000,
        attr_DDEnabled_read,
        attr_DDBufferSize_read,
        attr_VaDD_read,
        attr_VbDD_read,
        attr_VcDD_read,
        attr_VdDD_read,
        attr_SumDD_read,
        attr_QuadDD_read,
        attr_XPosDD_read,
        attr_ZPosDD_read);
    m_signalDdc->SetPeriod(500);

    m_signalSA  = m_libera->AddSignal<Tango::DevDouble>(
        m_raf + "signals.sa",
        1,
        attr_SAEnabled_read,
        attr_SABufferSize_read_added,
        attr_VaSA_read,
        attr_VbSA_read,
        attr_VcSA_read,
        attr_VdSA_read,
        attr_SumSA_read,
        attr_QuadSA_read,
        attr_XPosSA_read,
        attr_ZPosSA_read);
    m_signalSA->SetPeriod(500); // TODO: no wait period for stream

    m_signalPM  = m_libera->AddSignal<Tango::DevDouble>(
        m_raf + "postmortem.signals.ddc_synthetic",
        16384,
        attr_PMEnabled_read_added,
        attr_PMBufferSize_read_added,
        attr_VaPM_read,
        attr_VbPM_read,
        attr_VcPM_read,
        attr_VdPM_read,
        attr_SumPM_read,
        attr_QuadPM_read,
        attr_XPosPM_read,
        attr_ZPosPM_read);

    m_libera->SetNotifier(attr_PMNotified_read, &LiberaBrilliancePlus::UpdatePM);

    m_signalADC  = m_libera->AddSignal<Tango::DevShort>(
        m_raf + "signals.adc",
        1000,
        attr_ADCEnabled_read,
        attr_ADCBufferSize_read,
        attr_ADCChannelA_read,
        attr_ADCChannelB_read,
        attr_ADCChannelC_read,
        attr_ADCChannelD_read);
    m_signalADC->SetPeriod(500);

    m_signalDdcRaw  = m_libera->AddSignal<Tango::DevDouble>(
        m_raf + "signals.ddc_raw",
        1000,
        attr_DDEnabled_read_added,
        attr_DDBufferSize_read_added,
        attr_IaDD_read,
        attr_QaDD_read,
        attr_IbDD_read,
        attr_QbDD_read,
        attr_IcDD_read,
        attr_QcDD_read,
        attr_IdDD_read,
        attr_QdDD_read);
    m_signalDdcRaw->SetPeriod(500);

    if (m_libera->Connect()) {
        set_state(Tango::ON);
    }

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::init_device
}



//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::get_device_property()
 *	Description : //	Add your own code to initialize
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::get_device_property()
{
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members
    DEBUG_STREAM << "LiberaBrilliancePlus::get_device_property() get device properties " << device_name << endl;

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("LiberaIpAddr"));
	dev_prop.push_back(Tango::DbDatum("LiberaPort"));
	dev_prop.push_back(Tango::DbDatum("DefaultDDBufferSize"));
	dev_prop.push_back(Tango::DbDatum("Switches"));
	dev_prop.push_back(Tango::DbDatum("LiberaMulticastIpAddr"));
	dev_prop.push_back(Tango::DbDatum("Location"));
	dev_prop.push_back(Tango::DbDatum("EnableExternalTrigger"));
	dev_prop.push_back(Tango::DbDatum("DDTaskActivityPeriod"));
	dev_prop.push_back(Tango::DbDatum("SATaskActivityPeriod"));
	dev_prop.push_back(Tango::DbDatum("EnableDD"));
	dev_prop.push_back(Tango::DbDatum("EnableSA"));
	dev_prop.push_back(Tango::DbDatum("SAHistoryLength"));
	dev_prop.push_back(Tango::DbDatum("DDDecimationFactor"));
	dev_prop.push_back(Tango::DbDatum("EnableAutoSwitchingIfSAEnabled"));
	dev_prop.push_back(Tango::DbDatum("EnableDSCIfAutoSwitchingEnabled"));
	dev_prop.push_back(Tango::DbDatum("DefaultSAStatNumSamples"));
	dev_prop.push_back(Tango::DbDatum("DefaultADCBufferSize"));
	dev_prop.push_back(Tango::DbDatum("ADCTaskActivityPeriod"));
	dev_prop.push_back(Tango::DbDatum("EnableADC"));
	dev_prop.push_back(Tango::DbDatum("DefaultTimePhaseValue"));
	dev_prop.push_back(Tango::DbDatum("InterlockConfiguration"));
	dev_prop.push_back(Tango::DbDatum("EnableDDOptionalData"));
	dev_prop.push_back(Tango::DbDatum("EnableSAOptionalData"));
	dev_prop.push_back(Tango::DbDatum("EnableSAHistoryOptionalData"));
	dev_prop.push_back(Tango::DbDatum("EnableADCOptionalData"));
	dev_prop.push_back(Tango::DbDatum("Institute"));
	dev_prop.push_back(Tango::DbDatum("MaxDDBufferSizeWhenDecimationEnabled"));
	dev_prop.push_back(Tango::DbDatum("PassBBAOffsetsToFPGA"));
	dev_prop.push_back(Tango::DbDatum("FADataCacheRefreshPeriod"));
	dev_prop.push_back(Tango::DbDatum("LiberaBoard"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on LiberaBrilliancePlusClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		LiberaBrilliancePlusClass	*ds_class =
			(static_cast<LiberaBrilliancePlusClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize LiberaIpAddr from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaIpAddr;
		else {
			//	Try to initialize LiberaIpAddr from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaIpAddr;
		}
		//	And try to extract LiberaIpAddr value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaIpAddr;

		//	Try to initialize LiberaPort from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaPort;
		else {
			//	Try to initialize LiberaPort from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaPort;
		}
		//	And try to extract LiberaPort value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaPort;

		//	Try to initialize DefaultDDBufferSize from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  defaultDDBufferSize;
		else {
			//	Try to initialize DefaultDDBufferSize from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  defaultDDBufferSize;
		}
		//	And try to extract DefaultDDBufferSize value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  defaultDDBufferSize;

		//	Try to initialize Switches from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  switches;
		else {
			//	Try to initialize Switches from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  switches;
		}
		//	And try to extract Switches value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  switches;

		//	Try to initialize LiberaMulticastIpAddr from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaMulticastIpAddr;
		else {
			//	Try to initialize LiberaMulticastIpAddr from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaMulticastIpAddr;
		}
		//	And try to extract LiberaMulticastIpAddr value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaMulticastIpAddr;

		//	Try to initialize Location from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  location;
		else {
			//	Try to initialize Location from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  location;
		}
		//	And try to extract Location value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  location;

		//	Try to initialize EnableExternalTrigger from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableExternalTrigger;
		else {
			//	Try to initialize EnableExternalTrigger from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableExternalTrigger;
		}
		//	And try to extract EnableExternalTrigger value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableExternalTrigger;

		//	Try to initialize DDTaskActivityPeriod from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  dDTaskActivityPeriod;
		else {
			//	Try to initialize DDTaskActivityPeriod from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  dDTaskActivityPeriod;
		}
		//	And try to extract DDTaskActivityPeriod value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dDTaskActivityPeriod;

		//	Try to initialize SATaskActivityPeriod from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  sATaskActivityPeriod;
		else {
			//	Try to initialize SATaskActivityPeriod from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  sATaskActivityPeriod;
		}
		//	And try to extract SATaskActivityPeriod value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  sATaskActivityPeriod;

		//	Try to initialize EnableDD from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableDD;
		else {
			//	Try to initialize EnableDD from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableDD;
		}
		//	And try to extract EnableDD value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableDD;

		//	Try to initialize EnableSA from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableSA;
		else {
			//	Try to initialize EnableSA from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableSA;
		}
		//	And try to extract EnableSA value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableSA;

		//	Try to initialize SAHistoryLength from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  sAHistoryLength;
		else {
			//	Try to initialize SAHistoryLength from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  sAHistoryLength;
		}
		//	And try to extract SAHistoryLength value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  sAHistoryLength;

		//	Try to initialize DDDecimationFactor from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  dDDecimationFactor;
		else {
			//	Try to initialize DDDecimationFactor from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  dDDecimationFactor;
		}
		//	And try to extract DDDecimationFactor value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dDDecimationFactor;

		//	Try to initialize EnableAutoSwitchingIfSAEnabled from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableAutoSwitchingIfSAEnabled;
		else {
			//	Try to initialize EnableAutoSwitchingIfSAEnabled from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableAutoSwitchingIfSAEnabled;
		}
		//	And try to extract EnableAutoSwitchingIfSAEnabled value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableAutoSwitchingIfSAEnabled;

		//	Try to initialize EnableDSCIfAutoSwitchingEnabled from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableDSCIfAutoSwitchingEnabled;
		else {
			//	Try to initialize EnableDSCIfAutoSwitchingEnabled from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableDSCIfAutoSwitchingEnabled;
		}
		//	And try to extract EnableDSCIfAutoSwitchingEnabled value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableDSCIfAutoSwitchingEnabled;

		//	Try to initialize DefaultSAStatNumSamples from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  defaultSAStatNumSamples;
		else {
			//	Try to initialize DefaultSAStatNumSamples from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  defaultSAStatNumSamples;
		}
		//	And try to extract DefaultSAStatNumSamples value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  defaultSAStatNumSamples;

		//	Try to initialize DefaultADCBufferSize from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  defaultADCBufferSize;
		else {
			//	Try to initialize DefaultADCBufferSize from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  defaultADCBufferSize;
		}
		//	And try to extract DefaultADCBufferSize value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  defaultADCBufferSize;

		//	Try to initialize ADCTaskActivityPeriod from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  aDCTaskActivityPeriod;
		else {
			//	Try to initialize ADCTaskActivityPeriod from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  aDCTaskActivityPeriod;
		}
		//	And try to extract ADCTaskActivityPeriod value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  aDCTaskActivityPeriod;

		//	Try to initialize EnableADC from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableADC;
		else {
			//	Try to initialize EnableADC from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableADC;
		}
		//	And try to extract EnableADC value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableADC;

		//	Try to initialize DefaultTimePhaseValue from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  defaultTimePhaseValue;
		else {
			//	Try to initialize DefaultTimePhaseValue from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  defaultTimePhaseValue;
		}
		//	And try to extract DefaultTimePhaseValue value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  defaultTimePhaseValue;

		//	Try to initialize InterlockConfiguration from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  interlockConfiguration;
		else {
			//	Try to initialize InterlockConfiguration from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  interlockConfiguration;
		}
		//	And try to extract InterlockConfiguration value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  interlockConfiguration;

		//	Try to initialize EnableDDOptionalData from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableDDOptionalData;
		else {
			//	Try to initialize EnableDDOptionalData from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableDDOptionalData;
		}
		//	And try to extract EnableDDOptionalData value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableDDOptionalData;

		//	Try to initialize EnableSAOptionalData from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableSAOptionalData;
		else {
			//	Try to initialize EnableSAOptionalData from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableSAOptionalData;
		}
		//	And try to extract EnableSAOptionalData value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableSAOptionalData;

		//	Try to initialize EnableSAHistoryOptionalData from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableSAHistoryOptionalData;
		else {
			//	Try to initialize EnableSAHistoryOptionalData from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableSAHistoryOptionalData;
		}
		//	And try to extract EnableSAHistoryOptionalData value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableSAHistoryOptionalData;

		//	Try to initialize EnableADCOptionalData from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableADCOptionalData;
		else {
			//	Try to initialize EnableADCOptionalData from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableADCOptionalData;
		}
		//	And try to extract EnableADCOptionalData value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableADCOptionalData;

		//	Try to initialize Institute from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  institute;
		else {
			//	Try to initialize Institute from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  institute;
		}
		//	And try to extract Institute value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  institute;

		//	Try to initialize MaxDDBufferSizeWhenDecimationEnabled from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  maxDDBufferSizeWhenDecimationEnabled;
		else {
			//	Try to initialize MaxDDBufferSizeWhenDecimationEnabled from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  maxDDBufferSizeWhenDecimationEnabled;
		}
		//	And try to extract MaxDDBufferSizeWhenDecimationEnabled value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  maxDDBufferSizeWhenDecimationEnabled;

		//	Try to initialize PassBBAOffsetsToFPGA from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  passBBAOffsetsToFPGA;
		else {
			//	Try to initialize PassBBAOffsetsToFPGA from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  passBBAOffsetsToFPGA;
		}
		//	And try to extract PassBBAOffsetsToFPGA value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  passBBAOffsetsToFPGA;

		//	Try to initialize FADataCacheRefreshPeriod from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  fADataCacheRefreshPeriod;
		else {
			//	Try to initialize FADataCacheRefreshPeriod from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  fADataCacheRefreshPeriod;
		}
		//	And try to extract FADataCacheRefreshPeriod value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  fADataCacheRefreshPeriod;

		//	Try to initialize LiberaBoard from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaBoard;
		else {
			//	Try to initialize LiberaBoard from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaBoard;
		}
		//	And try to extract LiberaBoard value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaBoard;


	}
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::get_device_property_after

}

//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::always_executed_hook()
{
	INFO_STREAM << "LiberaBrilliancePlus::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests
	//TODO: copy all attribute data
    m_signalDdc->GetData();
    m_signalSA->GetData();
    m_signalADC->GetData();
    m_signalDdcRaw->GetData();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::always_executed_hook
}



//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::read_attr_hardware()
 *	Description : Hardware acquisition for attributes.
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_attr_hardware

}


//--------------------------------------------------------
/**
 *	Read LiberaModel attribute
 *	Description: The Libera Model: 0:Electron, 1:Brillance, 2:Photon
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_LiberaModel(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_LiberaModel(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_LiberaModel) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_LiberaModel_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_LiberaModel
}
//--------------------------------------------------------
/**
 *	Read DDEnabled attribute
 *	Description: DD data source activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DDEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DDEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DDEnabled) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_DDEnabled_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DDEnabled
}

//--------------------------------------------------------
/**
 *	Write DDEnabled attribute values to hardware.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_DDEnabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_DDEnabled(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_DDEnabled) ENABLED START -----*/

	w_val ? enable_dd() : disable_dd();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_DDEnabled
}

//--------------------------------------------------------
/**
 *	Read DDBufferSize attribute
 *	Description: The number of samples to be read on DD data source.\nInfluences the size of the associated attributes [such as XPosDD for instance].
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DDBufferSize(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DDBufferSize(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DDBufferSize) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DDBufferSize
}

//--------------------------------------------------------
/**
 *	Write DDBufferSize attribute values to hardware.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_DDBufferSize(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_DDBufferSize(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_DDBufferSize) ENABLED START -----*/

    m_signalDdc->Realloc(w_val);
    m_signalDdcRaw->Realloc(w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_DDBufferSize
}

//--------------------------------------------------------
/**
 *	Read DDDecimationFactor attribute
 *	Description: The DD decimation factor
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DDDecimationFactor(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DDDecimationFactor(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DDDecimationFactor) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_DDDecimationFactor_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DDDecimationFactor
}

//--------------------------------------------------------
/**
 *	Write DDDecimationFactor attribute values to hardware.
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_DDDecimationFactor(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_DDDecimationFactor(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevUShort	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_DDDecimationFactor) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_DDDecimationFactor
}

//--------------------------------------------------------
/**
 *	Read DDTriggerOffset attribute
 *	Description: DD data offset in num. of turns
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DDTriggerOffset(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DDTriggerOffset(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DDTriggerOffset) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_DDTriggerOffset_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DDTriggerOffset
}

//--------------------------------------------------------
/**
 *	Write DDTriggerOffset attribute values to hardware.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_DDTriggerOffset(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_DDTriggerOffset(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_DDTriggerOffset) ENABLED START -----*/

	m_libera->UpdateScalar(attr_DDTriggerOffset_read, w_val);
	m_signalDdc->SetOffset(w_val);
    m_signalDdcRaw->SetOffset(w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_DDTriggerOffset
}

//--------------------------------------------------------
/**
 *	Read DDBufferFreezingEnabled attribute
 *	Description: DD buffer freezing activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DDBufferFreezingEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DDBufferFreezingEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DDBufferFreezingEnabled) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_DDBufferFreezingEnabled_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DDBufferFreezingEnabled
}
//--------------------------------------------------------
/**
 *	Read DDBufferFrozen attribute
 *	Description: DD buffer status
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DDBufferFrozen(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DDBufferFrozen(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DDBufferFrozen) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_DDBufferFrozen_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DDBufferFrozen
}
//--------------------------------------------------------
/**
 *	Read DDTriggerCounter attribute
 *	Description: Number of trigger notifications received since last device <init> 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DDTriggerCounter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DDTriggerCounter(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DDTriggerCounter) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_DDTriggerCounter_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DDTriggerCounter
}
//--------------------------------------------------------
/**
 *	Read ExternalTriggerEnabled attribute
 *	Description: External trigger activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ExternalTriggerEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ExternalTriggerEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ExternalTriggerEnabled) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ExternalTriggerEnabled_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ExternalTriggerEnabled
}
//--------------------------------------------------------
/**
 *	Read ExternalTriggerDelay attribute
 *	Description: The external trigger signal can be internally hardware delayed. 
 *	             The delay is set in steps of ADC samples of about 9ns.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ExternalTriggerDelay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ExternalTriggerDelay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ExternalTriggerDelay) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ExternalTriggerDelay_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ExternalTriggerDelay
}

//--------------------------------------------------------
/**
 *	Write ExternalTriggerDelay attribute values to hardware.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_ExternalTriggerDelay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_ExternalTriggerDelay(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_ExternalTriggerDelay) ENABLED START -----*/

	m_libera->UpdateScalar(attr_ExternalTriggerDelay_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_ExternalTriggerDelay
}

//--------------------------------------------------------
/**
 *	Read SAEnabled attribute
 *	Description: SA data source activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SAEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SAEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SAEnabled) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_SAEnabled_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SAEnabled
}

//--------------------------------------------------------
/**
 *	Write SAEnabled attribute values to hardware.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_SAEnabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_SAEnabled(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_SAEnabled) ENABLED START -----*/

    w_val ? enable_sa() : disable_sa();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_SAEnabled
}

//--------------------------------------------------------
/**
 *	Read VaSA attribute
 *	Description: Slow Acquisition: Va
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VaSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VaSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VaSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_VaSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VaSA
}
//--------------------------------------------------------
/**
 *	Read VbSA attribute
 *	Description: Slow Acquisition: Vb
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VbSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VbSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VbSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_VbSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VbSA
}
//--------------------------------------------------------
/**
 *	Read VcSA attribute
 *	Description: Slow Acquisition: Vc
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VcSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VcSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VcSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_VcSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VcSA
}
//--------------------------------------------------------
/**
 *	Read VdSA attribute
 *	Description: Slow Acquisition: Vd
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VdSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VdSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VdSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_VdSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VdSA
}
//--------------------------------------------------------
/**
 *	Read XPosSA attribute
 *	Description: Slow Acquisition: X
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XPosSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_XPosSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XPosSA
}
//--------------------------------------------------------
/**
 *	Read ZPosSA attribute
 *	Description: Slow Acquisition: Z
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ZPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ZPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ZPosSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ZPosSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ZPosSA
}
//--------------------------------------------------------
/**
 *	Read SumSA attribute
 *	Description: Slow Acquisition: Sum
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SumSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SumSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SumSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_SumSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SumSA
}
//--------------------------------------------------------
/**
 *	Read QuadSA attribute
 *	Description: Slow Acquisition: Quad
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_QuadSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_QuadSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_QuadSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_QuadSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_QuadSA
}
//--------------------------------------------------------
/**
 *	Read CxSA attribute
 *	Description: FOFB X correction sent to the power supply
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_CxSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_CxSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_CxSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_CxSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_CxSA
}
//--------------------------------------------------------
/**
 *	Read CzSA attribute
 *	Description: FOFB Z correction sent to the power supply
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_CzSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_CzSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_CzSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_CzSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_CzSA
}
//--------------------------------------------------------
/**
 *	Read SAStatNumSamples attribute
 *	Description: The number of sample in SA history used to compute the SA statistics\n(Mean, RMS, Peak pos). The most recent samples will be used.\nThe valid range is [2, SAHistoryLength property value].\n
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SAStatNumSamples(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SAStatNumSamples(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SAStatNumSamples) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_SAStatNumSamples_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SAStatNumSamples
}

//--------------------------------------------------------
/**
 *	Write SAStatNumSamples attribute values to hardware.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_SAStatNumSamples(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_SAStatNumSamples(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_SAStatNumSamples) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_SAStatNumSamples
}

//--------------------------------------------------------
/**
 *	Read XMeanPosSA attribute
 *	Description: Slow Acquisition:  X Mean Pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XMeanPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XMeanPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XMeanPosSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_XMeanPosSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XMeanPosSA
}
//--------------------------------------------------------
/**
 *	Read ZMeanPosSA attribute
 *	Description: Slow Acquisition:  Z Mean Pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ZMeanPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ZMeanPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ZMeanPosSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ZMeanPosSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ZMeanPosSA
}
//--------------------------------------------------------
/**
 *	Read XRMSPosSA attribute
 *	Description: Slow Acquisition:  X RMS Pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XRMSPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XRMSPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XRMSPosSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_XRMSPosSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XRMSPosSA
}
//--------------------------------------------------------
/**
 *	Read ZRMSPosSA attribute
 *	Description: Slow Acquisition: Z RMS Pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ZRMSPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ZRMSPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ZRMSPosSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ZRMSPosSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ZRMSPosSA
}
//--------------------------------------------------------
/**
 *	Read XPeakPosSA attribute
 *	Description: Slow Acquisition: X pos peak to peak amplitude
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XPeakPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XPeakPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XPeakPosSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_XPeakPosSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XPeakPosSA
}
//--------------------------------------------------------
/**
 *	Read ZPeakPosSA attribute
 *	Description: Slow Acquisition: X pos peak to peak amplitude
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ZPeakPosSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ZPeakPosSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ZPeakPosSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ZPeakPosSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ZPeakPosSA
}
//--------------------------------------------------------
/**
 *	Read SumMeanSA attribute
 *	Description: SA: mean of sum
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SumMeanSA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SumMeanSA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SumMeanSA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_SumMeanSA_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SumMeanSA
}
//--------------------------------------------------------
/**
 *	Read ADCEnabled attribute
 *	Description: ADC data source activation flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ADCEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ADCEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ADCEnabled) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ADCEnabled_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ADCEnabled
}

//--------------------------------------------------------
/**
 *	Write ADCEnabled attribute values to hardware.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_ADCEnabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_ADCEnabled(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_ADCEnabled) ENABLED START -----*/

	w_val ? enable_adc() : disable_adc();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_ADCEnabled
}

//--------------------------------------------------------
/**
 *	Read ADCBufferSize attribute
 *	Description: The number of samples to be read on ADC data source.\nInfluences the size of the associated attributes [such as ADCChannelA for instance].
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ADCBufferSize(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ADCBufferSize(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ADCBufferSize) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ADCBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ADCBufferSize
}

//--------------------------------------------------------
/**
 *	Write ADCBufferSize attribute values to hardware.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_ADCBufferSize(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_ADCBufferSize(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_ADCBufferSize) ENABLED START -----*/

	m_signalADC->Realloc(w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_ADCBufferSize
}

//--------------------------------------------------------
/**
 *	Read PMOffset attribute
 *	Description: Internal delay of the post mortem trigger. \nCan be set in the range of +/- 10 ksamples.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_PMOffset(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_PMOffset(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_PMOffset) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_PMOffset_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_PMOffset
}

//--------------------------------------------------------
/**
 *	Write PMOffset attribute values to hardware.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_PMOffset(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_PMOffset(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_PMOffset) ENABLED START -----*/

	m_libera->UpdateScalar(attr_PMOffset_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_PMOffset
}

//--------------------------------------------------------
/**
 *	Read PMNotified attribute
 *	Description: Post Moterm notification flag
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_PMNotified(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_PMNotified(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_PMNotified) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_PMNotified_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_PMNotified
}
//--------------------------------------------------------
/**
 *	Read PMNotificationCounter attribute
 *	Description: Number a PM event recieved since last Init
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_PMNotificationCounter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_PMNotificationCounter(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_PMNotificationCounter) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_PMNotificationCounter_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_PMNotificationCounter
}
//--------------------------------------------------------
/**
 *	Read InterlockXNotified attribute
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockXNotified(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockXNotified(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockXNotified) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_InterlockXNotified_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockXNotified
}
//--------------------------------------------------------
/**
 *	Read InterlockZNotified attribute
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockZNotified(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockZNotified(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockZNotified) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_InterlockZNotified_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockZNotified
}
//--------------------------------------------------------
/**
 *	Read InterlockAttnNotified attribute
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockAttnNotified(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockAttnNotified(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockAttnNotified) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_InterlockAttnNotified_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockAttnNotified
}
//--------------------------------------------------------
/**
 *	Read InterlockADCPreFilterNotified attribute
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockADCPreFilterNotified(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockADCPreFilterNotified(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockADCPreFilterNotified) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_InterlockADCPreFilterNotified_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockADCPreFilterNotified
}
//--------------------------------------------------------
/**
 *	Read InterlockADCPostFilterNotified attribute
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockADCPostFilterNotified(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockADCPostFilterNotified(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockADCPostFilterNotified) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_InterlockADCPostFilterNotified_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockADCPostFilterNotified
}
//--------------------------------------------------------
/**
 *	Read XLow attribute
 *	Description: Lower limit of the X position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XLow(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XLow(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XLow) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_XLow_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XLow
}
//--------------------------------------------------------
/**
 *	Read XHigh attribute
 *	Description: Upper limit of the X position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XHigh(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XHigh(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XHigh) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_XHigh_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XHigh
}
//--------------------------------------------------------
/**
 *	Read ZLow attribute
 *	Description: Lower limit of the Z position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ZLow(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ZLow(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ZLow) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ZLow_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ZLow
}
//--------------------------------------------------------
/**
 *	Read ZHigh attribute
 *	Description: Upper limit of the Z position interlock threshold in mm
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ZHigh(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ZHigh(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ZHigh) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ZHigh_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ZHigh
}
//--------------------------------------------------------
/**
 *	Read AutoSwitchingEnabled attribute
 *	Description: Auto switching status (true=enabled, false=disabled)
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_AutoSwitchingEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_AutoSwitchingEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_AutoSwitchingEnabled) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_AutoSwitchingEnabled_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_AutoSwitchingEnabled
}
//--------------------------------------------------------
/**
 *	Read Switches attribute
 *	Description: Switches selection. Must be in [0, 15] or 255 for auto-switching.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Switches(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Switches(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Switches) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Switches_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Switches
}

//--------------------------------------------------------
/**
 *	Write Switches attribute values to hardware.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_Switches(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_Switches(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_Switches) ENABLED START -----*/

	m_libera->UpdateScalar(attr_Switches_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_Switches
}

//--------------------------------------------------------
/**
 *	Read ExternalSwitching attribute
 *	Description: Determines whether the ADC source switching  will be triggered by the \ninternally (false) or be the externally (true) by the machine clock.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ExternalSwitching(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ExternalSwitching(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ExternalSwitching) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ExternalSwitching_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ExternalSwitching
}

//--------------------------------------------------------
/**
 *	Write ExternalSwitching attribute values to hardware.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_ExternalSwitching(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_ExternalSwitching(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_ExternalSwitching) ENABLED START -----*/

	m_libera->UpdateScalar(attr_ExternalSwitching_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_ExternalSwitching
}

//--------------------------------------------------------
/**
 *	Read SwitchingDelay attribute
 *	Description: Delay for the ADC source switching.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SwitchingDelay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SwitchingDelay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SwitchingDelay) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_SwitchingDelay_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SwitchingDelay
}

//--------------------------------------------------------
/**
 *	Write SwitchingDelay attribute values to hardware.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_SwitchingDelay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_SwitchingDelay(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_SwitchingDelay) ENABLED START -----*/

    m_libera->UpdateScalar(attr_SwitchingDelay_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_SwitchingDelay
}

//--------------------------------------------------------
/**
 *	Read OffsetTune attribute
 *	Description: Determines the pll offset to tune the BPM. \nThe unit is ~40Hz.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_OffsetTune(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_OffsetTune(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_OffsetTune) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_OffsetTune_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_OffsetTune
}

//--------------------------------------------------------
/**
 *	Write OffsetTune attribute values to hardware.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_OffsetTune(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_OffsetTune(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_OffsetTune) ENABLED START -----*/

	m_libera->UpdateScalar(attr_OffsetTune_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_OffsetTune
}

//--------------------------------------------------------
/**
 *	Read CompensateTune attribute
 *	Description: Determines whether single or double offset tune will be employed. \nDefault value is true, which means that the the double offset tune is employed.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_CompensateTune(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_CompensateTune(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_CompensateTune) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_CompensateTune_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_CompensateTune
}

//--------------------------------------------------------
/**
 *	Write CompensateTune attribute values to hardware.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_CompensateTune(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_CompensateTune(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_CompensateTune) ENABLED START -----*/

	m_libera->UpdateScalar(attr_CompensateTune_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_CompensateTune
}

//--------------------------------------------------------
/**
 *	Read DSCMode attribute
 *	Description: Digital Signal Conditioning mode\n0:OFF - 1:UNITY - 2:AUTO
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_DSCMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_DSCMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_DSCMode) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_DSCMode_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_DSCMode
}

//--------------------------------------------------------
/**
 *	Write DSCMode attribute values to hardware.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_DSCMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_DSCMode(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_DSCMode) ENABLED START -----*/

	 m_libera->UpdateScalar(attr_DSCMode_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_DSCMode
}

//--------------------------------------------------------
/**
 *	Read AGCEnabled attribute
 *	Description: Enables/disables the Automatic Gain Control
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_AGCEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_AGCEnabled(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_AGCEnabled) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_AGCEnabled_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_AGCEnabled
}

//--------------------------------------------------------
/**
 *	Write AGCEnabled attribute values to hardware.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_AGCEnabled(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_AGCEnabled(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_AGCEnabled) ENABLED START -----*/

	m_libera->UpdateScalar(attr_AGCEnabled_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_AGCEnabled
}

//--------------------------------------------------------
/**
 *	Read Gain attribute
 *	Description: The Libera input gain. \nCan't be change while the AGC is active
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Gain(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Gain(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Gain) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Gain_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Gain
}

//--------------------------------------------------------
/**
 *	Write Gain attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_Gain(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_Gain(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_Gain) ENABLED START -----*/

	m_libera->UpdateScalar(attr_Gain_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_Gain
}

//--------------------------------------------------------
/**
 *	Read HasMAFSupport attribute
 *	Description: <true> if FGPA design with MAF support installed on Libera, <false> otherwise
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_HasMAFSupport(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_HasMAFSupport(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_HasMAFSupport) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_HasMAFSupport_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_HasMAFSupport
}
//--------------------------------------------------------
/**
 *	Read MAFLength attribute
 *	Description: MAF Delay and MAF Length are two\nparameters, added to adjustable\nDDC design. They are used to\ndetermine the position and the length\nof the acquisition window according\nto the partial fill of the accelerator.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_MAFLength(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_MAFLength(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_MAFLength) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_MAFLength_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_MAFLength
}

//--------------------------------------------------------
/**
 *	Write MAFLength attribute values to hardware.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_MAFLength(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_MAFLength(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_MAFLength) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_MAFLength
}

//--------------------------------------------------------
/**
 *	Read MAFDelay attribute
 *	Description: MAF Delay and MAF Length are two\nparameters, added to adjustable\nDDC design. They are used to\ndetermine the position and the length\nof the acquisition window according\nto the partial fill of the accelerator.\n
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_MAFDelay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_MAFDelay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_MAFDelay) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_MAFDelay_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_MAFDelay
}

//--------------------------------------------------------
/**
 *	Write MAFDelay attribute values to hardware.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_MAFDelay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_MAFDelay(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_MAFDelay) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_MAFDelay
}

//--------------------------------------------------------
/**
 *	Read MachineTime attribute
 *	Description: Machine Time value to be applied on the Libera when the SetTimeOnNextTrigger command is executed
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_MachineTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_MachineTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_MachineTime) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_MachineTime_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_MachineTime
}

//--------------------------------------------------------
/**
 *	Write MachineTime attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_MachineTime(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_MachineTime(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_MachineTime) ENABLED START -----*/

	m_libera->UpdateScalar(attr_MachineTime_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_MachineTime
}

//--------------------------------------------------------
/**
 *	Read TimePhase attribute
 *	Description: The Machine Time Phase
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_TimePhase(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_TimePhase(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_TimePhase) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_TimePhase_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_TimePhase
}

//--------------------------------------------------------
/**
 *	Write TimePhase attribute values to hardware.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_TimePhase(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_TimePhase(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_TimePhase) ENABLED START -----*/

    m_libera->UpdateScalar(attr_TimePhase_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_TimePhase
}

//--------------------------------------------------------
/**
 *	Read SystemTime attribute
 *	Description: System Time value to be applied on the Libera when the SetTimeOnNextTrigger command is executed\nUnit is num of secs since 1/1/1970 (Unix system time reference)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SystemTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SystemTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SystemTime) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_SystemTime_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SystemTime
}

//--------------------------------------------------------
/**
 *	Write SystemTime attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_SystemTime(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_SystemTime(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_SystemTime) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_SystemTime
}

//--------------------------------------------------------
/**
 *	Read SCPLLStatus attribute
 *	Description: The SC PLL lock status
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SCPLLStatus(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SCPLLStatus(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SCPLLStatus) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_SCPLLStatus_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SCPLLStatus
}
//--------------------------------------------------------
/**
 *	Read MCPLLStatus attribute
 *	Description: The MC PLL lock status
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_MCPLLStatus(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_MCPLLStatus(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_MCPLLStatus) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_MCPLLStatus_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_MCPLLStatus
}
//--------------------------------------------------------
/**
 *	Read Temp1 attribute
 *	Description: The Libera box first temperature
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Temp1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Temp1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Temp1) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Temp1_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Temp1
}
//--------------------------------------------------------
/**
 *	Read Temp2 attribute
 *	Description: The Libera box second temperature
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Temp2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Temp2(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Temp2) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Temp2_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Temp2
}
//--------------------------------------------------------
/**
 *	Read Temp3 attribute
 *	Description: The Libera box third temperature
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Temp3(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Temp3(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Temp3) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Temp3_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Temp3
}
//--------------------------------------------------------
/**
 *	Read Fan1Speed attribute
 *	Description: The current rotation speed of the first hardware cooling fan
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Fan1Speed(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Fan1Speed(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Fan1Speed) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Fan1Speed_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Fan1Speed
}
//--------------------------------------------------------
/**
 *	Read Fan2Speed attribute
 *	Description: The current rotation speed of the second hardware cooling fan
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Fan2Speed(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Fan2Speed(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Fan2Speed) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Fan2Speed_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Fan2Speed
}
//--------------------------------------------------------
/**
 *	Read Incoherence attribute
 *	Description: Result of the incoherence calculation. Am alarm will be set \non the attribute when an incoherence was detected.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_Incoherence(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_Incoherence(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_Incoherence) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Incoherence_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_Incoherence
}
//--------------------------------------------------------
/**
 *	Read RefIncoherence attribute
 *	Description: The reference incoherence value registered with the command \nSetReferenceIncoherence. The reference is used to calculate the\nalarm with the MaxIncoherenceDrift.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_RefIncoherence(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_RefIncoherence(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_RefIncoherence) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_RefIncoherence_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_RefIncoherence
}
//--------------------------------------------------------
/**
 *	Read MaxIncoherence attribute
 *	Description: Maximum incoherence value. Used to create an alarm on\nthe Incoherence attribute.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_MaxIncoherence(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_MaxIncoherence(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_MaxIncoherence) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_MaxIncoherence_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_MaxIncoherence
}

//--------------------------------------------------------
/**
 *	Write MaxIncoherence attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_MaxIncoherence(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_MaxIncoherence(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_MaxIncoherence) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_MaxIncoherence
}

//--------------------------------------------------------
/**
 *	Read MaxIncoherenceDrift attribute
 *	Description: Maximum incoherence drift value. Used to create an alarm on\nthe Incoherence attribute.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_MaxIncoherenceDrift(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_MaxIncoherenceDrift(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_MaxIncoherenceDrift) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_MaxIncoherenceDrift_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_MaxIncoherenceDrift
}

//--------------------------------------------------------
/**
 *	Write MaxIncoherenceDrift attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_MaxIncoherenceDrift(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_MaxIncoherenceDrift(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_MaxIncoherenceDrift) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_MaxIncoherenceDrift
}

//--------------------------------------------------------
/**
 *	Read UpTime attribute
 *	Description: Number of seconds since system boot on the host running this TANGO device
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_UpTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_UpTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_UpTime) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_UpTime_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_UpTime
}
//--------------------------------------------------------
/**
 *	Read CpuUsage attribute
 *	Description: CPU usage on the host running this TANGO device
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_CpuUsage(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_CpuUsage(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_CpuUsage) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_CpuUsage_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_CpuUsage
}
//--------------------------------------------------------
/**
 *	Read FreeMemory attribute
 *	Description: Amount of free memory on the host running this TANGO device
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_FreeMemory(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_FreeMemory(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_FreeMemory) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_FreeMemory_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_FreeMemory
}
//--------------------------------------------------------
/**
 *	Read RamFsUsage attribute
 *	Description: Amount of ram-fs allocated bytes on the host running this TANGO device 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_RamFsUsage(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_RamFsUsage(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_RamFsUsage) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_RamFsUsage_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_RamFsUsage
}
//--------------------------------------------------------
/**
 *	Read UseLiberaSAData attribute
 *	Description: If set to true, the X & Z SA postions are retreived from the Libera FPGA.\nOtherwise, they are computed by the Tango device using the button values.\n 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_UseLiberaSAData(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_UseLiberaSAData(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_UseLiberaSAData) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_UseLiberaSAData_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_UseLiberaSAData
}

//--------------------------------------------------------
/**
 *	Write UseLiberaSAData attribute values to hardware.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_UseLiberaSAData(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::write_UseLiberaSAData(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_UseLiberaSAData) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_UseLiberaSAData
}

//--------------------------------------------------------
/**
 *	Read XPosDD attribute
 *	Description: Turn by turn data: X Pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XPosDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XPosDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XPosDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_XPosDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XPosDD
}
//--------------------------------------------------------
/**
 *	Read ZPosDD attribute
 *	Description: Turn by turn data: Z Pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ZPosDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ZPosDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ZPosDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ZPosDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ZPosDD
}
//--------------------------------------------------------
/**
 *	Read QuadDD attribute
 *	Description: Turn by turn data: Quad
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_QuadDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_QuadDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_QuadDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_QuadDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_QuadDD
}
//--------------------------------------------------------
/**
 *	Read SumDD attribute
 *	Description: Turn by turn data: Sum
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SumDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SumDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SumDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_SumDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SumDD
}
//--------------------------------------------------------
/**
 *	Read VaDD attribute
 *	Description: Turn by turn data: Va
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VaDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VaDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VaDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_VaDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VaDD
}
//--------------------------------------------------------
/**
 *	Read VbDD attribute
 *	Description: Turn by turn data: Vb
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VbDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VbDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VbDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_VbDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VbDD
}
//--------------------------------------------------------
/**
 *	Read VcDD attribute
 *	Description: Turn by turn data: Vc
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VcDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VcDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VcDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_VcDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VcDD
}
//--------------------------------------------------------
/**
 *	Read VdDD attribute
 *	Description: Turn by turn data: Vd
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VdDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VdDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VdDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_VdDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VdDD
}
//--------------------------------------------------------
/**
 *	Read XPosSAHistory attribute
 *	Description: Slow Acquisition: SA X Pos. History
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XPosSAHistory(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XPosSAHistory(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XPosSAHistory) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_XPosSAHistory_read, 16384);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XPosSAHistory
}
//--------------------------------------------------------
/**
 *	Read ZPosSAHistory attribute
 *	Description: Slow Acquisition: SA Z Pos. History
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ZPosSAHistory(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ZPosSAHistory(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ZPosSAHistory) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ZPosSAHistory_read, 16384);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ZPosSAHistory
}
//--------------------------------------------------------
/**
 *	Read SumSAHistory attribute
 *	Description: Slow Acquisition: SA Sum Pos. History
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SumSAHistory(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SumSAHistory(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SumSAHistory) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_SumSAHistory_read, 16384);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SumSAHistory
}
//--------------------------------------------------------
/**
 *	Read XPosPM attribute
 *	Description: Post Mortem : X pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_XPosPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_XPosPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_XPosPM) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_XPosPM_read, 16384);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_XPosPM
}
//--------------------------------------------------------
/**
 *	Read ZPosPM attribute
 *	Description: Post Mortem : Z pos.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ZPosPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ZPosPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ZPosPM) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ZPosPM_read, 16384);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ZPosPM
}
//--------------------------------------------------------
/**
 *	Read QuadPM attribute
 *	Description: Post Mortem : Quad
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_QuadPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_QuadPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_QuadPM) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_QuadPM_read, 16384);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_QuadPM
}
//--------------------------------------------------------
/**
 *	Read SumPM attribute
 *	Description: Post Mortem : Sum
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_SumPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_SumPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_SumPM) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_SumPM_read, 16384);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_SumPM
}
//--------------------------------------------------------
/**
 *	Read VaPM attribute
 *	Description: Post Mortem : Va
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VaPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VaPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VaPM) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_VaPM_read, 16384);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VaPM
}
//--------------------------------------------------------
/**
 *	Read VbPM attribute
 *	Description: Post Mortem : Vb
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VbPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VbPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VbPM) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_VbPM_read, 16384);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VbPM
}
//--------------------------------------------------------
/**
 *	Read VcPM attribute
 *	Description: Post Mortem : Vc
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VcPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VcPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VcPM) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_VcPM_read, 16384);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VcPM
}
//--------------------------------------------------------
/**
 *	Read VdPM attribute
 *	Description: Post Mortem : Vd
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 16384
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_VdPM(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_VdPM(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_VdPM) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_VdPM_read, 16384);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_VdPM
}
//--------------------------------------------------------
/**
 *	Read ADCChannelA attribute
 *	Description: ADC values for pickup A
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ADCChannelA(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ADCChannelA(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ADCChannelA) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ADCChannelA_read, *attr_ADCBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ADCChannelA
}
//--------------------------------------------------------
/**
 *	Read ADCChannelB attribute
 *	Description: ADC values for pickup B
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ADCChannelB(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ADCChannelB(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ADCChannelB) ENABLED START -----*/

	//	Set the attribute value
    attr.set_value(attr_ADCChannelB_read, *attr_ADCBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ADCChannelB
}
//--------------------------------------------------------
/**
 *	Read ADCChannelC attribute
 *	Description: ADC values for pickup C
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ADCChannelC(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ADCChannelC(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ADCChannelC) ENABLED START -----*/

	//	Set the attribute value
    attr.set_value(attr_ADCChannelC_read, *attr_ADCBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ADCChannelC
}
//--------------------------------------------------------
/**
 *	Read ADCChannelD attribute
 *	Description: ADC values for pickup D
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_ADCChannelD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_ADCChannelD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_ADCChannelD) ENABLED START -----*/

	//	Set the attribute value
    attr.set_value(attr_ADCChannelD_read, *attr_ADCBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_ADCChannelD
}
//--------------------------------------------------------
/**
 *	Read IaDD attribute
 *	Description: Turn by turn data: Ia
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_IaDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_IaDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_IaDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_IaDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_IaDD
}
//--------------------------------------------------------
/**
 *	Read IbDD attribute
 *	Description: Turn by turn data: Ib
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_IbDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_IbDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_IbDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_IbDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_IbDD
}
//--------------------------------------------------------
/**
 *	Read IcDD attribute
 *	Description: Turn by turn data: Ic
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_IcDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_IcDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_IcDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_IcDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_IcDD
}
//--------------------------------------------------------
/**
 *	Read IdDD attribute
 *	Description: Turn by turn data: Id
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_IdDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_IdDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_IdDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_IdDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_IdDD
}
//--------------------------------------------------------
/**
 *	Read QaDD attribute
 *	Description: Turn by turn data: Qa
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_QaDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_QaDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_QaDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_QaDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_QaDD
}
//--------------------------------------------------------
/**
 *	Read QbDD attribute
 *	Description: Turn by turn data: Qb
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_QbDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_QbDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_QbDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_QbDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_QbDD
}
//--------------------------------------------------------
/**
 *	Read QcDD attribute
 *	Description: Turn by turn data: Qc
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_QcDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_QcDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_QcDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_QcDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_QcDD
}
//--------------------------------------------------------
/**
 *	Read QdDD attribute
 *	Description: Turn by turn data: Qd
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 250000
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_QdDD(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_QdDD(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_QdDD) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_QdDD_read, *attr_DDBufferSize_read);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_QdDD
}
//--------------------------------------------------------
/**
 *	Read UserData attribute
 *	Description: User defined data
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum  max = 256
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_UserData(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_UserData(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_UserData) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_UserData_read, 256);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_UserData
}
//--------------------------------------------------------
/**
 *	Read InterlockConfiguration attribute
 *	Description: The current interlock configuration. The vector mapping is the follwoing:\n[0] Mode : [0]: disabled, [1]: enabled, [3]: enabled with gain dependency\n[1] X low threshold in mm\n[2] X high threshold in mm\n[3] Z threshold low in mm \n[4] Z high threshold in mm\n[5] Overflow limit (ADC threshold)\n[6] Overflow duration (num of overloaded ADC samples before raising interlock)\n[7] Gain limit in dBm  (no interlock under this threshold) 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 8
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_InterlockConfiguration(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_InterlockConfiguration(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_InterlockConfiguration) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_InterlockConfiguration_read, 8);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_InterlockConfiguration
}
//--------------------------------------------------------
/**
 *	Read logs attribute
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum  max = 2048
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::read_logs(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::read_logs(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_logs) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_logs_read, 2048);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_logs
}

//--------------------------------------------------------
/**
 *	Method      : LiberaBrilliancePlus::LiberaBrilliancePlusClass::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *	              for specified device.
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::Class::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::Class::add_dynamic_attributes

}



//========================================================
//	Command execution methods
//========================================================

//--------------------------------------------------------
/**
 *	Execute the State command:
 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 *	@param argin none.
 *	@returns State Code
 */
//--------------------------------------------------------
Tango::DevState LiberaBrilliancePlus::dev_state()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::dev_state) ENABLED START -----*/

	Tango::DevState	argout = DeviceImpl::dev_state();
		//	Add your own state management

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::dev_state

	set_state(argout);               // Give the state to Tango.
	return DeviceImpl::dev_state();  // Return it after Tango management.

}

//--------------------------------------------------------
/**
 *	Execute the Status command:
 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *
 *	@param argin none.
 *	@returns Status description
 */
//--------------------------------------------------------
Tango::ConstDevString LiberaBrilliancePlus::dev_status()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::Status()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::dev_status) ENABLED START -----*/

	string	status = "Device is OK";
		//	Add your own status management

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::dev_status

	set_status(status);               // Give the status to Tango.
	return DeviceImpl::dev_status();  // Return it.

}

//--------------------------------------------------------
/**
 *	Execute the GetParameters command:
 *	Description: Retruns the current gains and offsets (i.e. the parameters used for position computation)
 *
 *	@param argin N/A
 *	@returns The BPM gain and offsets
 */
//--------------------------------------------------------
Tango::DevVarDoubleStringArray *LiberaBrilliancePlus::get_parameters()
{
	Tango::DevVarDoubleStringArray *argout;
	DEBUG_STREAM << "LiberaBrilliancePlus::GetParameters()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::get_parameters) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::get_parameters

	return argout;
}

//--------------------------------------------------------
/**
 *	Execute the UnfreezeDDBuffer command:
 *	Description: Unfreezes the DD buffer
 *
 *	@param argin n/a
 *	@returns n/a
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::unfreeze_ddbuffer()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::UnfreezeDDBuffer()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::unfreeze_ddbuffer) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::unfreeze_ddbuffer

}

//--------------------------------------------------------
/**
 *	Execute the EnableDDBufferFreezing command:
 *	Description: Enables the DD buffer freezing mechanism
 *
 *	@param argin n/a
 *	@returns n/a
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::enable_ddbuffer_freezing()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::EnableDDBufferFreezing()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::enable_ddbuffer_freezing) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::enable_ddbuffer_freezing

}

//--------------------------------------------------------
/**
 *	Execute the DisableDDBufferFreezing command:
 *	Description: Disables the DD buffer freezing mechanism
 *
 *	@param argin n/a
 *	@returns n/a
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::disable_ddbuffer_freezing()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::DisableDDBufferFreezing()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::disable_ddbuffer_freezing) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::disable_ddbuffer_freezing

}

//--------------------------------------------------------
/**
 *	Execute the EnableDD command:
 *	Description: Enables the so called "data on demand" (i.e. first turns) data source
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::enable_dd()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::EnableDD()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::enable_dd) ENABLED START -----*/

	//	Add your own code
	m_signalDdc->Enable();
	m_signalDdcRaw->Enable();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::enable_dd

}

//--------------------------------------------------------
/**
 *	Execute the DisableDD command:
 *	Description: Disables the so called "data on demand" (i.e. first turns) data source
 *
 *	@param argin n/a
 *	@returns n/a
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::disable_dd()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::DisableDD()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::disable_dd) ENABLED START -----*/

	//	Add your own code
	m_signalDdc->Disable();
	m_signalDdcRaw->Disable();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::disable_dd

}

//--------------------------------------------------------
/**
 *	Execute the EnableSA command:
 *	Description: Enables the so called "slow acquisition" data source
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::enable_sa()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::EnableSA()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::enable_sa) ENABLED START -----*/

	//	Add your own code
	m_signalSA->Enable();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::enable_sa

}

//--------------------------------------------------------
/**
 *	Execute the DisableSA command:
 *	Description: Disables the so called "slow acquisition" data source
 *
 *	@param argin n/a
 *	@returns n/a
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::disable_sa()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::DisableSA()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::disable_sa) ENABLED START -----*/

	//	Add your own code
	m_signalSA->Disable();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::disable_sa

}

//--------------------------------------------------------
/**
 *	Execute the ResetPMNotification command:
 *	Description: 
 *
 *	@param argin n/a
 *	@returns n/a
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::reset_pmnotification()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::ResetPMNotification()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::reset_pmnotification) ENABLED START -----*/

	//	Add your own code
	m_libera->UpdateScalar(attr_PMNotified_read, false);

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::reset_pmnotification

}

//--------------------------------------------------------
/**
 *	Execute the ResetInterlockNotification command:
 *	Description: Resets the interlock notification flags to false
 *
 *	@param argin n/a
 *	@returns n/a
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::reset_interlock_notification()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::ResetInterlockNotification()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::reset_interlock_notification) ENABLED START -----*/

	//	Add your own code
	m_libera->Execute(m_raf + "interlock.status.il_status.reset");

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::reset_interlock_notification

}

//--------------------------------------------------------
/**
 *	Execute the SetInterlockConfiguration command:
 *	Description: Change interlock configuration using the InterlockConfiguration class (or device) property.
 *	             Only  modify  the interlock configuration, the remaining env. parameters remain unchanged.
 *
 *	@param argin n/a
 *	@returns n/a
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::set_interlock_configuration()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::SetInterlockConfiguration()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::set_interlock_configuration) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::set_interlock_configuration

}

//--------------------------------------------------------
/**
 *	Execute the EnableADC command:
 *	Description: Enables the so called ADC data source
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::enable_adc()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::EnableADC()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::enable_adc) ENABLED START -----*/

	//	Add your own code
	m_signalADC->Enable();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::enable_adc

}

//--------------------------------------------------------
/**
 *	Execute the DisableADC command:
 *	Description: Disables the so called ADC data source
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::disable_adc()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::DisableADC()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::disable_adc) ENABLED START -----*/

	//	Add your own code
	m_signalADC->Disable();

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::disable_adc

}

//--------------------------------------------------------
/**
 *	Execute the SetTimeOnNextTrigger command:
 *	Description: Applies both machine et system time values on next trigger
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::set_time_on_next_trigger()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::SetTimeOnNextTrigger()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::set_time_on_next_trigger) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::set_time_on_next_trigger

}

//--------------------------------------------------------
/**
 *	Execute the ReadFAData command:
 *	Description: Statring from[offest] in FA data block, reads [size of elems] * [num of elems] bytes.
 *
 *	@param argin The reading parameters: [0]:offset in FA data block, [1]:size of elems, [2]:num of elems
 *	@returns The data [as an array of bytes]
 */
//--------------------------------------------------------
Tango::DevVarLongArray *LiberaBrilliancePlus::read_fadata(const Tango::DevVarLongArray *argin)
{
	Tango::DevVarLongArray *argout;
	DEBUG_STREAM << "LiberaBrilliancePlus::ReadFAData()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::read_fadata) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::read_fadata

	return argout;
}

//--------------------------------------------------------
/**
 *	Execute the WriteFAData command:
 *	Description: Starting from [offset] in Fa data block, writes [size of elems * num of elems].
 *	             The actual data to be written starts at index [4] in the input array.
 *
 *	@param argin The writting parameters: [0]:offset in FA data block, bytes[1]:size of elems, [2]:num of elems, [3, ...]: actual to data to be written
 *	@returns n/a
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::write_fadata(const Tango::DevVarLongArray *argin)
{
	DEBUG_STREAM << "LiberaBrilliancePlus::WriteFAData()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::write_fadata) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::write_fadata

}

//--------------------------------------------------------
/**
 *	Execute the SaveDSCParameters command:
 *	Description: Saves the current DSC parameters
 *
 *	@param argin n/a
 *	@returns n/a
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::save_dscparameters()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::SaveDSCParameters()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::save_dscparameters) ENABLED START -----*/

	//	Add your own code
	m_libera->Execute(m_raf + "conditioning.tuning.dsc.coefficients.store");

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::save_dscparameters

}

//--------------------------------------------------------
/**
 *	Execute the ReloadSystemProperties command:
 *	Description: 
 *
 *	@param argin n/a
 *	@returns n/a
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::reload_system_properties()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::ReloadSystemProperties()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::reload_system_properties) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::reload_system_properties

}

//--------------------------------------------------------
/**
 *	Execute the SetRefIncoherence command:
 *	Description: Set the actual incoherence value as refeference value for the drift alarm calculation.
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
void LiberaBrilliancePlus::set_ref_incoherence()
{
	DEBUG_STREAM << "LiberaBrilliancePlus::SetRefIncoherence()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::set_ref_incoherence) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::set_ref_incoherence

}

//--------------------------------------------------------
/**
 *	Execute the MagicCommand command:
 *	Description: 
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevVarStringArray *LiberaBrilliancePlus::magic_command(Tango::DevString argin)
{
	Tango::DevVarStringArray *argout;
	DEBUG_STREAM << "LiberaBrilliancePlus::MagicCommand()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::magic_command) ENABLED START -----*/

	//	Add your own code

    argout = new Tango::DevVarStringArray(1);
    argout->length(1);

    if (!m_libera->MagicCommand(argin, argout)) {
        INFO_STREAM << "magic_command() faled!" << endl;
    }

	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::magic_command

	return argout;
}


	/*----- PROTECTED REGION ID(LiberaBrilliancePlus::namespace_ending) ENABLED START -----*/

	//	Additional Methods
void LiberaBrilliancePlus::UpdatePM()
{
    INFO_STREAM << "NotifyPM: " << *(attr_PMNotified_read) << endl;
    if (*(attr_PMNotified_read)) {
        if (m_libera->IsConnected()) {
            INFO_STREAM << "update PM signal: " << *(attr_PMNotified_read) << endl;
            m_signalPM->Update();
            m_signalPM->GetData();
        }
        else {
            INFO_STREAM << "Not connected. Skip PM signal update." << endl;
        }
    }
}// //--------------------------------------------------------
// /**
//  *	Read Temp2 attribute
//  *	Description: The current Libera hardware temperature
//  *
//  *	Data type:	Tango::DevShort
//  *	Attr type:	Scalar 
//  */
// //--------------------------------------------------------
// void LiberaBrilliancePlus::read_Temp2(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "LiberaBrilliancePlus::read_Temp2(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_Temp2_read);
// }

// //--------------------------------------------------------
// /**
//  *	Read Temp3 attribute
//  *	Description: The current Libera hardware temperature
//  *
//  *	Data type:	Tango::DevShort
//  *	Attr type:	Scalar 
//  */
// //--------------------------------------------------------
// void LiberaBrilliancePlus::read_Temp3(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "LiberaBrilliancePlus::read_Temp3(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_Temp3_read);
// }


	/*----- PROTECTED REGION END -----*/	//	LiberaBrilliancePlus::namespace_ending
} //	namespace
